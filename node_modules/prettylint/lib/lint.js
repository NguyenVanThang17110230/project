"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var path = require("path");
var prettier = require("prettier");
var diagnose_1 = require("./diagnose");
function lint(filename, content, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, config, absolute_filename, relative_filename, node_type, rule_id, prettier_options, _b, _c, diagnostics, formatted, messages, error_1, message;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _a = options.config, config = _a === void 0 ? true : _a;
                    absolute_filename = path.resolve(filename);
                    relative_filename = path.relative('.', filename);
                    node_type = 'Unknown';
                    rule_id = 'prettier/prettier';
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 5, , 6]);
                    if (!(config === false)) return [3 /*break*/, 2];
                    _b = null;
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, prettier.resolveConfig(absolute_filename, {
                        config: config === true ? undefined : config
                    })];
                case 3:
                    _b = _d.sent();
                    _d.label = 4;
                case 4:
                    prettier_options = _b;
                    _c = diagnose_1.diagnose(content, tslib_1.__assign({ filepath: filename }, prettier_options)), diagnostics = _c.diagnostics, formatted = _c.formatted;
                    messages = diagnostics.map(function (_a) {
                        var message = _a.message, _b = _a.start, line = _b.line, column = _b.column;
                        return ({
                            ruleId: rule_id,
                            severity: 1 /* Warning */,
                            line: line,
                            column: column,
                            message: message,
                            nodeType: node_type
                        });
                    });
                    return [2 /*return*/, tslib_1.__assign({ filePath: relative_filename, source: content }, messages.length === 0 ? {} : { output: formatted }, { messages: messages, errorCount: 0, warningCount: messages.length })];
                case 5:
                    error_1 = _d.sent();
                    message = tslib_1.__assign({ ruleId: rule_id, severity: 2 /* Error */, nodeType: node_type }, error_1.loc
                        ? // SyntaxError from parser in prettier
                            {
                                line: error_1.loc.start.line,
                                column: error_1.loc.start.column,
                                message: error_1.message.split('\n', 1)[0]
                            }
                        : // istanbul ignore next
                            {
                                line: 0,
                                column: 0,
                                message: 
                                /* istanbul ignore next */ typeof error_1.message === 'string'
                                    ? error_1.message
                                    : error_1
                            });
                    return [2 /*return*/, {
                            filePath: relative_filename,
                            source: content,
                            messages: [message],
                            errorCount: 1,
                            warningCount: 0
                        }];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.lint = lint;
