"use strict";
exports.__esModule = true;
var utils = require("eslint-plugin-prettier");
var lines_and_columns_1 = require("lines-and-columns");
var prettier = require("prettier");
var Operation;
(function (Operation) {
    Operation[Operation["Delete"] = 0] = "Delete";
    Operation[Operation["Insert"] = 1] = "Insert";
    Operation[Operation["Replace"] = 2] = "Replace";
})(Operation = exports.Operation || (exports.Operation = {}));
function diagnose(content, options) {
    var diagnostics = [];
    var formatted = prettier.format(content, options);
    var differences = utils.generateDifferences(content, formatted);
    if (differences.length !== 0) {
        differences.forEach(function (difference) {
            var start_offset = difference.offset, _a = difference.deleteText, delete_text = _a === void 0 ? '' : _a, _b = difference.insertText, insert_text = _b === void 0 ? '' : _b;
            var end_offset = start_offset + delete_text.length;
            var insert_code = utils.showInvisibles(insert_text);
            var delete_code = utils.showInvisibles(delete_text);
            var message;
            var operation;
            switch (difference.operation) {
                case 'delete':
                    operation = Operation.Delete;
                    message = "Delete `" + delete_code + "`";
                    break;
                case 'insert':
                    operation = Operation.Insert;
                    message = "Insert `" + insert_code + "`";
                    break;
                case 'replace':
                    operation = Operation.Replace;
                    message = "Replace `" + delete_code + "` with `" + insert_code + "`";
                    break;
                // istanbul ignore next
                default:
                    throw new Error("Unexpected operation '" + difference.operation + "'");
            }
            var locator = new lines_and_columns_1["default"](content);
            var get_location = function (offset) {
                var _a = locator.locationForIndex(offset), line = _a.line, column = _a.column;
                return { line: line, column: column, offset: offset };
            };
            diagnostics.push({
                start: get_location(start_offset),
                end: get_location(end_offset),
                message: message,
                operation: operation,
                insert_text: insert_text,
                delete_text: delete_text
            });
        });
    }
    return { diagnostics: diagnostics, formatted: formatted };
}
exports.diagnose = diagnose;
