"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var values = require("ramda/src/values");
var merge = require("ramda/src/merge");
var ava_1 = require("ava");
var constants_1 = require("../../../constants");
var success_1 = require("./success");
var config = {
    key: constants_1.default.DEFAULT_KEY,
    resourceName: "users"
};
var subject = constants_1.default.REDUCER_NAMES.FETCH_SUCCESS;
function getCurrent() {
    return {
        1: {
            id: 1,
            name: "Blue"
        },
        2: {
            id: 2,
            name: "Red"
        }
    };
}
ava_1.default(subject + " adds the records", function (t) {
    var curr = getCurrent();
    var more = [
        {
            id: 42,
            name: "Green",
        },
    ];
    var updated = success_1.default(config, curr, more, {});
    var expected = {
        1: {
            id: 1,
            name: "Blue",
        },
        2: {
            id: 2,
            name: "Red",
        },
        42: {
            id: 42,
            name: "Green",
        },
    };
    t.deepEqual(updated, expected);
});
ava_1.default(subject + " throws when config.key is wrong", function (t) {
    var curr = getCurrent();
    var more = [
        {
            id: 42,
            name: "Green",
        },
    ];
    var config2 = merge(config, {
        key: "_id",
    });
    var f = function () {
        success_1.default(config2, curr, more, {});
    };
    t.throws(f);
});
ava_1.default(subject + " doesnt mutate the original collection", function (t) {
    var curr = getCurrent();
    var more = [
        {
            id: 3,
            name: "Green"
        }
    ];
    var updated = success_1.default(config, curr, more, {});
    t.is(values(curr).length, 2);
    t.is(values(updated).length, 3);
});
ava_1.default(subject + " merges", function (t) {
    var curr = getCurrent();
    var more = [
        {
            id: 2,
            name: "Green"
        }
    ];
    var updated = success_1.default(config, curr, more, {});
    t.is(values(updated).length, 2);
    t.is(updated["2"].id, 2);
    t.is(updated["2"].name, "Green");
});
ava_1.default(subject + " replaces", function (t) {
    var curr = getCurrent();
    var more = [
        {
            id: 2,
            name: "Green"
        }
    ];
    var updated = success_1.default(config, curr, more, {}, true);
    t.is(values(updated).length, 1);
    t.is(updated["2"].id, 2);
    t.is(updated["2"].name, "Green");
});
ava_1.default(subject + " uses the given key", function (t) {
    var config = {
        key: "_id",
        resourceName: "users"
    };
    var curr = {
        2: {
            _id: 2,
            name: "Blue"
        }
    };
    var more = [
        {
            _id: 2,
            name: "Green"
        }
    ];
    var updated = success_1.default(config, curr, more, {});
    t.is(values(updated).length, 1);
});
ava_1.default(subject + " it throws when records dont have an id", function (t) {
    var curr = getCurrent();
    var more = [
        {
            name: "Green"
        }
    ];
    var f = function () {
        success_1.default(config, curr, more, {});
    };
    t.throws(f);
});
ava_1.default(subject + " can take one record", function (t) {
    var curr = getCurrent();
    var one = {
        id: 3,
        name: "Green"
    };
    var updated = success_1.default(config, curr, one, {});
    t.is(values(updated).length, 3);
});
