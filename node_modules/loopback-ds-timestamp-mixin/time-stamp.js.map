{"version":3,"sources":["time-stamp.js"],"names":["debug","warn","options","message","silenceWarnings","console","Model","bootOptions","modelName","createdAt","updatedAt","required","validateUpsert","settings","pluralModelName","defineProperty","type","Date","defaultFn","observe","ctx","next","skipUpdatedAt","instance","id","where","data","module","exports","default"],"mappings":";;;;;;;;AAAA;;;;;;AAEA,IAAMA,QAAQ,sBAAd;AACA,IAAMC,OAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,OAAV,EAAsB;AACjC,MAAI,CAACD,QAAQE,eAAb,EAA8B;AAC5BC,YAAQJ,IAAR,CAAaE,OAAb;AACD;AACF,CAJD;;kBAMe,UAACG,KAAD,EAA6B;AAAA,MAArBC,WAAqB,uEAAP,EAAO;;AAC1CP,QAAM,8BAAN,EAAsCM,MAAME,SAA5C;;AAEA,MAAMN,UAAU,SAAc;AAC5BO,eAAW,WADiB;AAE5BC,eAAW,WAFiB;AAG5BC,cAAU,IAHkB;AAI5BC,oBAAgB,KAJY,EAIL;AACvBR,qBAAiB;AALW,GAAd,EAMbG,WANa,CAAhB;;AAQAP,QAAM,SAAN,EAAiBE,OAAjB;;AAEA,MAAI,CAACA,QAAQU,cAAT,IAA2BN,MAAMO,QAAN,CAAeD,cAA9C,EAA8D;AAC5DN,UAAMO,QAAN,CAAeD,cAAf,GAAgC,KAAhC;AACAX,SAAKC,OAAL,EAAiBI,MAAMQ,eAAvB;AACD;;AAED,MAAIR,MAAMO,QAAN,CAAeD,cAAf,IAAiCV,QAAQS,QAA7C,EAAuD;AACrDV,SAAKC,OAAL,mBAA6BI,MAAMQ,eAAnC;AAED;;AAEDR,QAAMS,cAAN,CAAqBb,QAAQO,SAA7B,EAAwC;AACtCO,UAAMC,IADgC;AAEtCN,cAAUT,QAAQS,QAFoB;AAGtCO,eAAW;AAH2B,GAAxC;;AAMAZ,QAAMS,cAAN,CAAqBb,QAAQQ,SAA7B,EAAwC;AACtCM,UAAMC,IADgC;AAEtCN,cAAUT,QAAQS;AAFoB,GAAxC;;AAKAL,QAAMa,OAAN,CAAc,aAAd,EAA6B,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1CrB,UAAM,aAAN,EAAqBoB,IAAIlB,OAAzB;AACA,QAAIkB,IAAIlB,OAAJ,IAAekB,IAAIlB,OAAJ,CAAYoB,aAA/B,EAA8C;AAAE,aAAOD,MAAP;AAAgB;AAChE,QAAID,IAAIG,QAAR,EAAkB;AAChBvB,YAAM,uBAAN,EAA+BoB,IAAId,KAAJ,CAAUE,SAAzC,EAAoDN,QAAQQ,SAA5D,EAAuEU,IAAIG,QAAJ,CAAaC,EAApF;AACAJ,UAAIG,QAAJ,CAAarB,QAAQQ,SAArB,IAAkC,IAAIO,IAAJ,EAAlC;AACD,KAHD,MAGO;AACLjB,YAAM,iCAAN,EACMoB,IAAId,KAAJ,CAAUQ,eADhB,EACiCZ,QAAQQ,SADzC,EACoDU,IAAIK,KADxD;AAEAL,UAAIM,IAAJ,CAASxB,QAAQQ,SAAjB,IAA8B,IAAIO,IAAJ,EAA9B;AACD;AACD,WAAOI,MAAP;AACD,GAZD;AAaD,C;;AAEDM,OAAOC,OAAP,GAAiBA,QAAQC,OAAzB","file":"time-stamp.js","sourcesContent":["import _debug from './debug';\n\nconst debug = _debug();\nconst warn = (options, message) => {\n  if (!options.silenceWarnings) {\n    console.warn(message);\n  }\n};\n\nexport default (Model, bootOptions = {}) => {\n  debug('TimeStamp mixin for Model %s', Model.modelName);\n\n  const options = Object.assign({\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n    required: true,\n    validateUpsert: false, // default to turning validation off\n    silenceWarnings: false,\n  }, bootOptions);\n\n  debug('options', options);\n\n  if (!options.validateUpsert && Model.settings.validateUpsert) {\n    Model.settings.validateUpsert = false;\n    warn(options, `${Model.pluralModelName} settings.validateUpsert was overriden to false`);\n  }\n\n  if (Model.settings.validateUpsert && options.required) {\n    warn(options, `Upserts for ${Model.pluralModelName} will fail when\n          validation is turned on and time stamps are required`);\n  }\n\n  Model.defineProperty(options.createdAt, {\n    type: Date,\n    required: options.required,\n    defaultFn: 'now',\n  });\n\n  Model.defineProperty(options.updatedAt, {\n    type: Date,\n    required: options.required,\n  });\n\n  Model.observe('before save', (ctx, next) => {\n    debug('ctx.options', ctx.options);\n    if (ctx.options && ctx.options.skipUpdatedAt) { return next(); }\n    if (ctx.instance) {\n      debug('%s.%s before save: %s', ctx.Model.modelName, options.updatedAt, ctx.instance.id);\n      ctx.instance[options.updatedAt] = new Date();\n    } else {\n      debug('%s.%s before update matching %j',\n            ctx.Model.pluralModelName, options.updatedAt, ctx.where);\n      ctx.data[options.updatedAt] = new Date();\n    }\n    return next();\n  });\n};\n\nmodule.exports = exports.default;\n"],"sourceRoot":"/Users/clarkbw/src/pi/loopback-ds-timestamp-mixin/es6"}