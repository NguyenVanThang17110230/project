'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _stream = require('stream');

var _writable = require('./commons/writable');

var _writable2 = _interopRequireDefault(_writable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * WritableMock writes it's input to data field. If options.objectMode is true, data will be an Array, otherwise it will be a Buffer.
 * @class
 * @extends stream.Writable
 * @memberof module:writable-mock
 */
/**
 * @module writable-mock
 * @requires stream.Writable
 */
var WritableMock = function (_Writable) {
  (0, _inherits3.default)(WritableMock, _Writable);

  /**
   * @constructs
   * @param {object} options Nodejs {@link https://nodejs.org/api/stream.html#stream_writable_streams stream.Readable} options.
   */
  function WritableMock(options) {
    (0, _classCallCheck3.default)(this, WritableMock);

    /**
     * Contains data written through this stream. If this stream is operating in object mode, it will be an Array of object, otherwise it will be a Buffer.
     * @public
     * @member {(Array.object|Buffer)}
     */
    var _this = (0, _possibleConstructorReturn3.default)(this, (WritableMock.__proto__ || (0, _getPrototypeOf2.default)(WritableMock)).call(this, options));

    _this.data = [];
    return _this;
  }

  /**
   * Write chunk into data.
   * @see {@link https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1 Nodejs documentation}
   * @private
   * @param {(Buffer|string|*)} chunk The chunk to be written. Will always be a buffer unless the decodeStrings option was set to false or the stream is operating in object mode.
   * @param {string} encoding  If the chunk is a string, then encoding is the character encoding of that string. If chunk is a Buffer, or if the stream is operating in object mode, encoding may be ignored.
   * @param {function} callback Call this function (optionally with an error argument) when processing is complete for the supplied chunk.
   */


  (0, _createClass3.default)(WritableMock, [{
    key: '_write',
    value: function _write() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (0, _apply2.default)(_writable2.default._write, this, args);
    }

    /**
     * Write a bunch of chunks into data.
     * @see {@link https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback Nodejs documentation}
     * @private
     * @param {Array} chunks The chunks to be written. Each chunk has following format: { chunk: ..., encoding: ... }.
     * @param {function} callback A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks.
     */

  }, {
    key: '_writev',
    value: function _writev() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (0, _apply2.default)(_writable2.default._writev, this, args);
    }

    /**
     * If the strean is not in object mode, WritableMock.data will be transformed into a Buffer.
     * @see {@link https://nodejs.org/api/stream.html#stream_writable_final_callback Nodejs documentation}
     * @private
     * @param {function} callback callback function
     */

  }, {
    key: '_final',
    value: function _final() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (0, _apply2.default)(_writable2.default._final, this, args);
    }

    /**
     * If in object mode return flatten data. Usefull for readable that returns arrays (hello ioredis).
     * @returns {(Array.object|Buffer)} The flatten data if object mode, otherwise === data
     */

  }, {
    key: 'flatData',
    get: function get() {
      return (0, _apply2.default)(_writable2.default.flatData, this, []);
    }
  }]);
  return WritableMock;
}(_stream.Writable);

exports.default = WritableMock;