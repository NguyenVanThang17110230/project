"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CommonWritable = function () {
  function CommonWritable() {
    (0, _classCallCheck3.default)(this, CommonWritable);
  }

  (0, _createClass3.default)(CommonWritable, [{
    key: "_write",
    value: function _write(chunk, encoding, callback) {
      this.data.push(chunk);
      callback();
    }
  }, {
    key: "_writev",
    value: function _writev(chunks, callback) {
      var datas = chunks.map(function (c) {
        return c.chunk;
      });
      this.data = this.data.concat(datas);
      callback();
    }
  }, {
    key: "_final",
    value: function _final(callback) {
      if (!this._writableState.objectMode) {
        var length = this.data.reduce(function (acc, curr) {
          acc += curr.length;
          return acc;
        }, 0);
        var buf = Buffer.alloc(length);
        var offset = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(this.data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var d = _step.value;

            d.copy(buf, offset);
            offset += d.length;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this.data = buf;
      }
      callback();
    }
  }, {
    key: "flatData",
    value: function flatData() {
      var _ref;

      if (!this._writableState.objectMode) {
        // Buffer mode, alreday flat
        return this.data;
      }
      return (_ref = []).concat.apply(_ref, (0, _toConsumableArray3.default)(this.data));
    }
  }]);
  return CommonWritable;
}();

exports.default = new CommonWritable();