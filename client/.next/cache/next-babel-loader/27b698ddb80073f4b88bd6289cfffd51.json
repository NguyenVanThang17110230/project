{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport BaseService from './BaseService';\nimport { validateUser } from '../validators/UserValidator';\nimport Role from '../../common/models/Role';\n\nvar UserService =\n/*#__PURE__*/\nfunction (_BaseService) {\n  _inherits(UserService, _BaseService);\n\n  function UserService(options) {\n    var _this;\n\n    _classCallCheck(this, UserService);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserService).call(this, options));\n    var userGateway = options.userGateway,\n        roleGateway = options.roleGateway,\n        invitationGateway = options.invitationGateway;\n    _this.userGateway = userGateway;\n    _this.roleGateway = roleGateway;\n    _this.invitationGateway = invitationGateway;\n    return _this;\n  }\n\n  _createClass(UserService, [{\n    key: \"getUsersForAdmin\",\n    value: function () {\n      var _getUsersForAdmin = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var where, skip, _ref$order, order, limit, total, users;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                where = _ref.where, skip = _ref.skip, _ref$order = _ref.order, order = _ref$order === void 0 ? 'createdAt DESC' : _ref$order, limit = _ref.limit;\n                _context.next = 3;\n                return this.userGateway.count(where);\n\n              case 3:\n                total = _context.sent;\n                _context.next = 6;\n                return this.userGateway.find({\n                  where: where,\n                  skip: skip,\n                  order: order,\n                  limit: limit,\n                  include: 'roles'\n                });\n\n              case 6:\n                users = _context.sent;\n                return _context.abrupt(\"return\", {\n                  total: total,\n                  users: users\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getUsersForAdmin(_x) {\n        return _getUsersForAdmin.apply(this, arguments);\n      }\n\n      return getUsersForAdmin;\n    }() // async getUsersForTC ({ where }) {\n    //   const total = await this.userGateway.count(where)\n    //   const users = await this.userGateway.find({\n    //     where\n    //   })\n    //   return { total, users }\n    // }\n\n  }, {\n    key: \"getRolesForAdmin\",\n    value: function () {\n      var _getRolesForAdmin = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var where, skip, order, limit;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                where = _ref2.where, skip = _ref2.skip, order = _ref2.order, limit = _ref2.limit;\n                return _context2.abrupt(\"return\", this.roleGateway.find({\n                  where: where,\n                  skip: skip,\n                  order: order,\n                  limit: limit\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRolesForAdmin(_x2) {\n        return _getRolesForAdmin.apply(this, arguments);\n      }\n\n      return getRolesForAdmin;\n    }()\n  }, {\n    key: \"createUser\",\n    value: function () {\n      var _createUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref3) {\n        var firstName, lastName, email, password, isInactive, role, user, isReferredUser;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                firstName = _ref3.firstName, lastName = _ref3.lastName, email = _ref3.email, password = _ref3.password, isInactive = _ref3.isInactive, role = _ref3.role;\n                validateUser({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  password: password\n                });\n                _context3.next = 4;\n                return this.userGateway.create({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  password: password,\n                  isInactive: isInactive\n                });\n\n              case 4:\n                user = _context3.sent;\n                _context3.next = 7;\n                return this.invitationGateway.findByEmail(email);\n\n              case 7:\n                isReferredUser = _context3.sent;\n\n                if (!isReferredUser) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 11;\n                return this.invitationGateway.acceptInvatation(isReferredUser.id);\n\n              case 11:\n                if (!(user && role)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 14;\n                return this._setRoleForUser(user.id, role);\n\n              case 14:\n                if (!(role === Role.AGENT)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                _context3.next = 17;\n                return this.addRankAndCashForAgent(user.id, Role.AGENT);\n\n              case 17:\n                if (!(role === Role.COORDINATOR)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                _context3.next = 20;\n                return this.addRankAndCashForAgent(user.id, Role.COORDINATOR);\n\n              case 20:\n                return _context3.abrupt(\"return\", user);\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function createUser(_x3) {\n        return _createUser.apply(this, arguments);\n      }\n\n      return createUser;\n    }()\n  }, {\n    key: \"getAllUser\",\n    value: function () {\n      var _getAllUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.userGateway.getAllUser());\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAllUser() {\n        return _getAllUser.apply(this, arguments);\n      }\n\n      return getAllUser;\n    }()\n  }, {\n    key: \"getUserFromId\",\n    value: function () {\n      var _getUserFromId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.userGateway.findById(id));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getUserFromId(_x4) {\n        return _getUserFromId.apply(this, arguments);\n      }\n\n      return getUserFromId;\n    }()\n  }, {\n    key: \"updateUser\",\n    value: function () {\n      var _updateUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref4) {\n        var id, firstName, lastName, email, emailVerified, isInactive, role, user;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                id = _ref4.id, firstName = _ref4.firstName, lastName = _ref4.lastName, email = _ref4.email, emailVerified = _ref4.emailVerified, isInactive = _ref4.isInactive, role = _ref4.role;\n                validateUser({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email\n                }); // const user = await this.userGateway.findById(id)\n\n                _context6.next = 4;\n                return this.userGateway.updateById(id, {\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  emailVerified: emailVerified,\n                  isInactive: isInactive\n                });\n\n              case 4:\n                user = _context6.sent;\n\n                if (!(user && role)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                _context6.next = 8;\n                return this._setRoleForUser(id, role);\n\n              case 8:\n                return _context6.abrupt(\"return\", user);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateUser(_x5) {\n        return _updateUser.apply(this, arguments);\n      }\n\n      return updateUser;\n    }()\n  }, {\n    key: \"updateInfoUser\",\n    value: function () {\n      var _updateInfoUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(id, _ref5) {\n        var firstName, lastName, dateOfBirth, gender, company, phone, location, bio;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                firstName = _ref5.firstName, lastName = _ref5.lastName, dateOfBirth = _ref5.dateOfBirth, gender = _ref5.gender, company = _ref5.company, phone = _ref5.phone, location = _ref5.location, bio = _ref5.bio;\n                return _context7.abrupt(\"return\", this.userGateway.updateInfoById(id, {\n                  firstName: firstName,\n                  lastName: lastName,\n                  dateOfBirth: dateOfBirth,\n                  gender: gender,\n                  company: company,\n                  phone: phone,\n                  location: location,\n                  bio: bio\n                }));\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function updateInfoUser(_x6, _x7) {\n        return _updateInfoUser.apply(this, arguments);\n      }\n\n      return updateInfoUser;\n    }()\n  }, {\n    key: \"deleteUserWithId\",\n    value: function () {\n      var _deleteUserWithId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(id) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.userGateway.deleteById(id));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function deleteUserWithId(_x8) {\n        return _deleteUserWithId.apply(this, arguments);\n      }\n\n      return deleteUserWithId;\n    }()\n  }, {\n    key: \"uploadCoverImageUser\",\n    value: function () {\n      var _uploadCoverImageUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(id, file) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.userGateway.uploadCoverImage(id, file));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function uploadCoverImageUser(_x9, _x10) {\n        return _uploadCoverImageUser.apply(this, arguments);\n      }\n\n      return uploadCoverImageUser;\n    }()\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(where) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.userGateway.count(where));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function count(_x11) {\n        return _count.apply(this, arguments);\n      }\n\n      return count;\n    }()\n  }, {\n    key: \"getMyMessagingParties\",\n    value: function () {\n      var _getMyMessagingParties = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.userGateway.getMyMessagingParties());\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMyMessagingParties() {\n        return _getMyMessagingParties.apply(this, arguments);\n      }\n\n      return getMyMessagingParties;\n    }()\n  }, {\n    key: \"updateUserAvatar\",\n    value: function () {\n      var _updateUserAvatar = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(userId, file) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.userGateway.updateUserAvatarById(userId, file));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function updateUserAvatar(_x12, _x13) {\n        return _updateUserAvatar.apply(this, arguments);\n      }\n\n      return updateUserAvatar;\n    }()\n    /**\n     * This is the art of domain drive design. Although the back-end support 1 user having multiple roles.\n     * The service is about implementing use case with the assumption that 1 user has 1 role.\n     * @param userId\n     * @param role\n     * @return {Promise.<void>}\n     */\n\n  }, {\n    key: \"_setRoleForUser\",\n    value: function () {\n      var _setRoleForUser2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13(userId, role) {\n        var roleData;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.userGateway.deleteAllRoles(userId);\n\n              case 2:\n                _context13.next = 4;\n                return this.roleGateway.findOne({\n                  where: {\n                    name: role\n                  }\n                });\n\n              case 4:\n                roleData = _context13.sent;\n                _context13.next = 7;\n                return this.roleGateway.createPrincipal({\n                  roleId: roleData.id,\n                  principalId: userId\n                });\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _setRoleForUser(_x14, _x15) {\n        return _setRoleForUser2.apply(this, arguments);\n      }\n\n      return _setRoleForUser;\n    }()\n  }, {\n    key: \"_setRoleForSignUpUser\",\n    value: function () {\n      var _setRoleForSignUpUser2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14(userId, role) {\n        var roleData;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.roleGateway.findOne({\n                  where: {\n                    name: role\n                  }\n                });\n\n              case 2:\n                roleData = _context14.sent;\n                _context14.next = 5;\n                return this.roleGateway.createPrincipal({\n                  roleId: roleData.id,\n                  principalId: userId\n                });\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _setRoleForSignUpUser(_x16, _x17) {\n        return _setRoleForSignUpUser2.apply(this, arguments);\n      }\n\n      return _setRoleForSignUpUser;\n    }()\n  }, {\n    key: \"sendMailToReferFriend\",\n    value: function () {\n      var _sendMailToReferFriend = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15(userId, email) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.invitationGateway.create({\n                  referrerId: userId,\n                  email: email\n                });\n\n              case 2:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function sendMailToReferFriend(_x18, _x19) {\n        return _sendMailToReferFriend.apply(this, arguments);\n      }\n\n      return sendMailToReferFriend;\n    }()\n  }, {\n    key: \"getInvitationById\",\n    value: function () {\n      var _getInvitationById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16(id) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.invitationGateway.findById(id));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getInvitationById(_x20) {\n        return _getInvitationById.apply(this, arguments);\n      }\n\n      return getInvitationById;\n    }()\n  }, {\n    key: \"getInvitationByEmail\",\n    value: function () {\n      var _getInvitationByEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee17(email) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", this.invitationGateway.findByEmail(email));\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getInvitationByEmail(_x21) {\n        return _getInvitationByEmail.apply(this, arguments);\n      }\n\n      return getInvitationByEmail;\n    }()\n  }, {\n    key: \"getReferredList\",\n    value: function () {\n      var _getReferredList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee18(referrerId) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", this.invitationGateway.getReferredList(referrerId));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getReferredList(_x22) {\n        return _getReferredList.apply(this, arguments);\n      }\n\n      return getReferredList;\n    }()\n  }, {\n    key: \"deleteExistedInvitation\",\n    value: function () {\n      var _deleteExistedInvitation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee19(id) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt(\"return\", this.invitationGateway.deleteExistedInvitation(id));\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function deleteExistedInvitation(_x23) {\n        return _deleteExistedInvitation.apply(this, arguments);\n      }\n\n      return deleteExistedInvitation;\n    }()\n  }, {\n    key: \"acceptInvatation\",\n    value: function () {\n      var _acceptInvatation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee20(id) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.invitationGateway.acceptInvatation(id);\n\n              case 2:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function acceptInvatation(_x24) {\n        return _acceptInvatation.apply(this, arguments);\n      }\n\n      return acceptInvatation;\n    }()\n  }, {\n    key: \"getAllReferrer\",\n    value: function () {\n      var _getAllReferrer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee21(userId) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                return _context21.abrupt(\"return\", this.userGateway.getReferrer(userId));\n\n              case 1:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getAllReferrer(_x25) {\n        return _getAllReferrer.apply(this, arguments);\n      }\n\n      return getAllReferrer;\n    }()\n  }, {\n    key: \"getUserRole\",\n    value: function () {\n      var _getUserRole = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee22(id) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                return _context22.abrupt(\"return\", this.userGateway.getUserRole(id));\n\n              case 1:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getUserRole(_x26) {\n        return _getUserRole.apply(this, arguments);\n      }\n\n      return getUserRole;\n    }()\n  }, {\n    key: \"getAllContact\",\n    value: function () {\n      var _getAllContact = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee23(id) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                return _context23.abrupt(\"return\", this.userGateway.getAllContact(id));\n\n              case 1:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getAllContact(_x27) {\n        return _getAllContact.apply(this, arguments);\n      }\n\n      return getAllContact;\n    }()\n  }, {\n    key: \"addRankAndCashForAgent\",\n    value: function () {\n      var _addRankAndCashForAgent = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee24(userId, role) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.userGateway.updateRankandCash(userId, {\n                  rank: role,\n                  cash: 0\n                });\n\n              case 2:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function addRankAndCashForAgent(_x28, _x29) {\n        return _addRankAndCashForAgent.apply(this, arguments);\n      }\n\n      return addRankAndCashForAgent;\n    }()\n  }, {\n    key: \"updateRankAndCash\",\n    value: function () {\n      var _updateRankAndCash = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee25(userId, rank, cash) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.userGateway.updateRankandCash(userId, {\n                  rank: rank,\n                  cash: cash\n                });\n\n              case 2:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function updateRankAndCash(_x30, _x31, _x32) {\n        return _updateRankAndCash.apply(this, arguments);\n      }\n\n      return updateRankAndCash;\n    }()\n  }, {\n    key: \"updateStatusNotification\",\n    value: function () {\n      var _updateStatusNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee26(userId, statusNotification) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.userGateway.updateStatusNotification(userId, {\n                  statusNotification: statusNotification\n                });\n\n              case 2:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function updateStatusNotification(_x33, _x34) {\n        return _updateStatusNotification.apply(this, arguments);\n      }\n\n      return updateStatusNotification;\n    }()\n  }, {\n    key: \"findUserByEmail\",\n    value: function () {\n      var _findUserByEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee27(email) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                return _context27.abrupt(\"return\", this.userGateway.findByEmail(email));\n\n              case 1:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function findUserByEmail(_x35) {\n        return _findUserByEmail.apply(this, arguments);\n      }\n\n      return findUserByEmail;\n    }()\n  }, {\n    key: \"getTransactionInfo\",\n    value: function () {\n      var _getTransactionInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee28(_ref6) {\n        var userId, where, skip, order, limit;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                userId = _ref6.userId, where = _ref6.where, skip = _ref6.skip, order = _ref6.order, limit = _ref6.limit;\n                return _context28.abrupt(\"return\", this.userGateway.getTransactionInfo({\n                  userId: userId,\n                  where: where,\n                  skip: skip,\n                  order: order,\n                  limit: limit\n                }));\n\n              case 2:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getTransactionInfo(_x36) {\n        return _getTransactionInfo.apply(this, arguments);\n      }\n\n      return getTransactionInfo;\n    }()\n  }]);\n\n  return UserService;\n}(BaseService);\n\nexport { UserService as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/services/UserService.js"],"names":["BaseService","validateUser","Role","UserService","options","userGateway","roleGateway","invitationGateway","where","skip","order","limit","count","total","find","include","users","firstName","lastName","email","password","isInactive","role","create","user","findByEmail","isReferredUser","acceptInvatation","id","_setRoleForUser","AGENT","addRankAndCashForAgent","COORDINATOR","getAllUser","findById","emailVerified","updateById","dateOfBirth","gender","company","phone","location","bio","updateInfoById","deleteById","file","uploadCoverImage","getMyMessagingParties","userId","updateUserAvatarById","deleteAllRoles","findOne","name","roleData","createPrincipal","roleId","principalId","referrerId","getReferredList","deleteExistedInvitation","getReferrer","getUserRole","getAllContact","updateRankandCash","rank","cash","statusNotification","updateStatusNotification","getTransactionInfo"],"mappings":"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","sourcesContent":["import BaseService from './BaseService'\nimport { validateUser } from '../validators/UserValidator'\nimport Role from '../../common/models/Role'\n\nexport type Query = {\n  id?: string,\n  name?: RegExp,\n  email?: RegExp,\n  emailVerified?: boolean\n}\n\nexport interface IUserGateway {\n  count(where: Query): Promise<number>;\n\n  find({\n    where: Query,\n    skip: number,\n    order: string,\n    limit: number\n  }): Promise<[Object]>;\n\n  create(user: {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n    isInactive: boolean\n  }): Promise<Object>;\n\n  findById(\n    id: string,\n    filter: {\n      where: Query,\n      skip: number,\n      order: string,\n      limit: number,\n      include: Query\n    }\n  ): Promise<Object>;\n\n  updateById(\n    id: string,\n    {\n      name: string,\n      email: string,\n      emailVerified: boolean,\n      isInactive: boolean\n    }\n  ): Promise<Object>;\n\n  updateInfoById(id: string, data: Object): Promise<Object>;\n\n  updateUserAvatar(id: string, file: Object): Promise<Object>;\n\n  deleteById(id: string): Promise<Object>;\n\n  deleteAllRoles(id: string): Promise<void>;\n\n  getUserRole(where: Object): Promise<Object>;\n\n  uploadCoverImage(id: string, file: Object): Promise<Object>;\n\n  getAllContact(id: string): Promise<Object>;\n\n  findUserByEmail(email: string): Promise<Object>;\n\n  getAllUser(): Promise<Object>;\n}\n\nexport default class UserService extends BaseService {\n  constructor (options: {\n    userGateway: IUserGateway,\n    roleGateway: Object,\n    invitationGateway: Object\n  }) {\n    super(options)\n    const { userGateway, roleGateway, invitationGateway } = options\n    this.userGateway = userGateway\n    this.roleGateway = roleGateway\n    this.invitationGateway = invitationGateway\n  }\n\n  async getUsersForAdmin ({ where, skip, order = 'createdAt DESC', limit }) {\n    const total = await this.userGateway.count(where)\n    const users = await this.userGateway.find({\n      where,\n      skip,\n      order,\n      limit,\n      include: 'roles'\n    })\n    return { total, users }\n  }\n\n  // async getUsersForTC ({ where }) {\n  //   const total = await this.userGateway.count(where)\n  //   const users = await this.userGateway.find({\n  //     where\n  //   })\n  //   return { total, users }\n  // }\n\n  async getRolesForAdmin ({ where, skip, order, limit }) {\n    return this.roleGateway.find({ where, skip, order, limit })\n  }\n\n  async createUser ({\n    firstName,\n    lastName,\n    email,\n    password,\n    isInactive,\n    role\n  }) {\n    validateUser({ firstName, lastName, email, password })\n\n    const user = await this.userGateway.create({\n      firstName,\n      lastName,\n      email,\n      password,\n      isInactive\n    })\n\n    const isReferredUser = await this.invitationGateway.findByEmail(email)\n\n    if (isReferredUser) {\n      await this.invitationGateway.acceptInvatation(isReferredUser.id)\n    }\n    // Assign role for user (if any) after creation. This can be implemented in back-end with new\n    // remote method API instead of using default generated restful API\n    if (user && role) {\n      await this._setRoleForUser(user.id, role)\n    }\n\n    if (role === Role.AGENT) {\n      await this.addRankAndCashForAgent(user.id, Role.AGENT)\n    }\n    if (role === Role.COORDINATOR) {\n      await this.addRankAndCashForAgent(user.id, Role.COORDINATOR)\n    }\n\n    return user\n  }\n\n  async getAllUser () {\n    return this.userGateway.getAllUser()\n  }\n\n  async getUserFromId (id) {\n    return this.userGateway.findById(id)\n  }\n\n  async updateUser ({\n    id,\n    firstName,\n    lastName,\n    email,\n    emailVerified,\n    isInactive,\n    role\n  }) {\n    validateUser({ firstName, lastName, email })\n\n    // const user = await this.userGateway.findById(id)\n    const user = await this.userGateway.updateById(id, {\n      firstName,\n      lastName,\n      email,\n      emailVerified,\n      isInactive\n    })\n\n    if (user && role) {\n      await this._setRoleForUser(id, role)\n    }\n\n    return user\n  }\n  async updateInfoUser (\n    id,\n    { firstName, lastName, dateOfBirth, gender, company, phone, location, bio }\n  ) {\n    return this.userGateway.updateInfoById(id, {\n      firstName,\n      lastName,\n      dateOfBirth,\n      gender,\n      company,\n      phone,\n      location,\n      bio\n    })\n  }\n\n  async deleteUserWithId (id) {\n    return this.userGateway.deleteById(id)\n  }\n  async uploadCoverImageUser (id, file) {\n    return this.userGateway.uploadCoverImage(id, file)\n  }\n\n  async count (where) {\n    return this.userGateway.count(where)\n  }\n\n  async getMyMessagingParties () {\n    return this.userGateway.getMyMessagingParties()\n  }\n\n  async updateUserAvatar (userId, file) {\n    return this.userGateway.updateUserAvatarById(userId, file)\n  }\n\n  /**\n   * This is the art of domain drive design. Although the back-end support 1 user having multiple roles.\n   * The service is about implementing use case with the assumption that 1 user has 1 role.\n   * @param userId\n   * @param role\n   * @return {Promise.<void>}\n   */\n  async _setRoleForUser (userId, role) {\n    await this.userGateway.deleteAllRoles(userId)\n\n    const roleData = await this.roleGateway.findOne({ where: { name: role } })\n    await this.roleGateway.createPrincipal({\n      roleId: roleData.id,\n      principalId: userId\n    })\n  }\n\n  async _setRoleForSignUpUser (userId, role) {\n    const roleData = await this.roleGateway.findOne({ where: { name: role } })\n    await this.roleGateway.createPrincipal({\n      roleId: roleData.id,\n      principalId: userId\n    })\n  }\n\n  async sendMailToReferFriend (userId, email) {\n    await this.invitationGateway.create({\n      referrerId: userId,\n      email\n    })\n  }\n\n  async getInvitationById (id) {\n    return this.invitationGateway.findById(id)\n  }\n\n  async getInvitationByEmail (email) {\n    return this.invitationGateway.findByEmail(email)\n  }\n\n  async getReferredList (referrerId) {\n    return this.invitationGateway.getReferredList(referrerId)\n  }\n\n  async deleteExistedInvitation (id) {\n    return this.invitationGateway.deleteExistedInvitation(id)\n  }\n\n  async acceptInvatation (id) {\n    await this.invitationGateway.acceptInvatation(id)\n  }\n\n  async getAllReferrer (userId) {\n    return this.userGateway.getReferrer(userId)\n  }\n\n  async getUserRole (id) {\n    return this.userGateway.getUserRole(id)\n  }\n\n  async getAllContact (id) {\n    return this.userGateway.getAllContact(id)\n  }\n\n  async addRankAndCashForAgent (userId, role) {\n    await this.userGateway.updateRankandCash(userId, {\n      rank: role,\n      cash: 0\n    })\n  }\n\n  async updateRankAndCash (userId, rank, cash) {\n    await this.userGateway.updateRankandCash(userId, { rank: rank, cash: cash })\n  }\n\n  async updateStatusNotification (userId, statusNotification) {\n    await this.userGateway.updateStatusNotification(userId, {\n      statusNotification: statusNotification\n    })\n  }\n\n  async findUserByEmail (email) {\n    return this.userGateway.findByEmail(email)\n  }\n\n  async getTransactionInfo ({ userId, where, skip, order, limit }) {\n    return this.userGateway.getTransactionInfo({\n      userId,\n      where,\n      skip,\n      order,\n      limit\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}