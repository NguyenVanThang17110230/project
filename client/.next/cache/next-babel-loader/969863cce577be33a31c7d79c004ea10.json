{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\n\nvar TaskService =\n/*#__PURE__*/\nfunction () {\n  function TaskService(options) {\n    _classCallCheck(this, TaskService);\n\n    this.taskGateway = options.taskGateway;\n  }\n\n  _createClass(TaskService, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(task) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.taskGateway.create(task));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"deleteTaskWithId\",\n    value: function () {\n      var _deleteTaskWithId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.taskGateway.deleteById(id));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteTaskWithId(_x2) {\n        return _deleteTaskWithId.apply(this, arguments);\n      }\n\n      return deleteTaskWithId;\n    }()\n  }, {\n    key: \"updateTask\",\n    value: function () {\n      var _updateTask = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(task) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.taskGateway.patch(task));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateTask(_x3) {\n        return _updateTask.apply(this, arguments);\n      }\n\n      return updateTask;\n    }()\n  }, {\n    key: \"archiveTask\",\n    value: function () {\n      var _archiveTask = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(taskId) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.taskGateway.editTaskById(taskId, {\n                  isActive: false\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function archiveTask(_x4) {\n        return _archiveTask.apply(this, arguments);\n      }\n\n      return archiveTask;\n    }()\n  }, {\n    key: \"getTaskById\",\n    value: function () {\n      var _getTaskById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.taskGateway.findById(id));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTaskById(_x5) {\n        return _getTaskById.apply(this, arguments);\n      }\n\n      return getTaskById;\n    }()\n  }, {\n    key: \"updateTaskById\",\n    value: function () {\n      var _updateTaskById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(id, task) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.taskGateway.editTaskById(id, task));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateTaskById(_x6, _x7) {\n        return _updateTaskById.apply(this, arguments);\n      }\n\n      return updateTaskById;\n    }()\n  }, {\n    key: \"getActiveTasks\",\n    value: function () {\n      var _getActiveTasks = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(userId, status) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.taskGateway.getTasksByIsActiveForUserId(userId, status, {\n                  neq: false\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getActiveTasks(_x8, _x9) {\n        return _getActiveTasks.apply(this, arguments);\n      }\n\n      return getActiveTasks;\n    }()\n  }, {\n    key: \"getArchiveTasks\",\n    value: function () {\n      var _getArchiveTasks = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(userId, status) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.taskGateway.getTasksByIsActiveForUserId(userId, status, false));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getArchiveTasks(_x10, _x11) {\n        return _getArchiveTasks.apply(this, arguments);\n      }\n\n      return getArchiveTasks;\n    }()\n  }, {\n    key: \"getTasksForUser\",\n    value: function () {\n      var _getTasksForUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(userId, status) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.taskGateway.find({\n                  status: status,\n                  or: [{\n                    creatorUserId: userId\n                  }, {\n                    sharedUserIds: userId\n                  }]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getTasksForUser(_x12, _x13) {\n        return _getTasksForUser.apply(this, arguments);\n      }\n\n      return getTasksForUser;\n    }()\n  }, {\n    key: \"getAllTasksForUser\",\n    value: function () {\n      var _getAllTasksForUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(userId) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.taskGateway.find({\n                  deadline: {\n                    gte: new Date(0)\n                  },\n                  or: [{\n                    creatorUserId: userId\n                  }, {\n                    sharedUserIds: userId\n                  }]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getAllTasksForUser(_x14) {\n        return _getAllTasksForUser.apply(this, arguments);\n      }\n\n      return getAllTasksForUser;\n    }()\n  }]);\n\n  return TaskService;\n}();\n\nexport { TaskService as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/services/TaskService.js"],"names":["TaskService","options","taskGateway","task","create","id","deleteById","patch","taskId","editTaskById","isActive","findById","userId","status","getTasksByIsActiveForUserId","neq","find","or","creatorUserId","sharedUserIds","deadline","gte","Date"],"mappings":";;;;;IAAqBA,W;;;AACnB,uBAAaC,OAAb,EAAsB;AAAA;;AACpB,SAAKC,WAAL,GAAmBD,OAAO,CAACC,WAA3B;AACD;;;;;;;gDAEaC,I;;;;;iDACL,KAAKD,WAAL,CAAiBE,MAAjB,CAAwBD,IAAxB,C;;;;;;;;;;;;;;;;;;;;;iDAGeE,E;;;;;kDACf,KAAKH,WAAL,CAAiBI,UAAjB,CAA4BD,EAA5B,C;;;;;;;;;;;;;;;;;;;;;iDAGSF,I;;;;;kDACT,KAAKD,WAAL,CAAiBK,KAAjB,CAAuBJ,IAAvB,C;;;;;;;;;;;;;;;;;;;;;iDAGUK,M;;;;;kDACV,KAAKN,WAAL,CAAiBO,YAAjB,CAA8BD,MAA9B,EAAsC;AAC3CE,kBAAAA,QAAQ,EAAE;AADiC,iBAAtC,C;;;;;;;;;;;;;;;;;;;;;iDAKUL,E;;;;;kDACV,KAAKH,WAAL,CAAiBS,QAAjB,CAA0BN,EAA1B,C;;;;;;;;;;;;;;;;;;;;;iDAGaA,E,EAAIF,I;;;;;kDACjB,KAAKD,WAAL,CAAiBO,YAAjB,CAA8BJ,EAA9B,EAAkCF,IAAlC,C;;;;;;;;;;;;;;;;;;;;;iDAGaS,M,EAAQC,M;;;;;kDACrB,KAAKX,WAAL,CAAiBY,2BAAjB,CAA6CF,MAA7C,EAAqDC,MAArD,EAA6D;AAClEE,kBAAAA,GAAG,EAAE;AAD6D,iBAA7D,C;;;;;;;;;;;;;;;;;;;;;iDAKcH,M,EAAQC,M;;;;;kDACtB,KAAKX,WAAL,CAAiBY,2BAAjB,CAA6CF,MAA7C,EAAqDC,MAArD,EAA6D,KAA7D,C;;;;;;;;;;;;;;;;;;;;;iDAGcD,M,EAAQC,M;;;;;kDACtB,KAAKX,WAAL,CAAiBc,IAAjB,CAAsB;AAC3BH,kBAAAA,MAAM,EAAEA,MADmB;AAE3BI,kBAAAA,EAAE,EAAE,CAAC;AAAEC,oBAAAA,aAAa,EAAEN;AAAjB,mBAAD,EAA4B;AAAEO,oBAAAA,aAAa,EAAEP;AAAjB,mBAA5B;AAFuB,iBAAtB,C;;;;;;;;;;;;;;;;;;;;;kDAMiBA,M;;;;;mDACjB,KAAKV,WAAL,CAAiBc,IAAjB,CAAsB;AAC3BI,kBAAAA,QAAQ,EAAE;AAAEC,oBAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,CAAT;AAAP,mBADiB;AAE3BL,kBAAAA,EAAE,EAAE,CAAC;AAAEC,oBAAAA,aAAa,EAAEN;AAAjB,mBAAD,EAA4B;AAAEO,oBAAAA,aAAa,EAAEP;AAAjB,mBAA5B;AAFuB,iBAAtB,C;;;;;;;;;;;;;;;;;;;;;SAjDUZ,W","sourcesContent":["export default class TaskService {\n  constructor (options) {\n    this.taskGateway = options.taskGateway\n  }\n\n  async create (task) {\n    return this.taskGateway.create(task)\n  }\n\n  async deleteTaskWithId (id) {\n    return this.taskGateway.deleteById(id)\n  }\n\n  async updateTask (task) {\n    return this.taskGateway.patch(task)\n  }\n\n  async archiveTask (taskId) {\n    return this.taskGateway.editTaskById(taskId, {\n      isActive: false\n    })\n  }\n\n  async getTaskById (id) {\n    return this.taskGateway.findById(id)\n  }\n\n  async updateTaskById (id, task) {\n    return this.taskGateway.editTaskById(id, task)\n  }\n\n  async getActiveTasks (userId, status) {\n    return this.taskGateway.getTasksByIsActiveForUserId(userId, status, {\n      neq: false\n    })\n  }\n\n  async getArchiveTasks (userId, status) {\n    return this.taskGateway.getTasksByIsActiveForUserId(userId, status, false)\n  }\n\n  async getTasksForUser (userId, status) {\n    return this.taskGateway.find({\n      status: status,\n      or: [{ creatorUserId: userId }, { sharedUserIds: userId }]\n    })\n  }\n\n  async getAllTasksForUser (userId) {\n    return this.taskGateway.find({\n      deadline: { gte: new Date(0) },\n      or: [{ creatorUserId: userId }, { sharedUserIds: userId }]\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}