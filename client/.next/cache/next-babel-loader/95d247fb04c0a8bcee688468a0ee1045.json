{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\n\nvar TransactionPartyGateway =\n/*#__PURE__*/\nfunction () {\n  function TransactionPartyGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, TransactionPartyGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(TransactionPartyGateway, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restConnector.post('/transactionParties', data);\n\n              case 2:\n                resp = _context.sent;\n                return _context.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.restConnector.get(\"/transactionParties/\".concat(id));\n\n              case 2:\n                _ref2 = _context2.sent;\n                data = _ref2.data;\n                return _context2.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function findById(_x2) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }()\n  }, {\n    key: \"updateById\",\n    value: function () {\n      var _updateById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id, data) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.restConnector.patch(\"/transactionParties/\".concat(id), data);\n\n              case 2:\n                resp = _context3.sent;\n                return _context3.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateById(_x3, _x4) {\n        return _updateById.apply(this, arguments);\n      }\n\n      return updateById;\n    }()\n  }, {\n    key: \"findByTransactionId\",\n    value: function () {\n      var _findByTransactionId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(transactionId) {\n        var _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.restConnector.get(\"/transactionParties?filter={\\\"where\\\":{\\\"transactionId\\\":\\\"\".concat(transactionId, \"\\\"}}\"));\n\n              case 2:\n                _ref3 = _context4.sent;\n                data = _ref3.data;\n                return _context4.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function findByTransactionId(_x5) {\n        return _findByTransactionId.apply(this, arguments);\n      }\n\n      return findByTransactionId;\n    }()\n  }, {\n    key: \"getByTransactionIdAndUserId\",\n    value: function () {\n      var _getByTransactionIdAndUserId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(transactionId, userId) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.restConnector.get(\"/transactionParties/findOne?filter={\\\"where\\\":{\\\"transactionId\\\":\\\"\".concat(transactionId, \"\\\",\\\"userId\\\":\\\"\").concat(userId, \"\\\"}}\"));\n\n              case 3:\n                resp = _context5.sent;\n                return _context5.abrupt(\"return\", resp.data);\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n\n      function getByTransactionIdAndUserId(_x6, _x7) {\n        return _getByTransactionIdAndUserId.apply(this, arguments);\n      }\n\n      return getByTransactionIdAndUserId;\n    }()\n  }, {\n    key: \"getByTransactionId\",\n    value: function () {\n      var _getByTransactionId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(transactionId, options) {\n        var url, resp;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                url = options ? \"/transactionParties?filter={\\\"where\\\":{\\n          \\\"transactionId\\\": \\\"\".concat(transactionId, \"\\\"},\\\"include\\\":\").concat(_JSON$stringify(options.include), \"\\n        }\") : \"/transactionParties?filter={\\\"where\\\":{\\n          \\\"transactionId\\\": \\\"\".concat(transactionId, \"\\\"}\\n        }\");\n                _context6.next = 3;\n                return this.restConnector.get(url);\n\n              case 3:\n                resp = _context6.sent;\n                return _context6.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getByTransactionId(_x8, _x9) {\n        return _getByTransactionId.apply(this, arguments);\n      }\n\n      return getByTransactionId;\n    }()\n  }, {\n    key: \"findByData\",\n    value: function () {\n      var _findByData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(where) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.restConnector.get(\"/transactionParties?filter={\\\"where\\\":\".concat(_JSON$stringify(where), \"}\"));\n\n              case 2:\n                resp = _context7.sent;\n                return _context7.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function findByData(_x10) {\n        return _findByData.apply(this, arguments);\n      }\n\n      return findByData;\n    }() // async findMemberByTransactionId(id){\n    //   const resp = await this.restConnector.get(`/`)\n    // }\n\n  }, {\n    key: \"getAgentTransaction\",\n    value: function () {\n      var _getAgentTransaction = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(userId, where, skip, order, limit) {\n        var filter, resp;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                filter = {\n                  where: {\n                    userId: userId,\n                    or: [{\n                      role: 'seller-agent'\n                    }, {\n                      role: 'buyer-agent'\n                    }]\n                  },\n                  include: {\n                    relation: 'transaction',\n                    scope: {\n                      where: where,\n                      include: {\n                        relation: 'transactionCommission'\n                      },\n                      order: order\n                    }\n                  },\n                  skip: skip,\n                  limit: limit\n                };\n                _context8.next = 3;\n                return this.restConnector.get(\"/transactionParties?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                resp = _context8.sent;\n                return _context8.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getAgentTransaction(_x11, _x12, _x13, _x14, _x15) {\n        return _getAgentTransaction.apply(this, arguments);\n      }\n\n      return getAgentTransaction;\n    }()\n  }]);\n\n  return TransactionPartyGateway;\n}();\n\nexport { TransactionPartyGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/TransactionPartyGateway.js"],"names":["TransactionPartyGateway","restConnector","data","post","resp","id","get","patch","transactionId","userId","options","url","include","where","skip","order","limit","filter","or","role","relation","scope"],"mappings":";;;;;;IAAqBA,uB;;;AACnB,yCAAgC;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AAAA;;AAC9B,SAAKA,aAAL,GAAqBA,aAArB;AACD;;;;;;;gDAEaC,I;;;;;;;uBACO,KAAKD,aAAL,CAAmBE,IAAnB,CAAwB,qBAAxB,EAA+CD,IAA/C,C;;;AAAbE,gBAAAA,I;iDACCA,IAAI,CAACF,I;;;;;;;;;;;;;;;;;;;;;iDAGEG,E;;;;;;;;uBACS,KAAKJ,aAAL,CAAmBK,GAAnB,+BAA8CD,EAA9C,E;;;;AAAfH,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;iDAGSG,E,EAAIH,I;;;;;;;uBACD,KAAKD,aAAL,CAAmBM,KAAnB,+BACMF,EADN,GAEjBH,IAFiB,C;;;AAAbE,gBAAAA,I;kDAICA,IAAI,CAACF,I;;;;;;;;;;;;;;;;;;;;;iDAGaM,a;;;;;;;;uBACF,KAAKP,aAAL,CAAmBK,GAAnB,sEACoCE,aADpC,U;;;;AAAfN,gBAAAA,I,SAAAA,I;kDAGDA,I;;;;;;;;;;;;;;;;;;;;;iDAG0BM,a,EAAeC,M;;;;;;;;uBAE3B,KAAKR,aAAL,CAAmBK,GAAnB,8EACgDE,aADhD,6BAC4EC,MAD5E,U;;;AAAbL,gBAAAA,I;kDAGCA,IAAI,CAACF,I;;;;;kDAEL,I;;;;;;;;;;;;;;;;;;;;;iDAIeM,a,EAAeE,O;;;;;;AACjCC,gBAAAA,G,GAAMD,OAAO,qFAEOF,aAFP,6BAEoC,gBACzDE,OAAO,CAACE,OADiD,CAFpC,qGAOOJ,aAPP,mB;;uBASA,KAAKP,aAAL,CAAmBK,GAAnB,CAAuBK,GAAvB,C;;;AAAbP,gBAAAA,I;kDACCA,IAAI,CAACF,I;;;;;;;;;;;;;;;;;;;;;iDAGIW,K;;;;;;;uBACG,KAAKZ,aAAL,CAAmBK,GAAnB,iDACsB,gBAAeO,KAAf,CADtB,O;;;AAAbT,gBAAAA,I;kDAGCA,IAAI,CAACF,I;;;;;;;;;;;;;;;QAEd;AACA;AACA;;;;;;;iDAE2BO,M,EAAQI,K,EAAOC,I,EAAMC,K,EAAOC,K;;;;;;AAC/CC,gBAAAA,M,GAAS;AACbJ,kBAAAA,KAAK,EAAE;AACLJ,oBAAAA,MAAM,EAANA,MADK;AAELS,oBAAAA,EAAE,EAAE,CAAC;AAAEC,sBAAAA,IAAI,EAAE;AAAR,qBAAD,EAA2B;AAAEA,sBAAAA,IAAI,EAAE;AAAR,qBAA3B;AAFC,mBADM;AAKbP,kBAAAA,OAAO,EAAE;AACPQ,oBAAAA,QAAQ,EAAE,aADH;AAEPC,oBAAAA,KAAK,EAAE;AACLR,sBAAAA,KAAK,EAALA,KADK;AAELD,sBAAAA,OAAO,EAAE;AACPQ,wBAAAA,QAAQ,EAAE;AADH,uBAFJ;AAKLL,sBAAAA,KAAK,EAALA;AALK;AAFA,mBALI;AAebD,kBAAAA,IAAI,EAAJA,IAfa;AAgBbE,kBAAAA,KAAK,EAALA;AAhBa,iB;;uBAkBI,KAAKf,aAAL,CAAmBK,GAAnB,sCACa,gBAAeW,MAAf,CADb,E;;;AAAbb,gBAAAA,I;kDAGCA,IAAI,CAACF,I;;;;;;;;;;;;;;;;;;;;;SAvFKF,uB","sourcesContent":["export default class TransactionPartyGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async create (data) {\n    const resp = await this.restConnector.post('/transactionParties', data)\n    return resp.data\n  }\n\n  async findById (id) {\n    const { data } = await this.restConnector.get(`/transactionParties/${id}`)\n    return data\n  }\n\n  async updateById (id, data) {\n    const resp = await this.restConnector.patch(\n      `/transactionParties/${id}`,\n      data\n    )\n    return resp.data\n  }\n\n  async findByTransactionId (transactionId) {\n    const { data } = await this.restConnector.get(\n      `/transactionParties?filter={\"where\":{\"transactionId\":\"${transactionId}\"}}`\n    )\n    return data\n  }\n\n  async getByTransactionIdAndUserId (transactionId, userId) {\n    try {\n      const resp = await this.restConnector.get(\n        `/transactionParties/findOne?filter={\"where\":{\"transactionId\":\"${transactionId}\",\"userId\":\"${userId}\"}}`\n      )\n      return resp.data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getByTransactionId (transactionId, options) {\n    const url = options\n      ? `/transactionParties?filter={\"where\":{\n          \"transactionId\": \"${transactionId}\"},\"include\":${JSON.stringify(\n  options.include\n)}\n        }`\n      : `/transactionParties?filter={\"where\":{\n          \"transactionId\": \"${transactionId}\"}\n        }`\n    const resp = await this.restConnector.get(url)\n    return resp.data\n  }\n\n  async findByData (where) {\n    const resp = await this.restConnector.get(\n      `/transactionParties?filter={\"where\":${JSON.stringify(where)}}`\n    )\n    return resp.data\n  }\n  // async findMemberByTransactionId(id){\n  //   const resp = await this.restConnector.get(`/`)\n  // }\n\n  async getAgentTransaction (userId, where, skip, order, limit) {\n    const filter = {\n      where: {\n        userId,\n        or: [{ role: 'seller-agent' }, { role: 'buyer-agent' }]\n      },\n      include: {\n        relation: 'transaction',\n        scope: {\n          where,\n          include: {\n            relation: 'transactionCommission'\n          },\n          order\n        }\n      },\n      skip,\n      limit\n    }\n    const resp = await this.restConnector.get(\n      `/transactionParties?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}