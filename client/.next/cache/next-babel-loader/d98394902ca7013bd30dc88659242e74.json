{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/slicedToArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport React, { Component } from 'react';\nimport userOnly from '../../hocs/userOnly';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './column';\nimport Head from 'next/head';\nimport { transactionService, taskService } from '../../services';\nimport { TaskStatus } from '../../../common/models/Task';\nimport toastr from 'toastr';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nfunction _getTasks(_x, _x2, _x3) {\n  return _getTasks2.apply(this, arguments);\n}\n\nfunction _getTasks2() {\n  _getTasks2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(userId, status, isActive) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isActive) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", taskService.getActiveTasks(userId, status));\n\n          case 2:\n            return _context5.abrupt(\"return\", taskService.getArchiveTasks(userId, status));\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getTasks2.apply(this, arguments);\n}\n\nvar index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(index, _Component);\n\n  _createClass(index, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var userId, _ref, transactions, isActive, tasksToDo, tasksInProgress, tasksComplete;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = ctx.store.getState().global.loginUser.data.id;\n                _context.next = 3;\n                return transactionService.getMyTransactionsAndActivitiesForUser(userId);\n\n              case 3:\n                _ref = _context.sent;\n                transactions = _ref.transactions;\n                isActive = true;\n                _context.next = 8;\n                return _getTasks(userId, TaskStatus.TO_DO, isActive);\n\n              case 8:\n                tasksToDo = _context.sent;\n                _context.next = 11;\n                return _getTasks(userId, TaskStatus.IN_PROGRESS, isActive);\n\n              case 11:\n                tasksInProgress = _context.sent;\n                _context.next = 14;\n                return _getTasks(userId, TaskStatus.COMPLETE, isActive);\n\n              case 14:\n                tasksComplete = _context.sent;\n                return _context.abrupt(\"return\", {\n                  transactions: transactions,\n                  tasksToDo: tasksToDo,\n                  tasksInProgress: tasksInProgress,\n                  tasksComplete: tasksComplete,\n                  headerText: 'Tasks'\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x4) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"columnOrder\", {\n      toDo: 'toDo',\n      inProgress: 'inProgress',\n      complete: 'complete'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getList\", function (id) {\n      return _this.state.initialData.columns[_this.columnOrder[id]];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDragEnd\", function (result) {\n      var source = result.source,\n          destination = result.destination; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        _this._reorder(_this.getList(source.droppableId), source.index, destination.index);\n      } else {\n        _this._move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateSelectedView\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(viewType) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.setState({\n                  selectedView: viewType\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_refetchDataByStatus\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(status, viewType) {\n        var isActive, data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                // const isActive = viewType === 'Active'\n                isActive = true;\n                _context3.next = 4;\n                return _getTasks(_this.props.currentUser.id, status, isActive);\n\n              case 4:\n                data = _context3.sent;\n\n                _this.setState({\n                  initialData: _objectSpread({}, _this.state.initialData, {\n                    columns: _objectSpread({}, _this.state.initialData.columns, _defineProperty({}, status, _objectSpread({}, _this.state.initialData.columns[status], {\n                      data: data\n                    })))\n                  })\n                });\n\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                toastr.error(_context3.t0.message);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 8]]);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_reorder\", function (list, startIndex, endIndex) {\n      var result = _Array$from(list.data);\n\n      var _result$splice = result.splice(startIndex, 1),\n          _result$splice2 = _slicedToArray(_result$splice, 1),\n          removed = _result$splice2[0];\n\n      result.splice(endIndex, 0, removed);\n\n      _this.setState({\n        initialData: _objectSpread({}, _this.state.initialData, {\n          columns: _objectSpread({}, _this.state.initialData.columns, _defineProperty({}, list.id, _objectSpread({}, _this.state.initialData.columns[list.id], {\n            data: result\n          })))\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_move\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(source, destination, droppableSource, droppableDestination) {\n        var _objectSpread4;\n\n        var sourceClone, destClone, _sourceClone$splice, _sourceClone$splice2, removed, newStart, newFinish, newState;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                sourceClone = _Array$from(source.data);\n                destClone = _Array$from(destination.data);\n                _sourceClone$splice = sourceClone.splice(droppableSource.index, 1), _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1), removed = _sourceClone$splice2[0];\n                destClone.splice(droppableDestination.index, 0, removed);\n                newStart = _objectSpread({}, source, {\n                  data: sourceClone\n                });\n                newFinish = _objectSpread({}, destination, {\n                  data: destClone\n                });\n                newState = _objectSpread({}, _this.state.initialData, {\n                  columns: _objectSpread({}, _this.state.initialData.columns, (_objectSpread4 = {}, _defineProperty(_objectSpread4, droppableSource.droppableId, newStart), _defineProperty(_objectSpread4, droppableDestination.droppableId, newFinish), _objectSpread4))\n                });\n\n                _this.setState({\n                  initialData: newState\n                });\n\n                _context4.prev = 8;\n                _context4.next = 11;\n                return taskService.updateTask(_objectSpread({}, removed, {\n                  status: \"\".concat(droppableDestination.droppableId)\n                }));\n\n              case 11:\n                toastr.success('Success');\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t0 = _context4[\"catch\"](8);\n                toastr.error(_context4.t0.message);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[8, 14]]);\n      }));\n\n      return function (_x8, _x9, _x10, _x11) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      selectedView: 'Active',\n      initialData: {\n        columns: {\n          toDo: {\n            id: 'toDo',\n            title: 'To-Do',\n            data: props.tasksToDo\n          },\n          inProgress: {\n            id: 'inProgress',\n            title: 'In Progress',\n            data: props.tasksInProgress\n          },\n          complete: {\n            id: 'complete',\n            title: 'Complete',\n            data: props.tasksComplete\n          }\n        },\n        // Facilitate reordering of the columns\n        columnOrder: ['toDo', 'inProgress', 'complete']\n      },\n      isSubmit: true,\n      showCreateEventModal: false,\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // Check the login permission on the task page\n      var selectedView = this.state.selectedView;\n      return React.createElement(\"div\", {\n        className: \"box-main\"\n      }, React.createElement(Head, null, React.createElement(\"title\", null, \"Tasks \")), React.createElement(\"div\", {\n        className: \"row m-0\"\n      }, React.createElement(UncontrolledDropdown, {\n        className: \"col-12 feature-archived text-right\"\n      }, React.createElement(DropdownToggle, {\n        className: \"btn button-archive px-4 \"\n      }, selectedView, \"\\xA0\\xA0\", React.createElement(\"i\", {\n        className: \"fa fa-angle-down\"\n      })), React.createElement(DropdownMenu, {\n        right: true\n      }, React.createElement(DropdownItem, {\n        onClick: function onClick() {\n          return _this2._updateSelectedView('Active');\n        }\n      }, \"Active\"), React.createElement(DropdownItem, {\n        onClick: function onClick() {\n          return _this2._updateSelectedView('Archived');\n        }\n      }, \"Archived\"))), React.createElement(\"div\", {\n        className: \"col-12 pl-0 pr-0\"\n      }, React.createElement(\"div\", {\n        className: \"row \"\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this._onDragEnd\n      }, this.state.initialData.columnOrder.map(function (columnName) {\n        var column = _this2.state.initialData.columns[columnName];\n        var tasks = column.data; // render the column of task\n\n        return React.createElement(Column, {\n          key: column.id,\n          viewType: selectedView,\n          column: column,\n          tasks: tasks,\n          transactions: _this2.props.transactions,\n          currentUser: _this2.props.currentUser,\n          refetchData: _this2._refetchDataByStatus\n        });\n      }))))), React.createElement(\"footer\", {\n        className: \"footer-card\",\n        style: {\n          padding: '2rem 0'\n        }\n      }, React.createElement(\"div\", {\n        className: \"footer-page\"\n      }, React.createElement(\"div\", {\n        className: \"footer-p1\"\n      }, \"\\xA9 Copyright Link Management Systems. All rights reserved\"), React.createElement(\"div\", {\n        className: \"footer-p2\"\n      }, \"Powered by Link Brokerages\"))));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nexport default userOnly(index);","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/Tasks/index.js"],"names":["React","Component","userOnly","DragDropContext","Column","Head","transactionService","taskService","TaskStatus","toastr","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","_getTasks","userId","status","isActive","getActiveTasks","getArchiveTasks","index","ctx","store","getState","global","loginUser","data","id","getMyTransactionsAndActivitiesForUser","transactions","TO_DO","tasksToDo","IN_PROGRESS","tasksInProgress","COMPLETE","tasksComplete","headerText","props","toDo","inProgress","complete","state","initialData","columns","columnOrder","result","source","destination","droppableId","_reorder","getList","_move","viewType","setState","selectedView","currentUser","error","message","list","startIndex","endIndex","splice","removed","droppableSource","droppableDestination","sourceClone","destClone","newStart","newFinish","newState","updateTask","success","title","isSubmit","showCreateEventModal","loading","_updateSelectedView","_onDragEnd","map","columnName","column","tasks","_refetchDataByStatus","padding"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,gBAAhD;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,oBADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,YAJF,QAKO,YALP;;SAOeC,S;;;;;;;2BAAf,kBAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMA,QADN;AAAA;AAAA;AAAA;;AAAA,8CAEWV,WAAW,CAACW,cAAZ,CAA2BH,MAA3B,EAAmCC,MAAnC,CAFX;;AAAA;AAAA,8CAIST,WAAW,CAACY,eAAZ,CAA4BJ,MAA5B,EAAoCC,MAApC,CAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;IAOMI,K;;;;;;;;;;gDAC0BC,G;;;;;;;AACtBN,gBAAAA,M,GAASM,GAAG,CAACC,KAAJ,CAAUC,QAAV,GAAqBC,MAArB,CAA4BC,SAA5B,CAAsCC,IAAtC,CAA2CC,E;;uBAGhDrB,kBAAkB,CAACsB,qCAAnB,CAAyDb,MAAzD,C;;;;AADRc,gBAAAA,Y,QAAAA,Y;AAEIZ,gBAAAA,Q,GAAW,I;;uBACOH,SAAS,CAACC,MAAD,EAASP,UAAU,CAACsB,KAApB,EAA2Bb,QAA3B,C;;;AAA3Bc,gBAAAA,S;;uBACwBjB,SAAS,CACrCC,MADqC,EAErCP,UAAU,CAACwB,WAF0B,EAGrCf,QAHqC,C;;;AAAjCgB,gBAAAA,e;;uBAKsBnB,SAAS,CAACC,MAAD,EAASP,UAAU,CAAC0B,QAApB,EAA8BjB,QAA9B,C;;;AAA/BkB,gBAAAA,a;iDACC;AACLN,kBAAAA,YAAY,EAAZA,YADK;AAELE,kBAAAA,SAAS,EAATA,SAFK;AAGLE,kBAAAA,eAAe,EAAfA,eAHK;AAILE,kBAAAA,aAAa,EAAbA,aAJK;AAKLC,kBAAAA,UAAU,EAAE;AALP,iB;;;;;;;;;;;;;;;;;;AAST,iBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,+EAAMA,KAAN;;AADkB,kEA8BN;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZC,MAAAA,UAAU,EAAE,YAFA;AAGZC,MAAAA,QAAQ,EAAE;AAHE,KA9BM;;AAAA,8DAoCV,UAAAb,EAAE;AAAA,aAAI,MAAKc,KAAL,CAAWC,WAAX,CAAuBC,OAAvB,CAA+B,MAAKC,WAAL,CAAiBjB,EAAjB,CAA/B,CAAJ;AAAA,KApCQ;;AAAA,iEAsCP,UAAAkB,MAAM,EAAI;AAAA,UACbC,MADa,GACWD,MADX,CACbC,MADa;AAAA,UACLC,WADK,GACWF,MADX,CACLE,WADK,EAErB;;AACA,UAAI,CAACA,WAAL,EAAkB;AAChB;AACD;;AACD,UAAID,MAAM,CAACE,WAAP,KAAuBD,WAAW,CAACC,WAAvC,EAAoD;AAClD,cAAKC,QAAL,CACE,MAAKC,OAAL,CAAaJ,MAAM,CAACE,WAApB,CADF,EAEEF,MAAM,CAAC1B,KAFT,EAGE2B,WAAW,CAAC3B,KAHd;AAKD,OAND,MAMO;AACL,cAAK+B,KAAL,CACE,MAAKD,OAAL,CAAaJ,MAAM,CAACE,WAApB,CADF,EAEE,MAAKE,OAAL,CAAaH,WAAW,CAACC,WAAzB,CAFF,EAGEF,MAHF,EAIEC,WAJF;AAMD;AACF,KA1DmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA4DE,kBAAMK,QAAN;AAAA;AAAA;AAAA;AAAA;AACpB,sBAAKC,QAAL,CAAc;AAAEC,kBAAAA,YAAY,EAAEF;AAAhB,iBAAd;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA5DF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA4HG,kBAAOpC,MAAP,EAAeoC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnB;AACMnC,gBAAAA,QAHa,GAGF,IAHE;AAAA;AAAA,uBAIAH,SAAS,CAAC,MAAKuB,KAAL,CAAWkB,WAAX,CAAuB5B,EAAxB,EAA4BX,MAA5B,EAAoCC,QAApC,CAJT;;AAAA;AAIbS,gBAAAA,IAJa;;AAKnB,sBAAK2B,QAAL,CAAc;AACZX,kBAAAA,WAAW,oBACN,MAAKD,KAAL,CAAWC,WADL;AAETC,oBAAAA,OAAO,oBACF,MAAKF,KAAL,CAAWC,WAAX,CAAuBC,OADrB,sBAEJ3B,MAFI,oBAGA,MAAKyB,KAAL,CAAWC,WAAX,CAAuBC,OAAvB,CAA+B3B,MAA/B,CAHA;AAIHU,sBAAAA,IAAI,EAAJA;AAJG;AAFE;AADC,iBAAd;;AALmB;AAAA;;AAAA;AAAA;AAAA;AAkBnBjB,gBAAAA,MAAM,CAAC+C,KAAP,CAAa,aAAEC,OAAf;;AAlBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA5HH;;AAAA;AAAA;AAAA;AAAA;;AAAA,+DAkJT,UAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AACzC,UAAMf,MAAM,GAAG,YAAWa,IAAI,CAAChC,IAAhB,CAAf;;AADyC,2BAEvBmB,MAAM,CAACgB,MAAP,CAAcF,UAAd,EAA0B,CAA1B,CAFuB;AAAA;AAAA,UAElCG,OAFkC;;AAGzCjB,MAAAA,MAAM,CAACgB,MAAP,CAAcD,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;;AACA,YAAKT,QAAL,CAAc;AACZX,QAAAA,WAAW,oBACN,MAAKD,KAAL,CAAWC,WADL;AAETC,UAAAA,OAAO,oBACF,MAAKF,KAAL,CAAWC,WAAX,CAAuBC,OADrB,sBAEJe,IAAI,CAAC/B,EAFD,oBAGA,MAAKc,KAAL,CAAWC,WAAX,CAAuBC,OAAvB,CAA+Be,IAAI,CAAC/B,EAApC,CAHA;AAIHD,YAAAA,IAAI,EAAEmB;AAJH;AAFE;AADC,OAAd;AAYD,KAlKmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAoKZ,kBACNC,MADM,EAENC,WAFM,EAGNgB,eAHM,EAINC,oBAJM;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMAC,gBAAAA,WANA,GAMc,YAAWnB,MAAM,CAACpB,IAAlB,CANd;AAOAwC,gBAAAA,SAPA,GAOY,YAAWnB,WAAW,CAACrB,IAAvB,CAPZ;AAAA,sCAQYuC,WAAW,CAACJ,MAAZ,CAAmBE,eAAe,CAAC3C,KAAnC,EAA0C,CAA1C,CARZ,iEAQC0C,OARD;AASNI,gBAAAA,SAAS,CAACL,MAAV,CAAiBG,oBAAoB,CAAC5C,KAAtC,EAA6C,CAA7C,EAAgD0C,OAAhD;AACMK,gBAAAA,QAVA,qBAWDrB,MAXC;AAYJpB,kBAAAA,IAAI,EAAEuC;AAZF;AAcAG,gBAAAA,SAdA,qBAeDrB,WAfC;AAgBJrB,kBAAAA,IAAI,EAAEwC;AAhBF;AAkBAG,gBAAAA,QAlBA,qBAmBD,MAAK5B,KAAL,CAAWC,WAnBV;AAoBJC,kBAAAA,OAAO,oBACF,MAAKF,KAAL,CAAWC,WAAX,CAAuBC,OADrB,wDAEJoB,eAAe,CAACf,WAFZ,EAE0BmB,QAF1B,mCAGJH,oBAAoB,CAAChB,WAHjB,EAG+BoB,SAH/B;AApBH;;AA0BN,sBAAKf,QAAL,CAAc;AAAEX,kBAAAA,WAAW,EAAE2B;AAAf,iBAAd;;AA1BM;AAAA;AAAA,uBA4BE9D,WAAW,CAAC+D,UAAZ,mBACDR,OADC;AAEJ9C,kBAAAA,MAAM,YAAKgD,oBAAoB,CAAChB,WAA1B;AAFF,mBA5BF;;AAAA;AAgCJvC,gBAAAA,MAAM,CAAC8D,OAAP,CAAe,SAAf;AAhCI;AAAA;;AAAA;AAAA;AAAA;AAkCJ9D,gBAAAA,MAAM,CAAC+C,KAAP,CAAa,aAAEC,OAAf;;AAlCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApKY;;AAAA;AAAA;AAAA;AAAA;;AAElB,UAAKhB,KAAL,GAAa;AACXa,MAAAA,YAAY,EAAE,QADH;AAEXZ,MAAAA,WAAW,EAAE;AACXC,QAAAA,OAAO,EAAE;AACPL,UAAAA,IAAI,EAAE;AACJX,YAAAA,EAAE,EAAE,MADA;AAEJ6C,YAAAA,KAAK,EAAE,OAFH;AAGJ9C,YAAAA,IAAI,EAAEW,KAAK,CAACN;AAHR,WADC;AAMPQ,UAAAA,UAAU,EAAE;AACVZ,YAAAA,EAAE,EAAE,YADM;AAEV6C,YAAAA,KAAK,EAAE,aAFG;AAGV9C,YAAAA,IAAI,EAAEW,KAAK,CAACJ;AAHF,WANL;AAWPO,UAAAA,QAAQ,EAAE;AACRb,YAAAA,EAAE,EAAE,UADI;AAER6C,YAAAA,KAAK,EAAE,UAFC;AAGR9C,YAAAA,IAAI,EAAEW,KAAK,CAACF;AAHJ;AAXH,SADE;AAkBX;AACAS,QAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,YAAT,EAAuB,UAAvB;AAnBF,OAFF;AAuBX6B,MAAAA,QAAQ,EAAE,IAvBC;AAwBXC,MAAAA,oBAAoB,EAAE,KAxBX;AAyBXC,MAAAA,OAAO,EAAE;AAzBE,KAAb;AAFkB;AA6BnB;;;;6BAmCS;AAAA;;AACR;AADQ,UAEArB,YAFA,GAEiB,KAAKb,KAFtB,CAEAa,YAFA;AAGR,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,oBAAC,IAAD,QACE,4CADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,oBAAC,oBAAD;AAAsB,QAAA,SAAS,EAAC;AAAhC,SACE,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAC;AAA1B,SACGA,YADH,cAEE;AAAG,QAAA,SAAS,EAAC;AAAb,QAFF,CADF,EAKE,oBAAC,YAAD;AAAc,QAAA,KAAK;AAAnB,SACE,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACsB,mBAAL,CAAyB,QAAzB,CAAN;AAAA;AAAvB,kBADF,EAIE,oBAAC,YAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACA,mBAAL,CAAyB,UAAzB,CAAN;AAAA;AADX,oBAJF,CALF,CADF,EAiBE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAE,KAAKC;AAAjC,SACG,KAAKpC,KAAL,CAAWC,WAAX,CAAuBE,WAAvB,CAAmCkC,GAAnC,CAAuC,UAAAC,UAAU,EAAI;AACpD,YAAMC,MAAM,GAAG,MAAI,CAACvC,KAAL,CAAWC,WAAX,CAAuBC,OAAvB,CAA+BoC,UAA/B,CAAf;AACA,YAAME,KAAK,GAAGD,MAAM,CAACtD,IAArB,CAFoD,CAGpD;;AACA,eACE,oBAAC,MAAD;AACE,UAAA,GAAG,EAAEsD,MAAM,CAACrD,EADd;AAEE,UAAA,QAAQ,EAAE2B,YAFZ;AAGE,UAAA,MAAM,EAAE0B,MAHV;AAIE,UAAA,KAAK,EAAEC,KAJT;AAKE,UAAA,YAAY,EAAE,MAAI,CAAC5C,KAAL,CAAWR,YAL3B;AAME,UAAA,WAAW,EAAE,MAAI,CAACQ,KAAL,CAAWkB,WAN1B;AAOE,UAAA,WAAW,EAAE,MAAI,CAAC2B;AAPpB,UADF;AAWD,OAfA,CADH,CADF,CADF,CAjBF,CAJF,EA4CE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAvC,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,uEADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,sCAJF,CADF,CA5CF,CADF;AAuDD;;;;EAjJiBlF,S;;AAiOpB,eAAeC,QAAQ,CAACkB,KAAD,CAAvB","sourcesContent":["import React, { Component } from 'react'\nimport userOnly from '../../hocs/userOnly'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport Column from './column'\nimport Head from 'next/head'\nimport { transactionService, taskService } from '../../services'\nimport { TaskStatus } from '../../../common/models/Task'\nimport toastr from 'toastr'\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap'\n\nasync function _getTasks (userId, status, isActive) {\n  if (isActive) {\n    return taskService.getActiveTasks(userId, status)\n  }\n  return taskService.getArchiveTasks(userId, status)\n}\n\nclass index extends Component {\n  static async getInitialProps (ctx) {\n    const userId = ctx.store.getState().global.loginUser.data.id\n    const {\n      transactions\n    } = await transactionService.getMyTransactionsAndActivitiesForUser(userId)\n    const isActive = true\n    const tasksToDo = await _getTasks(userId, TaskStatus.TO_DO, isActive)\n    const tasksInProgress = await _getTasks(\n      userId,\n      TaskStatus.IN_PROGRESS,\n      isActive\n    )\n    const tasksComplete = await _getTasks(userId, TaskStatus.COMPLETE, isActive)\n    return {\n      transactions,\n      tasksToDo,\n      tasksInProgress,\n      tasksComplete,\n      headerText: 'Tasks'\n    }\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      selectedView: 'Active',\n      initialData: {\n        columns: {\n          toDo: {\n            id: 'toDo',\n            title: 'To-Do',\n            data: props.tasksToDo\n          },\n          inProgress: {\n            id: 'inProgress',\n            title: 'In Progress',\n            data: props.tasksInProgress\n          },\n          complete: {\n            id: 'complete',\n            title: 'Complete',\n            data: props.tasksComplete\n          }\n        },\n        // Facilitate reordering of the columns\n        columnOrder: ['toDo', 'inProgress', 'complete']\n      },\n      isSubmit: true,\n      showCreateEventModal: false,\n      loading: false\n    }\n  }\n  columnOrder = {\n    toDo: 'toDo',\n    inProgress: 'inProgress',\n    complete: 'complete'\n  }\n\n  getList = id => this.state.initialData.columns[this.columnOrder[id]]\n\n  _onDragEnd = result => {\n    const { source, destination } = result\n    // dropped outside the list\n    if (!destination) {\n      return\n    }\n    if (source.droppableId === destination.droppableId) {\n      this._reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      )\n    } else {\n      this._move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      )\n    }\n  }\n\n  _updateSelectedView = async viewType => {\n    this.setState({ selectedView: viewType })\n  }\n\n  render () {\n    // Check the login permission on the task page\n    const { selectedView } = this.state\n    return (\n      <div className='box-main'>\n        <Head>\n          <title>Tasks </title>\n        </Head>\n        <div className='row m-0'>\n          <UncontrolledDropdown className='col-12 feature-archived text-right'>\n            <DropdownToggle className='btn button-archive px-4 '>\n              {selectedView}&nbsp;&nbsp;\n              <i className='fa fa-angle-down' />\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem onClick={() => this._updateSelectedView('Active')}>\n                Active\n              </DropdownItem>\n              <DropdownItem\n                onClick={() => this._updateSelectedView('Archived')}\n              >\n                Archived\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n          <div className='col-12 pl-0 pr-0'>\n            <div className='row '>\n              <DragDropContext onDragEnd={this._onDragEnd}>\n                {this.state.initialData.columnOrder.map(columnName => {\n                  const column = this.state.initialData.columns[columnName]\n                  const tasks = column.data\n                  // render the column of task\n                  return (\n                    <Column\n                      key={column.id}\n                      viewType={selectedView}\n                      column={column}\n                      tasks={tasks}\n                      transactions={this.props.transactions}\n                      currentUser={this.props.currentUser}\n                      refetchData={this._refetchDataByStatus}\n                    />\n                  )\n                })}\n              </DragDropContext>\n            </div>\n          </div>\n        </div>\n        <footer className='footer-card' style={{ padding: '2rem 0' }}>\n          <div className='footer-page'>\n            <div className='footer-p1'>\n              © Copyright Link Management Systems. All rights reserved\n            </div>\n            <div className='footer-p2'>Powered by Link Brokerages</div>\n          </div>\n        </footer>\n      </div>\n    )\n  }\n\n  _refetchDataByStatus = async (status, viewType) => {\n    try {\n      // const isActive = viewType === 'Active'\n      const isActive = true\n      const data = await _getTasks(this.props.currentUser.id, status, isActive)\n      this.setState({\n        initialData: {\n          ...this.state.initialData,\n          columns: {\n            ...this.state.initialData.columns,\n            [status]: {\n              ...this.state.initialData.columns[status],\n              data\n            }\n          }\n        }\n      })\n    } catch (e) {\n      toastr.error(e.message)\n    }\n  }\n\n  _reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list.data)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n    this.setState({\n      initialData: {\n        ...this.state.initialData,\n        columns: {\n          ...this.state.initialData.columns,\n          [list.id]: {\n            ...this.state.initialData.columns[list.id],\n            data: result\n          }\n        }\n      }\n    })\n  }\n\n  _move = async (\n    source,\n    destination,\n    droppableSource,\n    droppableDestination\n  ) => {\n    const sourceClone = Array.from(source.data)\n    const destClone = Array.from(destination.data)\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\n    destClone.splice(droppableDestination.index, 0, removed)\n    const newStart = {\n      ...source,\n      data: sourceClone\n    }\n    const newFinish = {\n      ...destination,\n      data: destClone\n    }\n    const newState = {\n      ...this.state.initialData,\n      columns: {\n        ...this.state.initialData.columns,\n        [droppableSource.droppableId]: newStart,\n        [droppableDestination.droppableId]: newFinish\n      }\n    }\n    this.setState({ initialData: newState })\n    try {\n      await taskService.updateTask({\n        ...removed,\n        status: `${droppableDestination.droppableId}`\n      })\n      toastr.success('Success')\n    } catch (e) {\n      toastr.error(e.message)\n    }\n  }\n}\nexport default userOnly(index)\n"]},"metadata":{},"sourceType":"module"}