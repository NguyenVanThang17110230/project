{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport ApplicationError from '../errors/ApplicationError';\nexport function create(_ref) {\n  var baseUrl = _ref.baseUrl;\n  var instance = axios.create({\n    baseURL: baseUrl\n  });\n  instance.interceptors.response.use(function (response) {\n    return response;\n  }, function (err) {\n    if (err.message === 'Network Error') {\n      err.code = ApplicationError.name;\n      err.message = 'errNetwork';\n    }\n\n    return _Promise.reject(err);\n  });\n  /**\n   * On browser, restConnector (axios) doesn't need to care about access_token anymore as we hacked around to let server set\n   * access_token to browser on successful login.\n   * @param token\n   */\n\n  instance.setAccessToken = function (token) {\n    if (token) {\n      instance.defaults.headers['AccessToken'] = token;\n    } else {\n      instance.removeAccessToken(token);\n    }\n  };\n\n  instance.removeAccessToken = function () {\n    delete instance.defaults.headers.AccessToken;\n    Cookies.remove('access_token');\n  };\n\n  return instance;\n}","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/connectors/RestConnector.js"],"names":["axios","Cookies","ApplicationError","create","baseUrl","instance","baseURL","interceptors","response","use","err","message","code","name","reject","setAccessToken","token","defaults","headers","removeAccessToken","AccessToken","remove"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AAEA,OAAO,SAASC,MAAT,OAA8B;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACnC,MAAMC,QAAQ,GAAGL,KAAK,CAACG,MAAN,CAAa;AAAEG,IAAAA,OAAO,EAAEF;AAAX,GAAb,CAAjB;AAEAC,EAAAA,QAAQ,CAACE,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CACE,UAAUD,QAAV,EAAoB;AAClB,WAAOA,QAAP;AACD,GAHH,EAIE,UAAUE,GAAV,EAAe;AACb,QAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACnCD,MAAAA,GAAG,CAACE,IAAJ,GAAWV,gBAAgB,CAACW,IAA5B;AACAH,MAAAA,GAAG,CAACC,OAAJ,GAAc,YAAd;AACD;;AACD,WAAO,SAAQG,MAAR,CAAeJ,GAAf,CAAP;AACD,GAVH;AAaA;;;;;;AAKAL,EAAAA,QAAQ,CAACU,cAAT,GAA0B,UAAUC,KAAV,EAAiB;AACzC,QAAIA,KAAJ,EAAW;AACTX,MAAAA,QAAQ,CAACY,QAAT,CAAkBC,OAAlB,CAA0B,aAA1B,IAA2CF,KAA3C;AACD,KAFD,MAEO;AACLX,MAAAA,QAAQ,CAACc,iBAAT,CAA2BH,KAA3B;AACD;AACF,GAND;;AAQAX,EAAAA,QAAQ,CAACc,iBAAT,GAA6B,YAAY;AACvC,WAAOd,QAAQ,CAACY,QAAT,CAAkBC,OAAlB,CAA0BE,WAAjC;AACAnB,IAAAA,OAAO,CAACoB,MAAR,CAAe,cAAf;AACD,GAHD;;AAKA,SAAOhB,QAAP;AACD","sourcesContent":["import axios from 'axios'\nimport Cookies from 'js-cookie'\nimport ApplicationError from '../errors/ApplicationError'\n\nexport function create ({ baseUrl }) {\n  const instance = axios.create({ baseURL: baseUrl })\n\n  instance.interceptors.response.use(\n    function (response) {\n      return response\n    },\n    function (err) {\n      if (err.message === 'Network Error') {\n        err.code = ApplicationError.name\n        err.message = 'errNetwork'\n      }\n      return Promise.reject(err)\n    }\n  )\n\n  /**\n   * On browser, restConnector (axios) doesn't need to care about access_token anymore as we hacked around to let server set\n   * access_token to browser on successful login.\n   * @param token\n   */\n  instance.setAccessToken = function (token) {\n    if (token) {\n      instance.defaults.headers['AccessToken'] = token\n    } else {\n      instance.removeAccessToken(token)\n    }\n  }\n\n  instance.removeAccessToken = function () {\n    delete instance.defaults.headers.AccessToken\n    Cookies.remove('access_token')\n  }\n\n  return instance\n}\n"]},"metadata":{},"sourceType":"module"}