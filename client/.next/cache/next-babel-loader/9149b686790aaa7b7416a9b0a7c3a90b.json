{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport { Modal } from 'reactstrap';\nimport { Formik } from 'formik';\nimport toastr from 'toastr';\nimport Dropzone from 'react-dropzone';\nimport { transactionService } from '../../services'; // import { TransactionRole } from '../../../common/models/Transaction'\n\nimport { MEGABYTE, MAX_FILE_SIZE, TYPE, FILE_TYPE } from '../../../common/models/Transaction';\n\nvar UploadNewDocumentModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadNewDocumentModal, _Component);\n\n  function UploadNewDocumentModal() {\n    var _this;\n\n    _classCallCheck(this, UploadNewDocumentModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadNewDocumentModal).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(values, action) {\n        var setSubmitting, _this$props, currentParty, transaction, toggleMemberModal, fetchData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = action.setSubmitting;\n                _this$props = _this.props, currentParty = _this$props.currentParty, transaction = _this$props.transaction, toggleMemberModal = _this$props.toggleMemberModal, fetchData = _this$props.fetchData;\n                _context.prev = 2;\n                setSubmitting(true);\n                _context.next = 6;\n                return transactionService.createFileDocument({\n                  file: _this.state.file[0],\n                  title: values.title,\n                  role: currentParty.role,\n                  creatorId: currentParty.id,\n                  partyId: currentParty.id,\n                  transactionId: transaction.id\n                });\n\n              case 6:\n                toggleMemberModal();\n                fetchData();\n                toastr.success('Success');\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                toastr.error(_context.t0.message);\n\n              case 14:\n                _context.prev = 14;\n                setSubmitting(false);\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11, 14, 17]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_fileTooLarge\", function () {\n      _this.setState({\n        file: 'large'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_validate\", function (file, title) {\n      var errors = {};\n      errors.title = 'Title document is required';\n      errors.file = 'File is required';\n      errors.size = \"Only allows file size smaller than \".concat(MEGABYTE, \" megabytes\");\n      errors.type = \"Only allows file type is \".concat(TYPE);\n\n      if (!file) {\n        if (title !== '') {\n          return errors.file;\n        }\n      } else if (file === 'large') {\n        return errors.size;\n      } else if (!file[0]) {\n        return errors.type;\n      } else {\n        if (title === '') {\n          return errors.title;\n        }\n      }\n\n      return null;\n    });\n\n    _this.onDrop = function (file) {\n      _this.setState({\n        file: file\n      });\n    };\n\n    _this.state = {\n      file: null\n    };\n    return _this;\n  }\n\n  _createClass(UploadNewDocumentModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          isShowUpdateNewDocumentModal = _this$props2.isShowUpdateNewDocumentModal,\n          toggleMemberModal = _this$props2.toggleMemberModal;\n      var file = this.state.file;\n      return React.createElement(Modal, {\n        isOpen: isShowUpdateNewDocumentModal,\n        toggle: toggleMemberModal\n      }, React.createElement(\"div\", {\n        className: \"page-button-new\"\n      }, React.createElement(\"div\", {\n        className: \"form-add-member\" // style={{ display: 'none' }}\n\n      }, React.createElement(\"div\", {\n        className: \"modal-header modal-header--change\",\n        id: \"bg-gr\"\n      }, React.createElement(\"div\", {\n        className: \"text-center w-100\"\n      }, React.createElement(\"h5\", {\n        className: \"modal-title new-add\",\n        id: \"exampleModalLabel\"\n      }, \"Upload New Document\")), React.createElement(\"div\", null, React.createElement(\"button\", {\n        id: \"close-modal\",\n        type: \"button\",\n        className: \"close bg-transparent \",\n        \"data-dismiss\": \"modal\",\n        onClick: function onClick() {\n          return toggleMemberModal();\n        }\n      }, \"\\xD7\"))), React.createElement(Formik, {\n        initialValues: {\n          title: ''\n        },\n        onSubmit: function onSubmit(values, action) {\n          return _this2.handleSubmit(values, action);\n        }\n      }, function (_ref2) {\n        var values = _ref2.values,\n            errors = _ref2.errors,\n            isValid = _ref2.isValid,\n            isSubmitting = _ref2.isSubmitting,\n            handleSubmit = _ref2.handleSubmit,\n            handleChange = _ref2.handleChange;\n        return React.createElement(\"form\", {\n          onSubmit: handleSubmit\n        }, React.createElement(\"div\", {\n          className: \"d-flex justify-content-center\"\n        }, React.createElement(\"div\", {\n          className: \"modal-body px-5 mx-2\",\n          id: \"main-body-add-member\"\n        }, React.createElement(\"div\", {\n          className: \"col-12\"\n        }, React.createElement(\"div\", {\n          className: \"col-12\"\n        }, React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"label\", {\n          className: \"tittle-mini-ver\"\n        }, \"Document information\", ' '), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Type here\",\n          name: \"title\",\n          onChange: handleChange,\n          maxLength: 150 // value={values.information}\n\n        }), errors.information && React.createElement(\"small\", {\n          className: \"text-danger\"\n        }, errors.information))), React.createElement(\"div\", {\n          className: \" col-12 \"\n        }, React.createElement(\"label\", {\n          className: \"tittle-mini-ver\"\n        }, \"Upload\"), React.createElement(\"div\", {\n          className: \"card transaction-card transaction-card--add text-center\",\n          style: {\n            backgroundColor: 'rgb(239 239 239)'\n          }\n        }, React.createElement(\"div\", {\n          className: \"card-body p-2\"\n        }, React.createElement(\"div\", {\n          className: \"transaction-add d-flex justify-content-center align-items-center display-6 text-\"\n        }, React.createElement(Dropzone, {\n          accept: FILE_TYPE,\n          maxSizeBytes: MAX_FILE_SIZE,\n          onDrop: _this2.onDrop\n        }, function (_ref3) {\n          var getRootProps = _ref3.getRootProps,\n              getInputProps = _ref3.getInputProps;\n          return React.createElement(\"section\", {\n            className: \"container\"\n          }, React.createElement(\"div\", getRootProps(), React.createElement(\"input\", getInputProps()), React.createElement(\"span\", {\n            className: \"w-100 u-clickable\"\n          }, React.createElement(\"img\", {\n            style: {\n              height: 60,\n              width: 'auto'\n            },\n            src: \"/static/images/upload_document.png\"\n          }))), file && file[0] && React.createElement(\"div\", null, file[0].size > MAX_FILE_SIZE ? React.createElement(\"div\", null, _this2._fileTooLarge()) : React.createElement(\"h5\", {\n            className: \"list-unstyled\"\n          }, file[0].name)));\n        })))))), React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, _this2._validate(file, values.title)))), React.createElement(\"div\", {\n          className: \"mt-5 d-flex justify-content-center\"\n        }, React.createElement(\"button\", {\n          disabled: !!_this2._validate(file, values.title) || !isValid || isSubmitting,\n          type: \"submit\",\n          className: \"btn btn-add-new mb-5 text-white th-11 d-flex align-items-center\"\n        }, isSubmitting && React.createElement(\"span\", {\n          className: \"spinner-border spinner-border-sm mr-2\"\n        }), \"Save\")));\n      }))));\n    }\n  }]);\n\n  return UploadNewDocumentModal;\n}(Component);\n\nexport default UploadNewDocumentModal;","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/component/Transaction/UploadNewDocumentModal.js"],"names":["React","Component","Modal","Formik","toastr","Dropzone","transactionService","MEGABYTE","MAX_FILE_SIZE","TYPE","FILE_TYPE","UploadNewDocumentModal","values","action","setSubmitting","props","currentParty","transaction","toggleMemberModal","fetchData","createFileDocument","file","state","title","role","creatorId","id","partyId","transactionId","success","error","message","setState","errors","size","type","onDrop","isShowUpdateNewDocumentModal","handleSubmit","isValid","isSubmitting","handleChange","information","backgroundColor","getRootProps","getInputProps","height","width","_fileTooLarge","name","_validate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Modal } from 'reactstrap'\nimport { Formik } from 'formik'\nimport toastr from 'toastr'\nimport Dropzone from 'react-dropzone'\nimport { transactionService } from '../../services'\n// import { TransactionRole } from '../../../common/models/Transaction'\nimport {\n  MEGABYTE,\n  MAX_FILE_SIZE,\n  TYPE,\n  FILE_TYPE\n} from '../../../common/models/Transaction'\nclass UploadNewDocumentModal extends Component {\n  constructor () {\n    super()\n    this.onDrop = file => {\n      this.setState({ file })\n    }\n    this.state = {\n      file: null\n    }\n  }\n\n  render () {\n    const { isShowUpdateNewDocumentModal, toggleMemberModal } = this.props\n    const { file } = this.state\n\n    return (\n      <Modal isOpen={isShowUpdateNewDocumentModal} toggle={toggleMemberModal}>\n        <div className='page-button-new'>\n          <div\n            className='form-add-member'\n            // style={{ display: 'none' }}\n          >\n            <div className='modal-header modal-header--change' id='bg-gr'>\n              <div className='text-center w-100'>\n                <h5 className='modal-title new-add' id='exampleModalLabel'>\n                  Upload New Document\n                </h5>\n              </div>\n              <div>\n                <button\n                  id='close-modal'\n                  type='button'\n                  className='close bg-transparent '\n                  data-dismiss='modal'\n                  onClick={() => toggleMemberModal()}\n                >\n                  &times;\n                </button>\n              </div>\n            </div>\n            <Formik\n              initialValues={{\n                title: ''\n              }}\n              onSubmit={(values, action) => this.handleSubmit(values, action)}\n            >\n              {({\n                values,\n                errors,\n                isValid,\n                isSubmitting,\n                handleSubmit,\n                handleChange\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <div className='d-flex justify-content-center'>\n                    <div\n                      className='modal-body px-5 mx-2'\n                      id='main-body-add-member'\n                    >\n                      <div className='col-12'>\n                        <div className='col-12'>\n                          <div className='form-group'>\n                            <label className='tittle-mini-ver'>\n                              Document information{' '}\n                            </label>\n                            <input\n                              type='text'\n                              className='form-control'\n                              placeholder='Type here'\n                              name='title'\n                              onChange={handleChange}\n                              maxLength={150}\n                              // value={values.information}\n                            />\n                            {errors.information && (\n                              <small className='text-danger'>\n                                {errors.information}\n                              </small>\n                            )}\n                          </div>\n                        </div>\n                        <div className=' col-12 '>\n                          <label className='tittle-mini-ver'>Upload</label>\n                          <div\n                            className='card transaction-card transaction-card--add text-center'\n                            style={{ backgroundColor: 'rgb(239 239 239)' }}\n                          >\n                            <div className='card-body p-2'>\n                              <div className='transaction-add d-flex justify-content-center align-items-center display-6 text-'>\n                                <Dropzone\n                                  accept={FILE_TYPE}\n                                  maxSizeBytes={MAX_FILE_SIZE}\n                                  onDrop={this.onDrop}\n                                >\n                                  {({ getRootProps, getInputProps }) => (\n                                    <section className='container'>\n                                      <div {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        <span className='w-100 u-clickable'>\n                                          <img\n                                            style={{\n                                              height: 60,\n                                              width: 'auto'\n                                            }}\n                                            src='/static/images/upload_document.png'\n                                          />\n                                        </span>\n                                      </div>\n                                      {file && file[0] && (\n                                        <div>\n                                          {file[0].size > MAX_FILE_SIZE ? (\n                                            <div>{this._fileTooLarge()}</div>\n                                          ) : (\n                                            <h5 className='list-unstyled'>\n                                              {file[0].name}\n                                            </h5>\n                                          )}\n                                        </div>\n                                      )}\n                                    </section>\n                                  )}\n                                </Dropzone>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className='text-danger text-center'>\n                        {this._validate(file, values.title)}\n                      </div>\n                    </div>\n                  </div>\n                  <div className='mt-5 d-flex justify-content-center'>\n                    <button\n                      disabled={\n                        !!this._validate(file, values.title) ||\n                        !isValid ||\n                        isSubmitting\n                      }\n                      type='submit'\n                      className='btn btn-add-new mb-5 text-white th-11 d-flex align-items-center'\n                    >\n                      {isSubmitting && (\n                        <span className='spinner-border spinner-border-sm mr-2' />\n                      )}\n                      Save\n                    </button>\n                  </div>\n                </form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </Modal>\n    )\n  }\n\n  handleSubmit = async (values, action) => {\n    const { setSubmitting } = action\n    const {\n      currentParty,\n      transaction,\n      toggleMemberModal,\n      fetchData\n    } = this.props\n\n    try {\n      setSubmitting(true)\n      await transactionService.createFileDocument({\n        file: this.state.file[0],\n        title: values.title,\n        role: currentParty.role,\n        creatorId: currentParty.id,\n        partyId: currentParty.id,\n        transactionId: transaction.id\n      })\n\n      toggleMemberModal()\n      fetchData()\n      toastr.success('Success')\n    } catch (e) {\n      toastr.error(e.message)\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  _fileTooLarge = () => {\n    this.setState({ file: 'large' })\n  }\n\n  _validate = (file, title) => {\n    const errors = {}\n    errors.title = 'Title document is required'\n    errors.file = 'File is required'\n    errors.size = `Only allows file size smaller than ${MEGABYTE} megabytes`\n    errors.type = `Only allows file type is ${TYPE}`\n\n    if (!file) {\n      if (title !== '') {\n        return errors.file\n      }\n    } else if (file === 'large') {\n      return errors.size\n    } else if (!file[0]) {\n      return errors.type\n    } else {\n      if (title === '') {\n        return errors.title\n      }\n    }\n\n    return null\n  }\n}\nexport default UploadNewDocumentModal\n"]},"metadata":{},"sourceType":"module"}