{"ast":null,"code":"import ValidationError, { ErrorCode as ValidationErrorCode } from '../errors/ValidationError';\nimport { Constraint } from '../../common/models/User';\nimport { validate } from './BaseValidator';\nvar Spec = {\n  email: {\n    presence: {\n      message: \"^\".concat(ValidationErrorCode.REQUIRED),\n      allowEmpty: false\n    },\n    email: {\n      message: \"^\".concat(ValidationErrorCode.INVALID_EMAIL)\n    },\n    length: {\n      maximum: Constraint.email.MAX_LENGTH,\n      message: \"^\".concat(ValidationErrorCode.INVALID_LENGTH)\n    }\n  },\n  password: {\n    presence: {\n      message: \"^\".concat(ValidationErrorCode.REQUIRED),\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.password.MIN_LENGTH,\n      maximum: Constraint.password.MAX_LENGTH,\n      message: \"^\".concat(ValidationErrorCode.INVALID_LENGTH)\n    }\n  },\n  firstName: {\n    presence: {\n      message: \"^\".concat(ValidationErrorCode.REQUIRED),\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.name.MIN_LENGTH,\n      maximum: Constraint.name.MAX_LENGTH,\n      message: \"^\".concat(ValidationErrorCode.INVALID_LENGTH)\n    }\n  },\n  lastName: {\n    presence: {\n      message: \"^\".concat(ValidationErrorCode.REQUIRED),\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.name.MIN_LENGTH,\n      maximum: Constraint.name.MAX_LENGTH,\n      message: \"^\".concat(ValidationErrorCode.INVALID_LENGTH)\n    }\n  }\n};\nexport function validateUser(userData) {\n  validate(userData, Spec);\n}\nexport function validateAvatarUpload(file) {\n  var errorCodes = [];\n\n  if (!Constraint.avatar.ALLOWED_FILE_TYPES.includes(file.type)) {\n    errorCodes.push(ValidationErrorCode.INVALID_FILE_TYPE);\n  }\n\n  if (file.size > Constraint.avatar.MAX_FILE_SIZE) {\n    errorCodes.push(ValidationErrorCode.INVALID_FILE_SIZE);\n  }\n\n  if (errorCodes.length) {\n    throw new ValidationError(errorCodes);\n  }\n}","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/validators/UserValidator.js"],"names":["ValidationError","ErrorCode","ValidationErrorCode","Constraint","validate","Spec","email","presence","message","REQUIRED","allowEmpty","INVALID_EMAIL","length","maximum","MAX_LENGTH","INVALID_LENGTH","password","minimum","MIN_LENGTH","firstName","name","lastName","validateUser","userData","validateAvatarUpload","file","errorCodes","avatar","ALLOWED_FILE_TYPES","includes","type","push","INVALID_FILE_TYPE","size","MAX_FILE_SIZE","INVALID_FILE_SIZE"],"mappings":"AAAA,OAAOA,eAAP,IACEC,SAAS,IAAIC,mBADf,QAEO,2BAFP;AAGA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,aAAMN,mBAAmB,CAACO,QAA1B,CADC;AAERC,MAAAA,UAAU,EAAE;AAFJ,KADL;AAKLJ,IAAAA,KAAK,EAAE;AAAEE,MAAAA,OAAO,aAAMN,mBAAmB,CAACS,aAA1B;AAAT,KALF;AAMLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAEV,UAAU,CAACG,KAAX,CAAiBQ,UADpB;AAENN,MAAAA,OAAO,aAAMN,mBAAmB,CAACa,cAA1B;AAFD;AANH,GADI;AAYXC,EAAAA,QAAQ,EAAE;AACRT,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,aAAMN,mBAAmB,CAACO,QAA1B,CADC;AAERC,MAAAA,UAAU,EAAE;AAFJ,KADF;AAKRE,IAAAA,MAAM,EAAE;AACNK,MAAAA,OAAO,EAAEd,UAAU,CAACa,QAAX,CAAoBE,UADvB;AAENL,MAAAA,OAAO,EAAEV,UAAU,CAACa,QAAX,CAAoBF,UAFvB;AAGNN,MAAAA,OAAO,aAAMN,mBAAmB,CAACa,cAA1B;AAHD;AALA,GAZC;AAuBXI,EAAAA,SAAS,EAAE;AACTZ,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,aAAMN,mBAAmB,CAACO,QAA1B,CADC;AAERC,MAAAA,UAAU,EAAE;AAFJ,KADD;AAKTE,IAAAA,MAAM,EAAE;AACNK,MAAAA,OAAO,EAAEd,UAAU,CAACiB,IAAX,CAAgBF,UADnB;AAENL,MAAAA,OAAO,EAAEV,UAAU,CAACiB,IAAX,CAAgBN,UAFnB;AAGNN,MAAAA,OAAO,aAAMN,mBAAmB,CAACa,cAA1B;AAHD;AALC,GAvBA;AAkCXM,EAAAA,QAAQ,EAAE;AACRd,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,aAAMN,mBAAmB,CAACO,QAA1B,CADC;AAERC,MAAAA,UAAU,EAAE;AAFJ,KADF;AAKRE,IAAAA,MAAM,EAAE;AACNK,MAAAA,OAAO,EAAEd,UAAU,CAACiB,IAAX,CAAgBF,UADnB;AAENL,MAAAA,OAAO,EAAEV,UAAU,CAACiB,IAAX,CAAgBN,UAFnB;AAGNN,MAAAA,OAAO,aAAMN,mBAAmB,CAACa,cAA1B;AAHD;AALA;AAlCC,CAAb;AA+CA,OAAO,SAASO,YAAT,CAAuBC,QAAvB,EAAiC;AACtCnB,EAAAA,QAAQ,CAACmB,QAAD,EAAWlB,IAAX,CAAR;AACD;AAED,OAAO,SAASmB,oBAAT,CAA+BC,IAA/B,EAAqC;AAC1C,MAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAI,CAACvB,UAAU,CAACwB,MAAX,CAAkBC,kBAAlB,CAAqCC,QAArC,CAA8CJ,IAAI,CAACK,IAAnD,CAAL,EAA+D;AAC7DJ,IAAAA,UAAU,CAACK,IAAX,CAAgB7B,mBAAmB,CAAC8B,iBAApC;AACD;;AAED,MAAIP,IAAI,CAACQ,IAAL,GAAY9B,UAAU,CAACwB,MAAX,CAAkBO,aAAlC,EAAiD;AAC/CR,IAAAA,UAAU,CAACK,IAAX,CAAgB7B,mBAAmB,CAACiC,iBAApC;AACD;;AAED,MAAIT,UAAU,CAACd,MAAf,EAAuB;AACrB,UAAM,IAAIZ,eAAJ,CAAoB0B,UAApB,CAAN;AACD;AACF","sourcesContent":["import ValidationError, {\n  ErrorCode as ValidationErrorCode\n} from '../errors/ValidationError'\nimport { Constraint } from '../../common/models/User'\nimport { validate } from './BaseValidator'\n\nconst Spec = {\n  email: {\n    presence: {\n      message: `^${ValidationErrorCode.REQUIRED}`,\n      allowEmpty: false\n    },\n    email: { message: `^${ValidationErrorCode.INVALID_EMAIL}` },\n    length: {\n      maximum: Constraint.email.MAX_LENGTH,\n      message: `^${ValidationErrorCode.INVALID_LENGTH}`\n    }\n  },\n  password: {\n    presence: {\n      message: `^${ValidationErrorCode.REQUIRED}`,\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.password.MIN_LENGTH,\n      maximum: Constraint.password.MAX_LENGTH,\n      message: `^${ValidationErrorCode.INVALID_LENGTH}`\n    }\n  },\n  firstName: {\n    presence: {\n      message: `^${ValidationErrorCode.REQUIRED}`,\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.name.MIN_LENGTH,\n      maximum: Constraint.name.MAX_LENGTH,\n      message: `^${ValidationErrorCode.INVALID_LENGTH}`\n    }\n  },\n  lastName: {\n    presence: {\n      message: `^${ValidationErrorCode.REQUIRED}`,\n      allowEmpty: false\n    },\n    length: {\n      minimum: Constraint.name.MIN_LENGTH,\n      maximum: Constraint.name.MAX_LENGTH,\n      message: `^${ValidationErrorCode.INVALID_LENGTH}`\n    }\n  }\n}\n\nexport function validateUser (userData) {\n  validate(userData, Spec)\n}\n\nexport function validateAvatarUpload (file) {\n  const errorCodes = []\n\n  if (!Constraint.avatar.ALLOWED_FILE_TYPES.includes(file.type)) {\n    errorCodes.push(ValidationErrorCode.INVALID_FILE_TYPE)\n  }\n\n  if (file.size > Constraint.avatar.MAX_FILE_SIZE) {\n    errorCodes.push(ValidationErrorCode.INVALID_FILE_SIZE)\n  }\n\n  if (errorCodes.length) {\n    throw new ValidationError(errorCodes)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}