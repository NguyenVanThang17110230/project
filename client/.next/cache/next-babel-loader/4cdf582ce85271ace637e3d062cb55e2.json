{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport { commissionType } from '../../common/models/CashBalance'; // import { commissionType } from '../../common/models/CashBalance'\n\nvar UserCommissionGateway =\n/*#__PURE__*/\nfunction () {\n  function UserCommissionGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, UserCommissionGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(UserCommissionGateway, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restConnector.post(\"/userCommissions\", data);\n\n              case 2:\n                resp = _context.sent;\n                return _context.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"updateByTransactionIdUserId\",\n    value: function () {\n      var _updateByTransactionIdUserId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(transactionId, userId, data) {\n        var filterOption, _ref2, original, resp;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                filterOption = {\n                  where: {\n                    transactionId: transactionId,\n                    userId: userId\n                  }\n                };\n                _context2.next = 3;\n                return this.restConnector.get(\"/userCommissions?filter=\".concat(_JSON$stringify(filterOption)));\n\n              case 3:\n                _ref2 = _context2.sent;\n                original = _ref2.data;\n\n                if (!original[0]) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 8;\n                return this.restConnector.patch(\"/userCommissions/\".concat(original[0].id), data);\n\n              case 8:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", resp.data);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateByTransactionIdUserId(_x2, _x3, _x4) {\n        return _updateByTransactionIdUserId.apply(this, arguments);\n      }\n\n      return updateByTransactionIdUserId;\n    }()\n  }, {\n    key: \"deleteById\",\n    value: function () {\n      var _deleteById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.restConnector[\"delete\"](\"/userCommissions/\".concat(id));\n\n              case 2:\n                _ref3 = _context3.sent;\n                data = _ref3.data;\n                return _context3.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteById(_x5) {\n        return _deleteById.apply(this, arguments);\n      }\n\n      return deleteById;\n    }()\n  }, {\n    key: \"getAllAgentCommission\",\n    value: function () {\n      var _getAllAgentCommission = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var filter, resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                filter = {\n                  include: ['transaction', 'user']\n                };\n                _context4.next = 3;\n                return this.restConnector.get(\"/userCommissions?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                resp = _context4.sent;\n                return _context4.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAllAgentCommission() {\n        return _getAllAgentCommission.apply(this, arguments);\n      }\n\n      return getAllAgentCommission;\n    }()\n  }, {\n    key: \"getAllCommission\",\n    value: function () {\n      var _getAllCommission = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.restConnector.get(\"/userCommissions\");\n\n              case 2:\n                resp = _context5.sent;\n                return _context5.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAllCommission() {\n        return _getAllCommission.apply(this, arguments);\n      }\n\n      return getAllCommission;\n    }()\n  }, {\n    key: \"countCommission\",\n    value: function () {\n      var _countCommission = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref4) {\n        var userId, type, isForThisYear, currentYear, filter, resp;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                userId = _ref4.userId, type = _ref4.type, isForThisYear = _ref4.isForThisYear;\n                currentYear = new Date().getFullYear();\n                filter = isForThisYear ? {\n                  userId: userId,\n                  cashType: type,\n                  and: [{\n                    updatedAt: {\n                      lte: new Date(currentYear, 11, 31)\n                    }\n                  }, {\n                    updatedAt: {\n                      gte: new Date(currentYear, 0, 1)\n                    }\n                  }]\n                } : {\n                  userId: userId,\n                  cashType: type\n                };\n                _context6.next = 5;\n                return this.restConnector.get(\"/userCommissions/count?where=\".concat(_JSON$stringify(filter)));\n\n              case 5:\n                resp = _context6.sent;\n                return _context6.abrupt(\"return\", resp.data);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function countCommission(_x6) {\n        return _countCommission.apply(this, arguments);\n      }\n\n      return countCommission;\n    }()\n  }, {\n    key: \"countCommissionPrevYear\",\n    value: function () {\n      var _countCommissionPrevYear = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(_ref5) {\n        var userId, type, currentYear, preYear, filter, resp;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                userId = _ref5.userId, type = _ref5.type;\n                currentYear = new Date().getFullYear();\n                preYear = currentYear - 1;\n                filter = {\n                  userId: userId,\n                  cashType: type,\n                  and: [{\n                    updatedAt: {\n                      lte: new Date(preYear, 11, 31)\n                    }\n                  }, {\n                    updatedAt: {\n                      gte: new Date(preYear, 0, 1)\n                    }\n                  }]\n                };\n                _context7.next = 6;\n                return this.restConnector.get(\"/userCommissions/count?where=\".concat(_JSON$stringify(filter)));\n\n              case 6:\n                resp = _context7.sent;\n                return _context7.abrupt(\"return\", resp.data);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function countCommissionPrevYear(_x7) {\n        return _countCommissionPrevYear.apply(this, arguments);\n      }\n\n      return countCommissionPrevYear;\n    }()\n  }, {\n    key: \"getUserCommissionThisYear\",\n    value: function () {\n      var _getUserCommissionThisYear = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(userId) {\n        var currentYear, filter, resp;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                currentYear = new Date().getFullYear();\n                filter = {\n                  where: {\n                    userId: userId,\n                    and: [{\n                      updatedAt: {\n                        lte: new Date(currentYear, 11, 31)\n                      }\n                    }, {\n                      updatedAt: {\n                        gte: new Date(currentYear, 0, 1)\n                      }\n                    }]\n                  }\n                };\n                _context8.next = 4;\n                return this.restConnector.get(\"userCommissions?filter=\".concat(_JSON$stringify(filter)));\n\n              case 4:\n                resp = _context8.sent;\n                return _context8.abrupt(\"return\", resp.data);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getUserCommissionThisYear(_x8) {\n        return _getUserCommissionThisYear.apply(this, arguments);\n      }\n\n      return getUserCommissionThisYear;\n    }()\n  }, {\n    key: \"getCommissionByTransaction\",\n    value: function () {\n      var _getCommissionByTransaction = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(transactionId) {\n        var filter, resp;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                filter = {\n                  where: {\n                    transactionId: transactionId,\n                    cashType: commissionType.AGENT_COMMISSION\n                  }\n                };\n                _context9.next = 3;\n                return this.restConnector.get(\"userCommissions?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                resp = _context9.sent;\n                return _context9.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getCommissionByTransaction(_x9) {\n        return _getCommissionByTransaction.apply(this, arguments);\n      }\n\n      return getCommissionByTransaction;\n    }()\n  }]);\n\n  return UserCommissionGateway;\n}();\n\nexport { UserCommissionGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/UserCommissionGateway.js"],"names":["commissionType","UserCommissionGateway","restConnector","data","post","resp","transactionId","userId","filterOption","where","get","original","patch","id","filter","include","type","isForThisYear","currentYear","Date","getFullYear","cashType","and","updatedAt","lte","gte","preYear","AGENT_COMMISSION"],"mappings":"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","sourcesContent":["import { commissionType } from '../../common/models/CashBalance'\n\n// import { commissionType } from '../../common/models/CashBalance'\nexport default class UserCommissionGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async create (data: {\n    cashType: string,\n    value: number,\n    userId: string,\n    transactionId: string,\n    ratio: number\n  }) {\n    const resp = await this.restConnector.post(`/userCommissions`, data)\n    return resp.data\n  }\n\n  async updateByTransactionIdUserId (transactionId, userId, data) {\n    const filterOption = { where: { transactionId, userId } }\n    const { data: original } = await this.restConnector.get(\n      `/userCommissions?filter=${JSON.stringify(filterOption)}`\n    )\n\n    if (original[0]) {\n      const resp = await this.restConnector.patch(\n        `/userCommissions/${original[0].id}`,\n        data\n      )\n      return resp.data\n    }\n  }\n\n  async deleteById (id) {\n    const { data } = await this.restConnector.delete(`/userCommissions/${id}`)\n    return data\n  }\n\n  async getAllAgentCommission () {\n    const filter = {\n      include: ['transaction', 'user']\n    }\n    const resp = await this.restConnector.get(\n      `/userCommissions?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n  async getAllCommission () {\n    const resp = await this.restConnector.get(`/userCommissions`)\n    return resp.data\n  }\n\n  async countCommission ({ userId, type, isForThisYear }) {\n    const currentYear = new Date().getFullYear()\n    const filter = isForThisYear\n      ? {\n        userId,\n        cashType: type,\n        and: [\n          {\n            updatedAt: {\n              lte: new Date(currentYear, 11, 31)\n            }\n          },\n          {\n            updatedAt: {\n              gte: new Date(currentYear, 0, 1)\n            }\n          }\n        ]\n      }\n      : {\n        userId,\n        cashType: type\n      }\n    const resp = await this.restConnector.get(\n      `/userCommissions/count?where=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n\n  async countCommissionPrevYear ({ userId, type }) {\n    const currentYear = new Date().getFullYear()\n    let preYear = currentYear - 1\n    const filter = {\n      userId,\n      cashType: type,\n      and: [\n        {\n          updatedAt: {\n            lte: new Date(preYear, 11, 31)\n          }\n        },\n        {\n          updatedAt: {\n            gte: new Date(preYear, 0, 1)\n          }\n        }\n      ]\n    }\n    const resp = await this.restConnector.get(\n      `/userCommissions/count?where=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n\n  async getUserCommissionThisYear (userId) {\n    const currentYear = new Date().getFullYear()\n    const filter = {\n      where: {\n        userId,\n        and: [\n          {\n            updatedAt: {\n              lte: new Date(currentYear, 11, 31)\n            }\n          },\n          {\n            updatedAt: {\n              gte: new Date(currentYear, 0, 1)\n            }\n          }\n        ]\n      }\n    }\n    const resp = await this.restConnector.get(\n      `userCommissions?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n\n  async getCommissionByTransaction (transactionId) {\n    const filter = {\n      where: {\n        transactionId,\n        cashType: commissionType.AGENT_COMMISSION\n      }\n    }\n    const resp = await this.restConnector.get(\n      `userCommissions?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}