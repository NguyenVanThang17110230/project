{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _ from 'lodash';\nimport { IUserGateway } from '../services/UserService';\nimport ValidationError, { ErrorCode } from '../errors/ValidationError';\n\nvar UserGateway =\n/*#__PURE__*/\nfunction () {\n  function UserGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, UserGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(UserGateway, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var resp, errResp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.restConnector.post(\"/users\", data);\n\n              case 3:\n                resp = _context.sent;\n                return _context.abrupt(\"return\", resp.data);\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                errResp = _.get(_context.t0, 'response.data.error', _context.t0);\n                _context.t1 = errResp.name;\n                _context.next = _context.t1 === 'ValidationError' ? 13 : 15;\n                break;\n\n              case 13:\n                if (!(_.get(errResp, 'details.codes.email[0]') === 'uniqueness')) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new ValidationError({\n                  email: [ErrorCode.EMAIL_EXISTED]\n                });\n\n              case 15:\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var where, skip, limit, order, include, filter, url, resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                where = _ref2.where, skip = _ref2.skip, limit = _ref2.limit, order = _ref2.order, include = _ref2.include;\n                filter = {\n                  where: where,\n                  skip: skip,\n                  limit: limit,\n                  order: order,\n                  include: include\n                };\n                url = \"/users?filter=\".concat(_JSON$stringify(filter));\n                _context2.next = 5;\n                return this.restConnector.get(url);\n\n              case 5:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", resp.data);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function find(_x2) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.restConnector.get(\"/users/\".concat(id, \"?filter={\\\"include\\\":\\\"roles\\\"}\"));\n\n              case 2:\n                resp = _context3.sent;\n                return _context3.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findById(_x3) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }()\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var where,\n            resp,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                where = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n                _context4.next = 3;\n                return this.restConnector.get(\"/users/count?where=\".concat(_JSON$stringify(where)));\n\n              case 3:\n                resp = _context4.sent;\n                return _context4.abrupt(\"return\", resp.data.count);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function count() {\n        return _count.apply(this, arguments);\n      }\n\n      return count;\n    }()\n  }, {\n    key: \"updateUserAvatarById\",\n    value: function () {\n      var _updateUserAvatarById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(userId, file) {\n        var bodyFormData;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                bodyFormData = new FormData();\n                bodyFormData.append('file', file);\n                return _context5.abrupt(\"return\", this.restConnector({\n                  url: \"/users/\".concat(userId, \"/update-avatar\"),\n                  method: 'patch',\n                  data: bodyFormData,\n                  config: {\n                    headers: {\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }\n                }).then(function (resp) {\n                  return resp.data;\n                }));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function updateUserAvatarById(_x4, _x5) {\n        return _updateUserAvatarById.apply(this, arguments);\n      }\n\n      return updateUserAvatarById;\n    }()\n  }, {\n    key: \"updateById\",\n    value: function () {\n      var _updateById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(id, _ref3) {\n        var firstName, lastName, email, emailVerified, isInactive, cash, rank, resp, errResp;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                firstName = _ref3.firstName, lastName = _ref3.lastName, email = _ref3.email, emailVerified = _ref3.emailVerified, isInactive = _ref3.isInactive, cash = _ref3.cash, rank = _ref3.rank;\n                _context6.prev = 1;\n                _context6.next = 4;\n                return this.restConnector.patch(\"/users/\".concat(id), {\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  emailVerified: emailVerified,\n                  isInactive: isInactive,\n                  cash: cash,\n                  rank: rank\n                });\n\n              case 4:\n                resp = _context6.sent;\n                return _context6.abrupt(\"return\", resp.data);\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](1);\n                errResp = _.get(_context6.t0, 'response.data.error', _context6.t0);\n                _context6.t1 = errResp.name;\n                _context6.next = _context6.t1 === 'ValidationError' ? 14 : 16;\n                break;\n\n              case 14:\n                if (!(_.get(errResp, 'details.codes.email[0]') === 'uniqueness')) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                throw new ValidationError({\n                  email: [ErrorCode.EMAIL_EXISTED]\n                });\n\n              case 16:\n                throw _context6.t0;\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 8]]);\n      }));\n\n      function updateById(_x6, _x7) {\n        return _updateById.apply(this, arguments);\n      }\n\n      return updateById;\n    }()\n  }, {\n    key: \"updateInfoById\",\n    value: function () {\n      var _updateInfoById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(id, _ref4) {\n        var firstName, lastName, dateOfBirth, gender, company, phone, location, bio, resp;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                firstName = _ref4.firstName, lastName = _ref4.lastName, dateOfBirth = _ref4.dateOfBirth, gender = _ref4.gender, company = _ref4.company, phone = _ref4.phone, location = _ref4.location, bio = _ref4.bio;\n                _context7.next = 3;\n                return this.restConnector.patch(\"/users/\".concat(id), {\n                  firstName: firstName,\n                  lastName: lastName,\n                  dateOfBirth: dateOfBirth,\n                  gender: gender,\n                  company: company,\n                  phone: phone,\n                  location: location,\n                  bio: bio\n                });\n\n              case 3:\n                resp = _context7.sent;\n                return _context7.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function updateInfoById(_x8, _x9) {\n        return _updateInfoById.apply(this, arguments);\n      }\n\n      return updateInfoById;\n    }()\n  }, {\n    key: \"uploadCoverImage\",\n    value: function () {\n      var _uploadCoverImage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(id, file) {\n        var bodyFormData;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                bodyFormData = new FormData();\n                bodyFormData.append('file', file);\n                return _context8.abrupt(\"return\", this.restConnector({\n                  url: \"/users/\".concat(id, \"/upload-cover-image\"),\n                  method: 'patch',\n                  data: bodyFormData,\n                  config: {\n                    Headers: {\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }\n                }).then(function (resp) {\n                  return resp.data;\n                }));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function uploadCoverImage(_x10, _x11) {\n        return _uploadCoverImage.apply(this, arguments);\n      }\n\n      return uploadCoverImage;\n    }()\n  }, {\n    key: \"updateRankandCash\",\n    value: function () {\n      var _updateRankandCash = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(id, _ref5) {\n        var rank, cash, resp;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                rank = _ref5.rank, cash = _ref5.cash;\n                _context9.prev = 1;\n                _context9.next = 4;\n                return this.restConnector.patch(\"/users/\".concat(id), {\n                  rank: rank,\n                  cash: cash\n                });\n\n              case 4:\n                resp = _context9.sent;\n                return _context9.abrupt(\"return\", resp.data);\n\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](1);\n                console.error(_context9.t0);\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[1, 8]]);\n      }));\n\n      function updateRankandCash(_x12, _x13) {\n        return _updateRankandCash.apply(this, arguments);\n      }\n\n      return updateRankandCash;\n    }()\n  }, {\n    key: \"updateStatusNotification\",\n    value: function () {\n      var _updateStatusNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(id, _ref6) {\n        var statusNotification, resp;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                statusNotification = _ref6.statusNotification;\n                _context10.prev = 1;\n                _context10.next = 4;\n                return this.restConnector.patch(\"/users/\".concat(id), {\n                  statusNotification: statusNotification\n                });\n\n              case 4:\n                resp = _context10.sent;\n                return _context10.abrupt(\"return\", resp.data);\n\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](1);\n                console.error(_context10.t0);\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[1, 8]]);\n      }));\n\n      function updateStatusNotification(_x14, _x15) {\n        return _updateStatusNotification.apply(this, arguments);\n      }\n\n      return updateStatusNotification;\n    }()\n  }, {\n    key: \"deleteById\",\n    value: function () {\n      var _deleteById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(id) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.restConnector[\"delete\"](\"/users/\".concat(id));\n\n              case 2:\n                resp = _context11.sent;\n                return _context11.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function deleteById(_x16) {\n        return _deleteById.apply(this, arguments);\n      }\n\n      return deleteById;\n    }()\n  }, {\n    key: \"deleteAllRoles\",\n    value: function () {\n      var _deleteAllRoles = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(id) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.restConnector[\"delete\"](\"/users/\".concat(id, \"/roles\"));\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function deleteAllRoles(_x17) {\n        return _deleteAllRoles.apply(this, arguments);\n      }\n\n      return deleteAllRoles;\n    }()\n  }, {\n    key: \"getMyMessagingParties\",\n    value: function () {\n      var _getMyMessagingParties = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13() {\n        var _ref7, data;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.restConnector.get(\"/users/me/my-messaging-parties\");\n\n              case 2:\n                _ref7 = _context13.sent;\n                data = _ref7.data;\n                return _context13.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMyMessagingParties() {\n        return _getMyMessagingParties.apply(this, arguments);\n      }\n\n      return getMyMessagingParties;\n    }()\n  }, {\n    key: \"getAllUser\",\n    value: function () {\n      var _getAllUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.restConnector.get(\"/users\");\n\n              case 2:\n                resp = _context14.sent;\n                return _context14.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getAllUser() {\n        return _getAllUser.apply(this, arguments);\n      }\n\n      return getAllUser;\n    }()\n  }, {\n    key: \"getReferrer\",\n    value: function () {\n      var _getReferrer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15(userId) {\n        var _ref8, data;\n\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.restConnector.get(\"/users/\".concat(userId, \"/get-all-referrers\"));\n\n              case 2:\n                _ref8 = _context15.sent;\n                data = _ref8.data;\n                return _context15.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getReferrer(_x18) {\n        return _getReferrer.apply(this, arguments);\n      }\n\n      return getReferrer;\n    }()\n  }, {\n    key: \"getUserRole\",\n    value: function () {\n      var _getUserRole = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16(where) {\n        var filter, resp;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                filter = {\n                  where: where,\n                  include: {\n                    relation: 'roles',\n                    scope: {\n                      fields: ['id', 'name']\n                    }\n                  }\n                };\n                _context16.next = 3;\n                return this.restConnector.get(\"/users?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                resp = _context16.sent;\n                return _context16.abrupt(\"return\", resp.data);\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getUserRole(_x19) {\n        return _getUserRole.apply(this, arguments);\n      }\n\n      return getUserRole;\n    }()\n  }, {\n    key: \"getAllContact\",\n    value: function () {\n      var _getAllContact = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee17(id) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.restConnector.get(\"/users/\".concat(id, \"/get-all-contact\"));\n\n              case 2:\n                resp = _context17.sent;\n                return _context17.abrupt(\"return\", resp);\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getAllContact(_x20) {\n        return _getAllContact.apply(this, arguments);\n      }\n\n      return getAllContact;\n    }()\n  }, {\n    key: \"findByEmail\",\n    value: function () {\n      var _findByEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee18(email) {\n        var filter, resp;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                filter = _JSON$stringify({\n                  where: {\n                    email: encodeURIComponent(email)\n                  }\n                });\n                _context18.next = 3;\n                return this.restConnector.get(\"/users?filter=\".concat(filter));\n\n              case 3:\n                resp = _context18.sent;\n                return _context18.abrupt(\"return\", resp.data[0]);\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function findByEmail(_x21) {\n        return _findByEmail.apply(this, arguments);\n      }\n\n      return findByEmail;\n    }()\n  }, {\n    key: \"getTransactionInfo\",\n    value: function () {\n      var _getTransactionInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee19(_ref9) {\n        var userId, where, skip, order, limit, filter, resp;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                userId = _ref9.userId, where = _ref9.where, skip = _ref9.skip, order = _ref9.order, limit = _ref9.limit;\n                filter = {\n                  where: where,\n                  skip: skip,\n                  order: order,\n                  limit: limit\n                };\n                _context19.next = 4;\n                return this.restConnector.get(\"/users/\".concat(userId, \"/get-agent-transactions?filter=\").concat(_JSON$stringify(filter)));\n\n              case 4:\n                resp = _context19.sent;\n                return _context19.abrupt(\"return\", resp.data.transactions);\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getTransactionInfo(_x22) {\n        return _getTransactionInfo.apply(this, arguments);\n      }\n\n      return getTransactionInfo;\n    }() // test\n\n  }, {\n    key: \"getByUserId\",\n    value: function () {\n      var _getByUserId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee20(id) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.restConnector.get(\"/users?filter={\\\"where\\\":{\\n        \\\"id\\\": \\\"\".concat(id, \"\\\"}\\n      }\"));\n\n              case 2:\n                resp = _context20.sent;\n                return _context20.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getByUserId(_x23) {\n        return _getByUserId.apply(this, arguments);\n      }\n\n      return getByUserId;\n    }()\n  }]);\n\n  return UserGateway;\n}();\n\nexport { UserGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/UserGateway.js"],"names":["_","IUserGateway","ValidationError","ErrorCode","UserGateway","restConnector","data","post","resp","errResp","get","name","email","EMAIL_EXISTED","where","skip","limit","order","include","filter","url","id","count","userId","file","bodyFormData","FormData","append","method","config","headers","then","firstName","lastName","emailVerified","isInactive","cash","rank","patch","dateOfBirth","gender","company","phone","location","bio","Headers","console","error","statusNotification","relation","scope","fields","encodeURIComponent","transactions"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { IUserGateway } from '../services/UserService'\nimport ValidationError, { ErrorCode } from '../errors/ValidationError'\n\nexport default class UserGateway implements IUserGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async create (data: {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n    isInactive: boolean,\n    rank: string,\n    cash: number\n  }) {\n    try {\n      const resp = await this.restConnector.post(`/users`, data)\n      return resp.data\n    } catch (e) {\n      const errResp = _.get(e, 'response.data.error', e)\n      switch (errResp.name) {\n        case 'ValidationError': {\n          if (_.get(errResp, 'details.codes.email[0]') === 'uniqueness') {\n            throw new ValidationError({ email: [ErrorCode.EMAIL_EXISTED] })\n          }\n        }\n      }\n      throw e\n    }\n  }\n\n  async find ({ where, skip, limit, order, include }) {\n    const filter = { where, skip, limit, order, include }\n    const url = `/users?filter=${JSON.stringify(filter)}`\n    const resp = await this.restConnector.get(url)\n    return resp.data\n  }\n\n  async findById (id) {\n    const resp = await this.restConnector.get(\n      `/users/${id}?filter={\"include\":\"roles\"}`\n    )\n    return resp.data\n  }\n\n  async count (where = {}) {\n    const resp = await this.restConnector.get(\n      `/users/count?where=${JSON.stringify(where)}`\n    )\n    return resp.data.count\n  }\n\n  async updateUserAvatarById (userId, file) {\n    const bodyFormData = new FormData()\n    bodyFormData.append('file', file)\n    return this.restConnector({\n      url: `/users/${userId}/update-avatar`,\n      method: 'patch',\n      data: bodyFormData,\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\n    }).then(resp => resp.data)\n  }\n\n  async updateById (\n    id,\n    { firstName, lastName, email, emailVerified, isInactive, cash, rank }\n  ) {\n    try {\n      const resp = await this.restConnector.patch(`/users/${id}`, {\n        firstName,\n        lastName,\n        email,\n        emailVerified,\n        isInactive,\n        cash,\n        rank\n      })\n      return resp.data\n    } catch (e) {\n      const errResp = _.get(e, 'response.data.error', e)\n      switch (errResp.name) {\n        case 'ValidationError': {\n          if (_.get(errResp, 'details.codes.email[0]') === 'uniqueness') {\n            throw new ValidationError({ email: [ErrorCode.EMAIL_EXISTED] })\n          }\n        }\n      }\n      throw e\n    }\n  }\n  async updateInfoById (\n    id,\n    { firstName, lastName, dateOfBirth, gender, company, phone, location, bio }\n  ) {\n    const resp = await this.restConnector.patch(`/users/${id}`, {\n      firstName,\n      lastName,\n      dateOfBirth,\n      gender,\n      company,\n      phone,\n      location,\n      bio\n    })\n    return resp.data\n  }\n\n  async uploadCoverImage (id, file) {\n    const bodyFormData = new FormData()\n    bodyFormData.append('file', file)\n    return this.restConnector({\n      url: `/users/${id}/upload-cover-image`,\n      method: 'patch',\n      data: bodyFormData,\n      config: { Headers: { 'Content-Type': 'multipart/form-data' } }\n    }).then(resp => resp.data)\n  }\n\n  async updateRankandCash (id, { rank, cash }) {\n    try {\n      const resp = await this.restConnector.patch(`/users/${id}`, {\n        rank,\n        cash\n      })\n      return resp.data\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  async updateStatusNotification (id, { statusNotification }) {\n    try {\n      const resp = await this.restConnector.patch(`/users/${id}`, {\n        statusNotification\n      })\n      return resp.data\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  async deleteById (id) {\n    const resp = await this.restConnector.delete(`/users/${id}`)\n    return resp.data\n  }\n\n  async deleteAllRoles (id) {\n    await this.restConnector.delete(`/users/${id}/roles`)\n  }\n\n  async getMyMessagingParties () {\n    const { data } = await this.restConnector.get(\n      `/users/me/my-messaging-parties`\n    )\n    return data\n  }\n\n  async getAllUser () {\n    const resp = await this.restConnector.get(`/users`)\n    return resp.data\n  }\n\n  async getReferrer (userId) {\n    const { data } = await this.restConnector.get(\n      `/users/${userId}/get-all-referrers`\n    )\n    return data\n  }\n\n  async getUserRole (where) {\n    const filter = {\n      where,\n      include: {\n        relation: 'roles',\n        scope: {\n          fields: ['id', 'name']\n        }\n      }\n    }\n    const resp = await this.restConnector.get(\n      `/users?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data\n  }\n\n  async getAllContact (id) {\n    const resp = await this.restConnector.get(`/users/${id}/get-all-contact`)\n    return resp\n  }\n\n  async findByEmail (email) {\n    const filter = JSON.stringify({\n      where: { email: encodeURIComponent(email) }\n    })\n    const resp = await this.restConnector.get(`/users?filter=${filter}`)\n    return resp.data[0]\n  }\n\n  async getTransactionInfo ({ userId, where, skip, order, limit }) {\n    const filter = { where, skip, order, limit }\n    const resp = await this.restConnector.get(\n      `/users/${userId}/get-agent-transactions?filter=${JSON.stringify(filter)}`\n    )\n    return resp.data.transactions\n  }\n\n  // test\n  async getByUserId (id) {\n    const resp = await this.restConnector.get(\n      `/users?filter={\"where\":{\n        \"id\": \"${id}\"}\n      }`\n    )\n    return resp.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}