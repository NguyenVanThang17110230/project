{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React from 'react';\nimport Task from './task';\nimport { Droppable } from 'react-beautiful-dnd';\nimport CreateTaskModal from './CreatTaskModal';\nimport toastr from 'toastr';\nimport { taskService } from '../../services';\nimport Role from '../../../common/models/Role';\n\nvar Column =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Column, _React$Component);\n\n  function Column(props) {\n    var _this;\n\n    _classCallCheck(this, Column);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Column).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_showCreateTaskModal\", function () {\n      _this.setState({\n        showCreateTasksModal: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_deleteTasks\", function (arrayTask) {\n      if (confirm('Are you sure you wish to delete this tasks ?')) {\n        try {\n          var _this$props = _this.props,\n              refetchData = _this$props.refetchData,\n              column = _this$props.column,\n              viewType = _this$props.viewType;\n          var promises = arrayTask.map(function (data) {\n            return taskService.deleteTaskWithId(data.id);\n          });\n\n          _Promise.all(promises).then(\n          /*#__PURE__*/\n          _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return refetchData(column.id, viewType);\n\n                  case 2:\n                    _this.setState({\n                      arayDeleteTasks: []\n                    });\n\n                    toastr.success('Success');\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })));\n        } catch (error) {\n          toastr.error(error);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_toggleModal\", function () {\n      _this.setState({\n        showCreateTasksModal: !_this.state.showCreateTasksModal\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleChange\", function (e, datatask) {\n      // Check the login permission, only the TC can delete task\n      if (_this.props.currentUser.roles[0].name !== Role.COORDINATOR) {\n        return;\n      }\n\n      _this.setState({\n        handleChange: !_this.state.handleChange\n      });\n\n      e.target.checked ? _this.state.arayDeleteTasks.push(datatask) : _this.state.arayDeleteTasks.pop(datatask);\n    });\n\n    _this.state = {\n      tasks: props.tasks,\n      showCreateTasksModal: false,\n      arayDeleteTasks: []\n    };\n    return _this;\n  }\n\n  _createClass(Column, [{\n    key: \"componentWillReceiveProps\",\n    value: function () {\n      var _componentWillReceiveProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(nextProps) {\n        var currentUser, column, isActive, tasks;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                currentUser = nextProps.currentUser, column = nextProps.column;\n                isActive = nextProps.viewType === 'Active';\n                tasks = [];\n\n                if (!isActive) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                // tasks = await taskService.getActiveTasks(currentUser.id, column.id)\n                tasks = column.data.filter(function (item) {\n                  return item.isActive !== false;\n                });\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return taskService.getArchiveTasks(currentUser.id, column.id);\n\n              case 9:\n                tasks = _context2.sent;\n\n              case 10:\n                this.setState({\n                  tasks: tasks\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillReceiveProps(_x) {\n        return _componentWillReceiveProps.apply(this, arguments);\n      }\n\n      return componentWillReceiveProps;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"col-12 col-lg-4 col-sm-4\"\n      }, React.createElement(\"div\", {\n        className: \"card\"\n      }, React.createElement(\"div\", {\n        className: \"card-body pb-2\"\n      }, React.createElement(\"div\", {\n        className: \"d-flex no-block align-items-center\"\n      }, React.createElement(\"div\", null, React.createElement(\"h4\", {\n        className: \"card-title m-b-0\"\n      }, this.props.column.title)), React.createElement(\"div\", {\n        className: \"ml-auto\"\n      }, this.props.viewType === 'Active' && React.createElement(\"button\", {\n        className: \"pull-right btn text-white button-create\",\n        \"data-toggle\": \"modal\",\n        \"data-target\": \"#myModal\",\n        onClick: function onClick() {\n          _this2._showCreateTaskModal();\n        },\n        style: {\n          transition: '0.3s'\n        }\n      }, React.createElement(\"i\", {\n        className: \"fas fa-plus text-blue\"\n      }))))), React.createElement(\"hr\", null), React.createElement(\"div\", {\n        className: \"card-body pt-2\"\n      }, React.createElement(\"div\", {\n        className: \"overflow-auto\",\n        style: {\n          height: '300px'\n        }\n      }, React.createElement(Droppable, {\n        droppableId: this.props.column.id\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.droppableProps, {\n          isDraggingOver: snapshot.isDraggingOver,\n          className: \"w-100 h-100 mb-0\"\n        }), _this2.state.tasks.map(function (task, index) {\n          return React.createElement(Task, {\n            key: task.id,\n            task: task,\n            index: index,\n            transactions: _this2.props.transactions,\n            _handleChange: _this2._handleChange,\n            status: _this2.props.column.id,\n            column: _this2.props.column,\n            viewType: _this2.props.viewType,\n            refetchData: _this2.props.refetchData\n          });\n        }), provided.placeholder);\n      })))), this.state.showCreateTasksModal && React.createElement(CreateTaskModal, {\n        transactions: this.props.transactions,\n        droppableId: this.props.column.id,\n        toggle: this._toggleModal,\n        currentUser: this.props.currentUser,\n        dataOfColum: this.props.column,\n        viewType: this.props.viewType,\n        refetchData: this.props.refetchData\n      }));\n    }\n  }]);\n\n  return Column;\n}(React.Component);\n\nexport { Column as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/Tasks/column.js"],"names":["React","Task","Droppable","CreateTaskModal","toastr","taskService","Role","Column","props","setState","showCreateTasksModal","arrayTask","confirm","refetchData","column","viewType","promises","map","data","deleteTaskWithId","id","all","then","arayDeleteTasks","success","error","state","e","datatask","currentUser","roles","name","COORDINATOR","handleChange","target","checked","push","pop","tasks","nextProps","isActive","filter","item","getArchiveTasks","title","_showCreateTaskModal","transition","height","provided","snapshot","innerRef","droppableProps","isDraggingOver","task","index","transactions","_handleChange","placeholder","_toggleModal","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Task from './task'\nimport { Droppable } from 'react-beautiful-dnd'\nimport CreateTaskModal from './CreatTaskModal'\nimport toastr from 'toastr'\nimport { taskService } from '../../services'\nimport Role from '../../../common/models/Role'\n\nexport default class Column extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      tasks: props.tasks,\n      showCreateTasksModal: false,\n      arayDeleteTasks: []\n    }\n  }\n\n  async componentWillReceiveProps (nextProps) {\n    const { currentUser, column } = nextProps\n\n    const isActive = nextProps.viewType === 'Active'\n\n    let tasks = []\n    if (isActive) {\n      // tasks = await taskService.getActiveTasks(currentUser.id, column.id)\n      tasks = column.data.filter(item => item.isActive !== false)\n    } else {\n      tasks = await taskService.getArchiveTasks(currentUser.id, column.id)\n      // tasks = column.data.filter(item => item.isActive === false)\n    }\n\n    this.setState({ tasks })\n  }\n\n  _showCreateTaskModal = () => {\n    this.setState({\n      showCreateTasksModal: true\n    })\n  }\n\n  _deleteTasks = arrayTask => {\n    if (confirm('Are you sure you wish to delete this tasks ?')) {\n      try {\n        const { refetchData, column, viewType } = this.props\n\n        const promises = arrayTask.map(data => {\n          return taskService.deleteTaskWithId(data.id)\n        })\n        Promise.all(promises).then(async () => {\n          await refetchData(column.id, viewType)\n          this.setState({ arayDeleteTasks: [] })\n          toastr.success('Success')\n        })\n      } catch (error) {\n        toastr.error(error)\n      }\n    }\n  }\n\n  render () {\n    return (\n      <div className='col-12 col-lg-4 col-sm-4'>\n        <div className='card'>\n          <div className='card-body pb-2'>\n            <div className='d-flex no-block align-items-center'>\n              <div>\n                <h4 className='card-title m-b-0'>{this.props.column.title}</h4>\n              </div>\n              <div className='ml-auto'>\n                {this.props.viewType === 'Active' && (\n                  <button\n                    className='pull-right btn text-white button-create'\n                    data-toggle='modal'\n                    data-target='#myModal'\n                    onClick={() => {\n                      this._showCreateTaskModal()\n                    }}\n                    style={{ transition: '0.3s' }}\n                  >\n                    <i className='fas fa-plus text-blue' />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div className='card-body pt-2'>\n            <div className='overflow-auto' style={{ height: '300px' }}>\n              <Droppable droppableId={this.props.column.id}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    isDraggingOver={snapshot.isDraggingOver}\n                    className='w-100 h-100 mb-0'\n                  >\n                    {this.state.tasks.map((task, index) => (\n                      <Task\n                        key={task.id}\n                        task={task}\n                        index={index}\n                        transactions={this.props.transactions}\n                        _handleChange={this._handleChange}\n                        status={this.props.column.id}\n                        column={this.props.column}\n                        viewType={this.props.viewType}\n                        refetchData={this.props.refetchData}\n                      />\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n        </div>\n        {this.state.showCreateTasksModal && (\n          <CreateTaskModal\n            transactions={this.props.transactions}\n            droppableId={this.props.column.id}\n            toggle={this._toggleModal}\n            currentUser={this.props.currentUser}\n            dataOfColum={this.props.column}\n            viewType={this.props.viewType}\n            refetchData={this.props.refetchData}\n          />\n        )}\n      </div>\n    )\n  }\n  _toggleModal = () => {\n    this.setState({\n      showCreateTasksModal: !this.state.showCreateTasksModal\n    })\n  }\n\n  _handleChange = (e, datatask) => {\n    // Check the login permission, only the TC can delete task\n    if (this.props.currentUser.roles[0].name !== Role.COORDINATOR) {\n      return\n    }\n    this.setState({\n      handleChange: !this.state.handleChange\n    })\n    e.target.checked\n      ? this.state.arayDeleteTasks.push(datatask)\n      : this.state.arayDeleteTasks.pop(datatask)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}