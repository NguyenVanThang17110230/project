{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport { Modal } from 'reactstrap';\nimport { Formik, Field } from 'formik';\nimport toastr from 'toastr';\nimport moment from 'moment';\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.css';\nimport { getRoleLabel } from '../../view-models/User';\nimport { getFullName } from '../../../common/view-models/TransactionParty';\nimport { transactionService, taskService } from '../../services';\n\nvar EditTaskModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditTaskModal, _Component);\n\n  function EditTaskModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditTaskModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditTaskModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectTransaction\", function () {\n      var transactions = _this.props.transactions;\n      return transactions.map(function (transaction, index) {\n        return !(transaction.status === 'archived') && React.createElement(\"option\", {\n          key: index,\n          value: transaction.id\n        }, transaction.address);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(values, action) {\n        var _this$state, originalTask, detailedTransaction, setSubmitting;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$state = _this.state, originalTask = _this$state.originalTask, detailedTransaction = _this$state.detailedTransaction;\n                setSubmitting = action.setSubmitting;\n                _context.prev = 2;\n                setSubmitting(true);\n                _context.next = 6;\n                return taskService.updateTaskById(originalTask.id, {\n                  taskName: values.taskName,\n                  transactionName: detailedTransaction.address || '',\n                  deadline: values.deadline,\n                  transactionId: values.transactionId,\n                  status: _this.props.dataOfColum.id,\n                  sharedUserIds: _this.state.listUserId\n                });\n\n              case 6:\n                _context.next = 8;\n                return _this.props.refetchData(_this.props.dataOfColum.id, _this.props.viewType);\n\n              case 8:\n                setSubmitting(false);\n\n                _this.props.toggle();\n\n                toastr.success('Success');\n                _context.next = 17;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n                toastr.error(_context.t0.message);\n                setSubmitting(false);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_getDetailedTransaction\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(transactionId) {\n        var detailedTransaction, checklist, i;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return transactionService.getPartiesForTransaction(transactionId);\n\n              case 2:\n                detailedTransaction = _context2.sent;\n\n                _this.setState({\n                  detailedTransaction: detailedTransaction,\n                  listUserId: []\n                });\n\n                checklist = document.getElementsByClassName('check-box-list');\n\n                if (checklist) {\n                  for (i = 0; i < checklist.length; i++) {\n                    checklist[i].checked = false;\n                  }\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateListUserId\", function (e) {\n      var newArray = _toConsumableArray(new _Set([].concat(_toConsumableArray(_this.state.listUserId), [e.target.value])));\n\n      if (e.target.checked) {\n        _this.setState({\n          listUserId: newArray\n        });\n      } else {\n        var index = _this.state.listUserId.findIndex(function (item) {\n          return item === e.target.value;\n        });\n\n        _this.state.listUserId.splice(index, 1);\n\n        _this.setState({\n          listUserId: _this.state.listUserId\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setChecked\", function (id) {\n      var initialTaskValue = _this.state.initialTaskValue;\n\n      if (initialTaskValue && initialTaskValue.sharedUserIds.length > 0) {\n        var data = initialTaskValue.sharedUserIds.find(function (x) {\n          return x === id;\n        });\n\n        if (data) {\n          return id;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderPartiesForTransaction\", function () {\n      var detailedTransaction = _this.state.detailedTransaction;\n\n      if (detailedTransaction) {\n        return _this.state.detailedTransaction.parties.map(function (party, index) {\n          return React.createElement(\"div\", {\n            key: index,\n            className: \"col-12 col-md-6\"\n          }, React.createElement(\"label\", null, React.createElement(\"input\", {\n            onChange: _this.handleChange,\n            name: \"partyId\",\n            type: \"checkbox\",\n            checked: _this._setChecked(party.userId),\n            className: \"check-box-list\",\n            value: party.userId\n          }), \"\\u2002\", React.createElement(\"small\", null, getRoleLabel(party.role)), \"\\xA0\", React.createElement(\"small\", null, \"(\", getFullName(party), \")\")));\n        });\n      }\n    });\n\n    _this.state = {\n      originalTask: null,\n      initialTaskValue: {\n        taskName: '',\n        transactionId: '',\n        sharedUserIds: '',\n        deadline: moment(new Date()).format('YYYY-MM-DDTHH:mm')\n      },\n      detailedTransaction: null,\n      listUserId: []\n    };\n    return _this;\n  }\n\n  _createClass(EditTaskModal, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var originalTask, detailedTransaction;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return taskService.getTaskById(this.props.taskId);\n\n              case 3:\n                originalTask = _context3.sent;\n                _context3.next = 6;\n                return transactionService.getPartiesForTransaction(originalTask.transactionId);\n\n              case 6:\n                detailedTransaction = _context3.sent;\n                this.setState({\n                  originalTask: originalTask,\n                  initialTaskValue: {\n                    taskName: originalTask.taskName,\n                    transactionId: originalTask.transactionId,\n                    sharedUserIds: originalTask.sharedUserIds,\n                    deadline: originalTask.deadline\n                  },\n                  detailedTransaction: detailedTransaction,\n                  listUserId: originalTask.sharedUserIds\n                });\n                _context3.next = 13;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          toggle = _this$props.toggle,\n          dataOfColum = _this$props.dataOfColum;\n      var initialTaskValue = this.state.initialTaskValue;\n      return React.createElement(Modal, {\n        isOpen: toggle,\n        toggle: toggle,\n        id: \"new-task-modal\",\n        modalTransition: {\n          timeout: 0\n        }\n      }, React.createElement(\"div\", {\n        className: \"modal-header modal-header--change\"\n      }, React.createElement(\"div\", {\n        className: \"text-center w-100\"\n      }, React.createElement(\"h5\", {\n        className: \"modal-title font-weight-bold\",\n        id: \"exampleModalLabel\"\n      }, \"Edit \".concat(dataOfColum.title, \" Task\")), React.createElement(\"small\", null, \"All tasks edited will be shared only with the parties chosen below.\"), React.createElement(\"br\", null), React.createElement(\"small\", null, \"Parties will be notified that a new task is in their tasks page.\")), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"close bg-transparent\",\n        \"data-dismiss\": \"modal\",\n        onClick: toggle\n      }, \"\\xD7\")), React.createElement(Formik, {\n        enableReinitialize: true,\n        initialValues: initialTaskValue,\n        onSubmit: this._onSubmit,\n        validate: function validate(values) {\n          var error = {};\n\n          if (values.taskName === '') {\n            error.taskName = 'Task Name is required';\n          } else if (values.transactionId === '') {\n            error.transaction = 'Transaction is required';\n          }\n\n          return error;\n        }\n      }, function (_ref3) {\n        var values = _ref3.values,\n            isValid = _ref3.isValid,\n            errors = _ref3.errors,\n            isSubmitting = _ref3.isSubmitting,\n            handleSubmit = _ref3.handleSubmit,\n            handleChange = _ref3.handleChange;\n        return React.createElement(\"form\", {\n          onSubmit: handleSubmit\n        }, React.createElement(\"div\", {\n          className: \"modal-body px-5 mx-2\"\n        }, React.createElement(\"div\", {\n          className: \"mt-4\"\n        }, React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Task Name\"), React.createElement(\"input\", {\n          className: \"form-control\",\n          placeholder: \"Task Name\",\n          name: \"taskName\",\n          onChange: handleChange,\n          value: values.taskName,\n          maxLength: \"150\"\n        }), errors.taskName && React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, errors.taskName)), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Share With\"), React.createElement(Field, {\n          component: \"select\",\n          name: \"transactionId\",\n          className: \"form-control\",\n          onChange:\n          /*#__PURE__*/\n          function () {\n            var _ref4 = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee4(e) {\n              return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      handleChange(e);\n                      _context4.next = 3;\n                      return _this2._getDetailedTransaction(e.target.value);\n\n                    case 3:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, _callee4);\n            }));\n\n            return function (_x4) {\n              return _ref4.apply(this, arguments);\n            };\n          }()\n        }, React.createElement(\"option\", {\n          selected: true,\n          hidden: true\n        }, \"Transactions\"), _this2._renderSelectTransaction()), errors.transaction && React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, errors.transaction), React.createElement(\"div\", {\n          className: \"form-group mt-3\"\n        }, React.createElement(\"div\", {\n          id: \"shared-user-id\",\n          className: \"row container m-auto\",\n          name: \"sharedUserIds\",\n          onChange: function onChange(e) {\n            handleChange(e);\n\n            _this2._updateListUserId(e);\n          },\n          value: values.sharedUserIds\n        }, _this2._renderPartiesForTransaction(handleChange)))), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Deadline\"), React.createElement(\"input\", {\n          className: \"form-control\",\n          type: \"datetime-local\",\n          defaultValue: new Date(),\n          min: new Date(),\n          name: \"deadline\",\n          onChange: handleChange,\n          value: moment(values.deadline).format('YYYY-MM-DDTHH:mm')\n        }))), React.createElement(\"div\", {\n          className: \"text-center my-5\"\n        }, React.createElement(\"button\", {\n          disabled: !isValid || isSubmitting,\n          type: \"submit\",\n          className: \"btn text-white py-2 px-5 bg-info\"\n        }, isSubmitting && React.createElement(\"span\", {\n          className: \"spinner-border spinner-border-sm mr-2\"\n        }), \"Save\"))));\n      }));\n    }\n  }]);\n\n  return EditTaskModal;\n}(Component);\n\nexport { EditTaskModal as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/Tasks/EditTaskModal.js"],"names":["React","Component","Modal","Formik","Field","toastr","moment","getRoleLabel","getFullName","transactionService","taskService","EditTaskModal","props","transactions","map","transaction","index","status","id","address","values","action","state","originalTask","detailedTransaction","setSubmitting","updateTaskById","taskName","transactionName","deadline","transactionId","dataOfColum","sharedUserIds","listUserId","refetchData","viewType","toggle","success","error","message","getPartiesForTransaction","setState","checklist","document","getElementsByClassName","i","length","checked","e","newArray","target","value","findIndex","item","splice","initialTaskValue","data","find","x","parties","party","handleChange","_setChecked","userId","role","Date","format","getTaskById","taskId","console","timeout","title","_onSubmit","isValid","errors","isSubmitting","handleSubmit","_getDetailedTransaction","_renderSelectTransaction","_updateListUserId","_renderPartiesForTransaction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Modal } from 'reactstrap'\nimport { Formik, Field } from 'formik'\nimport toastr from 'toastr'\nimport moment from 'moment'\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.css'\nimport { getRoleLabel } from '../../view-models/User'\nimport { getFullName } from '../../../common/view-models/TransactionParty'\nimport { transactionService, taskService } from '../../services'\n\nexport default class EditTaskModal extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      originalTask: null,\n      initialTaskValue: {\n        taskName: '',\n        transactionId: '',\n        sharedUserIds: '',\n        deadline: moment(new Date()).format('YYYY-MM-DDTHH:mm')\n      },\n      detailedTransaction: null,\n      listUserId: []\n    }\n  }\n\n  async componentDidMount () {\n    try {\n      const originalTask = await taskService.getTaskById(this.props.taskId)\n      const detailedTransaction = await transactionService.getPartiesForTransaction(\n        originalTask.transactionId\n      )\n      this.setState({\n        originalTask,\n        initialTaskValue: {\n          taskName: originalTask.taskName,\n          transactionId: originalTask.transactionId,\n          sharedUserIds: originalTask.sharedUserIds,\n          deadline: originalTask.deadline\n        },\n        detailedTransaction,\n        listUserId: originalTask.sharedUserIds\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  _renderSelectTransaction = () => {\n    const { transactions } = this.props\n    return transactions.map(\n      (transaction, index) =>\n        !(transaction.status === 'archived') && (\n          <option key={index} value={transaction.id}>\n            {transaction.address}\n          </option>\n        )\n    )\n  }\n\n  _onSubmit = async (values, action) => {\n    const { originalTask, detailedTransaction } = this.state\n    const { setSubmitting } = action\n\n    try {\n      setSubmitting(true)\n\n      await taskService.updateTaskById(originalTask.id, {\n        taskName: values.taskName,\n        transactionName: detailedTransaction.address || '',\n        deadline: values.deadline,\n        transactionId: values.transactionId,\n        status: this.props.dataOfColum.id,\n        sharedUserIds: this.state.listUserId\n      })\n      await this.props.refetchData(\n        this.props.dataOfColum.id,\n        this.props.viewType\n      )\n      setSubmitting(false)\n      this.props.toggle()\n      toastr.success('Success')\n    } catch (e) {\n      toastr.error(e.message)\n      setSubmitting(false)\n    }\n  }\n\n  render () {\n    const { toggle, dataOfColum } = this.props\n    const { initialTaskValue } = this.state\n    return (\n      <Modal\n        isOpen={toggle}\n        toggle={toggle}\n        id='new-task-modal'\n        modalTransition={{ timeout: 0 }}\n      >\n        <div className='modal-header modal-header--change'>\n          <div className='text-center w-100'>\n            <h5 className='modal-title font-weight-bold' id='exampleModalLabel'>\n              {`Edit ${dataOfColum.title} Task`}\n            </h5>\n            <small>\n              All tasks edited will be shared only with the parties chosen\n              below.\n            </small>\n            <br />\n            <small>\n              Parties will be notified that a new task is in their tasks page.\n            </small>\n          </div>\n          <button\n            type='button'\n            className='close bg-transparent'\n            data-dismiss='modal'\n            onClick={toggle}\n          >\n            &times;\n          </button>\n        </div>\n        <Formik\n          enableReinitialize\n          initialValues={initialTaskValue}\n          onSubmit={this._onSubmit}\n          validate={values => {\n            let error = {}\n            if (values.taskName === '') {\n              error.taskName = 'Task Name is required'\n            } else if (values.transactionId === '') {\n              error.transaction = 'Transaction is required'\n            }\n            return error\n          }}\n        >\n          {({\n            values,\n            isValid,\n            errors,\n            isSubmitting,\n            handleSubmit,\n            handleChange\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <div className='modal-body px-5 mx-2'>\n                <div className='mt-4'>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Task Name</h5>\n                    <input\n                      className='form-control'\n                      placeholder='Task Name'\n                      name='taskName'\n                      onChange={handleChange}\n                      value={values.taskName}\n                      maxLength='150'\n                    />\n\n                    {errors.taskName && (\n                      <div className='text-danger text-center'>\n                        {errors.taskName}\n                      </div>\n                    )}\n                  </div>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Share With</h5>\n                    <Field\n                      component='select'\n                      name='transactionId'\n                      className='form-control'\n                      onChange={async e => {\n                        handleChange(e)\n                        await this._getDetailedTransaction(e.target.value)\n                      }}\n                    >\n                      <option selected hidden>\n                        Transactions\n                      </option>\n                      {this._renderSelectTransaction()}\n                    </Field>\n                    {errors.transaction && (\n                      <div className='text-danger text-center'>\n                        {errors.transaction}\n                      </div>\n                    )}\n\n                    <div className='form-group mt-3'>\n                      <div\n                        id='shared-user-id'\n                        className='row container m-auto'\n                        name='sharedUserIds'\n                        onChange={e => {\n                          handleChange(e)\n                          this._updateListUserId(e)\n                        }}\n                        value={values.sharedUserIds}\n                      >\n                        {this._renderPartiesForTransaction(handleChange)}\n                      </div>\n                    </div>\n                  </div>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Deadline</h5>\n                    <input\n                      className='form-control'\n                      type='datetime-local'\n                      defaultValue={new Date()}\n                      min={new Date()}\n                      name='deadline'\n                      onChange={handleChange}\n                      value={moment(values.deadline).format('YYYY-MM-DDTHH:mm')}\n                    />\n                  </div>\n                </div>\n                <div className='text-center my-5'>\n                  <button\n                    disabled={!isValid || isSubmitting}\n                    type='submit'\n                    className='btn text-white py-2 px-5 bg-info'\n                  >\n                    {isSubmitting && (\n                      <span className='spinner-border spinner-border-sm mr-2' />\n                    )}\n                    Save\n                  </button>\n                </div>\n              </div>\n            </form>\n          )}\n        </Formik>\n      </Modal>\n    )\n  }\n\n  _getDetailedTransaction = async transactionId => {\n    const detailedTransaction = await transactionService.getPartiesForTransaction(\n      transactionId\n    )\n    this.setState({ detailedTransaction, listUserId: [] })\n    const checklist = document.getElementsByClassName('check-box-list')\n    if (checklist) {\n      for (let i = 0; i < checklist.length; i++) {\n        checklist[i].checked = false\n      }\n    }\n  }\n\n  _updateListUserId = e => {\n    let newArray = [...new Set([...this.state.listUserId, e.target.value])]\n    if (e.target.checked) {\n      this.setState({ listUserId: newArray })\n    } else {\n      const index = this.state.listUserId.findIndex(\n        item => item === e.target.value\n      )\n      this.state.listUserId.splice(index, 1)\n      this.setState({ listUserId: this.state.listUserId })\n    }\n  }\n  _setChecked = id => {\n    const { initialTaskValue } = this.state\n    if (initialTaskValue && initialTaskValue.sharedUserIds.length > 0) {\n      const data = initialTaskValue.sharedUserIds.find(x => x === id)\n      if (data) {\n        return id\n      }\n    }\n  }\n  _renderPartiesForTransaction = () => {\n    const { detailedTransaction } = this.state\n    if (detailedTransaction) {\n      return this.state.detailedTransaction.parties.map((party, index) => (\n        <div key={index} className='col-12 col-md-6'>\n          <label>\n            <input\n              onChange={this.handleChange}\n              name='partyId'\n              type='checkbox'\n              checked={this._setChecked(party.userId)}\n              className='check-box-list'\n              value={party.userId}\n            />\n            &ensp;\n            <small>{getRoleLabel(party.role)}</small>\n            &nbsp;\n            <small>({getFullName(party)})</small>\n          </label>\n        </div>\n      ))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}