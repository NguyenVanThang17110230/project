{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport { NotificationType } from '../../common/models/Notification';\nimport _ from 'lodash';\n\nvar NotificationService =\n/*#__PURE__*/\nfunction () {\n  function NotificationService(options) {\n    _classCallCheck(this, NotificationService);\n\n    this.notificationGateway = options.notificationGateway;\n  }\n\n  _createClass(NotificationService, [{\n    key: \"listenToMyNewNotifications\",\n    value: function () {\n      var _listenToMyNewNotifications = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(userId, callback) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.notificationGateway.listenToMyNewNotification(userId, callback);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function listenToMyNewNotifications(_x, _x2) {\n        return _listenToMyNewNotifications.apply(this, arguments);\n      }\n\n      return listenToMyNewNotifications;\n    }()\n  }, {\n    key: \"deleteWithIdUserAndType\",\n    value: function () {\n      var _deleteWithIdUserAndType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(userId, types) {\n        var _this = this;\n\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.notificationGateway.findNotificationWithData(userId, types);\n\n              case 2:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", data.map(function (data) {\n                  _this.notificationGateway.deleteById(data.id);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteWithIdUserAndType(_x3, _x4) {\n        return _deleteWithIdUserAndType.apply(this, arguments);\n      }\n\n      return deleteWithIdUserAndType;\n    }()\n  }, {\n    key: \"findNotificationWithData\",\n    value: function () {\n      var _findNotificationWithData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(userId, types) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.notificationGateway.findNotificationWithData(userId, types));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findNotificationWithData(_x5, _x6) {\n        return _findNotificationWithData.apply(this, arguments);\n      }\n\n      return findNotificationWithData;\n    }()\n  }, {\n    key: \"findNotificationDocumentWhithId\",\n    value: function () {\n      var _findNotificationDocumentWhithId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(userId) {\n        var actionAddToUser, uploadDocument, arrayDocument, sortNotificationDocument;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.notificationGateway.findNotificationWithData(userId, NotificationType.ACTION_ADD_TO_USER);\n\n              case 2:\n                actionAddToUser = _context4.sent;\n                _context4.next = 5;\n                return this.notificationGateway.findNotificationWithData(userId, NotificationType.UPLOAD_DOCUMENT);\n\n              case 5:\n                uploadDocument = _context4.sent;\n                arrayDocument = [].concat(_toConsumableArray(actionAddToUser), _toConsumableArray(uploadDocument));\n                sortNotificationDocument = _.orderBy(arrayDocument, ['createdAt'], ['desc']);\n                return _context4.abrupt(\"return\", sortNotificationDocument);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function findNotificationDocumentWhithId(_x7) {\n        return _findNotificationDocumentWhithId.apply(this, arguments);\n      }\n\n      return findNotificationDocumentWhithId;\n    }()\n  }, {\n    key: \"limitFindNotification\",\n    value: function () {\n      var _limitFindNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(userId, types) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.notificationGateway.limitFindNotification(userId, types));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function limitFindNotification(_x8, _x9) {\n        return _limitFindNotification.apply(this, arguments);\n      }\n\n      return limitFindNotification;\n    }()\n  }, {\n    key: \"setWatchedNotification\",\n    value: function () {\n      var _setWatchedNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(id) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.notificationGateway.setWatchedNotification(id));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setWatchedNotification(_x10) {\n        return _setWatchedNotification.apply(this, arguments);\n      }\n\n      return setWatchedNotification;\n    }()\n  }, {\n    key: \"countWithData\",\n    value: function () {\n      var _countWithData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(userId, types) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.notificationGateway.countWithData(userId, types));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function countWithData(_x11, _x12) {\n        return _countWithData.apply(this, arguments);\n      }\n\n      return countWithData;\n    }()\n  }, {\n    key: \"getAllNotificationMessage\",\n    value: function () {\n      var _getAllNotificationMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(userId) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.notificationGateway.getAllNotificationMessage(userId));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getAllNotificationMessage(_x13) {\n        return _getAllNotificationMessage.apply(this, arguments);\n      }\n\n      return getAllNotificationMessage;\n    }()\n  }, {\n    key: \"getAllNotificationNews\",\n    value: function () {\n      var _getAllNotificationNews = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(userId) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.notificationGateway.getAllNotificationNews(userId));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getAllNotificationNews(_x14) {\n        return _getAllNotificationNews.apply(this, arguments);\n      }\n\n      return getAllNotificationNews;\n    }()\n  }, {\n    key: \"getAllNotificationAssign\",\n    value: function () {\n      var _getAllNotificationAssign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(userId) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.notificationGateway.getAllNotificationAssign(userId));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getAllNotificationAssign(_x15) {\n        return _getAllNotificationAssign.apply(this, arguments);\n      }\n\n      return getAllNotificationAssign;\n    }()\n  }]);\n\n  return NotificationService;\n}();\n\nexport { NotificationService as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/services/NotificationService.js"],"names":["NotificationType","_","NotificationService","options","notificationGateway","userId","callback","listenToMyNewNotification","types","findNotificationWithData","data","map","deleteById","id","ACTION_ADD_TO_USER","actionAddToUser","UPLOAD_DOCUMENT","uploadDocument","arrayDocument","sortNotificationDocument","orderBy","limitFindNotification","setWatchedNotification","countWithData","getAllNotificationMessage","getAllNotificationNews","getAllNotificationAssign"],"mappings":";;;;;AAAA,SAASA,gBAAT,QAAiC,kCAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;;IAEqBC,mB;;;AACnB,+BAAaC,OAAb,EAAsB;AAAA;;AACpB,SAAKC,mBAAL,GAA2BD,OAAO,CAACC,mBAAnC;AACD;;;;;;;gDAEiCC,M,EAAQC,Q;;;;;AACxC,qBAAKF,mBAAL,CAAyBG,yBAAzB,CAAmDF,MAAnD,EAA2DC,QAA3D;;;;;;;;;;;;;;;;;;;;;iDAG6BD,M,EAAQG,K;;;;;;;;;uBAClB,KAAKJ,mBAAL,CAAyBK,wBAAzB,CACjBJ,MADiB,EAEjBG,KAFiB,C;;;AAAbE,gBAAAA,I;kDAICA,IAAI,CAACC,GAAL,CAAS,UAAAD,IAAI,EAAI;AACtB,kBAAA,KAAI,CAACN,mBAAL,CAAyBQ,UAAzB,CAAoCF,IAAI,CAACG,EAAzC;AACD,iBAFM,C;;;;;;;;;;;;;;;;;;;;;iDAKuBR,M,EAAQG,K;;;;;kDAC/B,KAAKJ,mBAAL,CAAyBK,wBAAzB,CAAkDJ,MAAlD,EAA0DG,KAA1D,C;;;;;;;;;;;;;;;;;;;;;iDAG8BH,M;;;;;;;uBACP,KAAKD,mBAAL,CAAyBK,wBAAzB,CAC5BJ,MAD4B,EAE5BL,gBAAgB,CAACc,kBAFW,C;;;AAAxBC,gBAAAA,e;;uBAIuB,KAAKX,mBAAL,CAAyBK,wBAAzB,CAC3BJ,MAD2B,EAE3BL,gBAAgB,CAACgB,eAFU,C;;;AAAvBC,gBAAAA,c;AAIAC,gBAAAA,a,gCAAoBH,e,sBAAoBE,c;AACxCE,gBAAAA,wB,GAA2BlB,CAAC,CAACmB,OAAF,CAC/BF,aAD+B,EAE/B,CAAC,WAAD,CAF+B,EAG/B,CAAC,MAAD,CAH+B,C;kDAK1BC,wB;;;;;;;;;;;;;;;;;;;;;iDAGoBd,M,EAAQG,K;;;;;kDAC5B,KAAKJ,mBAAL,CAAyBiB,qBAAzB,CAA+ChB,MAA/C,EAAuDG,KAAvD,C;;;;;;;;;;;;;;;;;;;;;iDAGqBK,E;;;;;kDACrB,KAAKT,mBAAL,CAAyBkB,sBAAzB,CAAgDT,EAAhD,C;;;;;;;;;;;;;;;;;;;;;iDAGYR,M,EAAQG,K;;;;;kDACpB,KAAKJ,mBAAL,CAAyBmB,aAAzB,CAAuClB,MAAvC,EAA+CG,KAA/C,C;;;;;;;;;;;;;;;;;;;;;iDAEwBH,M;;;;;kDACxB,KAAKD,mBAAL,CAAyBoB,yBAAzB,CAAmDnB,MAAnD,C;;;;;;;;;;;;;;;;;;;;;iDAEqBA,M;;;;;kDACrB,KAAKD,mBAAL,CAAyBqB,sBAAzB,CAAgDpB,MAAhD,C;;;;;;;;;;;;;;;;;;;;;kDAEuBA,M;;;;;mDACvB,KAAKD,mBAAL,CAAyBsB,wBAAzB,CAAkDrB,MAAlD,C;;;;;;;;;;;;;;;;;;;;;SA3DUH,mB","sourcesContent":["import { NotificationType } from '../../common/models/Notification'\nimport _ from 'lodash'\n\nexport default class NotificationService {\n  constructor (options) {\n    this.notificationGateway = options.notificationGateway\n  }\n\n  async listenToMyNewNotifications (userId, callback) {\n    this.notificationGateway.listenToMyNewNotification(userId, callback)\n  }\n\n  async deleteWithIdUserAndType (userId, types) {\n    const data = await this.notificationGateway.findNotificationWithData(\n      userId,\n      types\n    )\n    return data.map(data => {\n      this.notificationGateway.deleteById(data.id)\n    })\n  }\n\n  async findNotificationWithData (userId, types) {\n    return this.notificationGateway.findNotificationWithData(userId, types)\n  }\n\n  async findNotificationDocumentWhithId (userId) {\n    const actionAddToUser = await this.notificationGateway.findNotificationWithData(\n      userId,\n      NotificationType.ACTION_ADD_TO_USER\n    )\n    const uploadDocument = await this.notificationGateway.findNotificationWithData(\n      userId,\n      NotificationType.UPLOAD_DOCUMENT\n    )\n    const arrayDocument = [...actionAddToUser, ...uploadDocument]\n    const sortNotificationDocument = _.orderBy(\n      arrayDocument,\n      ['createdAt'],\n      ['desc']\n    )\n    return sortNotificationDocument\n  }\n\n  async limitFindNotification (userId, types) {\n    return this.notificationGateway.limitFindNotification(userId, types)\n  }\n\n  async setWatchedNotification (id) {\n    return this.notificationGateway.setWatchedNotification(id)\n  }\n\n  async countWithData (userId, types) {\n    return this.notificationGateway.countWithData(userId, types)\n  }\n  async getAllNotificationMessage (userId) {\n    return this.notificationGateway.getAllNotificationMessage(userId)\n  }\n  async getAllNotificationNews (userId) {\n    return this.notificationGateway.getAllNotificationNews(userId)\n  }\n  async getAllNotificationAssign (userId) {\n    return this.notificationGateway.getAllNotificationAssign(userId)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}