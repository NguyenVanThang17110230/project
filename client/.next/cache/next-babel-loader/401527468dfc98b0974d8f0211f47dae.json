{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime-corejs2/helpers/wrapNativeSuper\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\n\n/**\n * @class ApplicationError\n * @classdesc Contains error related to application layer thrown by service classes except ValidationError\n * @type {object}\n * @property {string} code\n * key indicating a list of error types of each field\n * @example\n * // return {\n * //   name: 'ValidationError',\n * //   code: 'LOGIN_FAILED'\n * // }\n * const error = new ApplicationError('LOGIN_FAILED')\n */\nvar ApplicationError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(ApplicationError, _Error);\n\n  function ApplicationError(code) {\n    var _this;\n\n    _classCallCheck(this, ApplicationError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationError).call(this));\n    _this.name = ApplicationError.name;\n    _this.code = code;\n    return _this;\n  }\n\n  return ApplicationError;\n}(_wrapNativeSuper(Error));\n\n_defineProperty(ApplicationError, \"name\", 'ApplicationError');\n\nexport { ApplicationError as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/errors/ApplicationError.js"],"names":["ApplicationError","code","name","Error"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;IAaqBA,gB;;;;;AAGnB,4BAAaC,IAAb,EAAmB;AAAA;;AAAA;;AACjB;AACA,UAAKC,IAAL,GAAYF,gBAAgB,CAACE,IAA7B;AACA,UAAKD,IAAL,GAAYA,IAAZ;AAHiB;AAIlB;;;mBAP2CE,K;;gBAAzBH,gB,UACL,kB;;SADKA,gB","sourcesContent":["/**\n * @class ApplicationError\n * @classdesc Contains error related to application layer thrown by service classes except ValidationError\n * @type {object}\n * @property {string} code\n * key indicating a list of error types of each field\n * @example\n * // return {\n * //   name: 'ValidationError',\n * //   code: 'LOGIN_FAILED'\n * // }\n * const error = new ApplicationError('LOGIN_FAILED')\n */\nexport default class ApplicationError extends Error {\n  static name = 'ApplicationError'\n\n  constructor (code) {\n    super()\n    this.name = ApplicationError.name\n    this.code = code\n  }\n}\n"]},"metadata":{},"sourceType":"module"}