{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport moment from 'moment';\nimport { taskService } from '../../services';\nimport toastr from 'toastr';\nimport EditTaskModal from './EditTaskModal';\nimport { Link } from '../../../common/routes';\n\nvar Task =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Task, _React$Component);\n\n  function Task(props) {\n    var _this;\n\n    _classCallCheck(this, Task);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Task).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_showEditTaskModal\", function () {\n      _this.setState({\n        showEditTasksModal: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_toggleModal\", function () {\n      _this.setState({\n        showEditTasksModal: !_this.state.showEditTasksModal\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_archiveTasks\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, task, viewType, refetchData, column;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, task = _this$props.task, viewType = _this$props.viewType, refetchData = _this$props.refetchData, column = _this$props.column;\n              _context.prev = 1;\n              _context.next = 4;\n              return taskService.archiveTask(task.id);\n\n            case 4:\n              refetchData(column.id, viewType);\n              toastr.success('Archived');\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              toastr.error(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"_deleteTasks\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props2, task, viewType, refetchData;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props2 = _this.props, task = _this$props2.task, viewType = _this$props2.viewType, refetchData = _this$props2.refetchData;\n\n              if (!confirm('Are you sure you wish to delete this tasks ?')) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.prev = 2;\n              _context2.next = 5;\n              return taskService.deleteTaskWithId(task.id);\n\n            case 5:\n              refetchData('toDo', viewType);\n              toastr.success('Deleted');\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](2);\n              toastr.error(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 9]]);\n    })));\n\n    _this.state = {\n      handleChange: false,\n      showEditTasksModal: false,\n      arayDeleteTasks: [],\n      arrayActiveTasks: []\n    };\n    return _this;\n  }\n\n  _createClass(Task, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          task = _this$props3.task,\n          index = _this$props3.index,\n          viewType = _this$props3.viewType; // let classItem = 'list-group-item'\n\n      var titleItem = '';\n\n      if (this.state.handleChange) {\n        // classItem += ' list-group-item-no-drop'\n        titleItem = \"Can't drag and drop the item has been chosen\";\n      }\n\n      return React.createElement(Draggable, {\n        key: task.id,\n        draggableId: task.id,\n        index: index // isDragDisabled={\n        //   this.state.handleChange\n        // }\n        ,\n        isDragDisabled: viewType === 'Archived'\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", _extends({\n          \"data-role\": \"task\"\n        }, provided.draggableProps, provided.dragHandleProps, {\n          ref: provided.innerRef,\n          isDragging: snapshot.isDragging,\n          title: titleItem\n        }), React.createElement(\"div\", {\n          className: \"card bg--light rounded fix-link\",\n          style: {\n            position: 'relative'\n          }\n        }, React.createElement(Link, {\n          route: \"/my-transactions/\".concat(task.transactionId)\n        }, React.createElement(\"div\", {\n          className: \"card-body task-card\"\n        }, React.createElement(\"div\", null, React.createElement(\"h6\", {\n          className: \"card-title mb-1\",\n          style: {\n            fontSize: '18px'\n          }\n        }, task.taskName), task.transactionName && React.createElement(\"div\", {\n          className: \"address-task\"\n        }, task.transactionName), task.deadline && React.createElement(\"small\", {\n          className: \"text--gray\"\n        }, moment(task.deadline).format('L'))))), React.createElement(\"div\", {\n          className: \"task-card-fade\"\n        }, React.createElement(\"div\", {\n          className: \"task-card-action\"\n        }, viewType === 'Active' && React.createElement(React.Fragment, null, React.createElement(\"button\", {\n          className: \"btn btn-sm text-white btn-info mr-1\",\n          onClick: function onClick() {\n            return _this2._showEditTaskModal();\n          }\n        }, React.createElement(\"i\", {\n          className: \"fas fa-pencil-alt\"\n        })), React.createElement(\"button\", {\n          className: \"btn btn-sm text-white btn-warning mr-1\",\n          onClick: function onClick() {\n            return _this2._archiveTasks();\n          }\n        }, React.createElement(\"i\", {\n          className: \"fas fa-archive \"\n        }))), React.createElement(\"button\", {\n          className: \"btn btn-sm text-white  btn-danger mr-1\",\n          onClick: function onClick() {\n            return _this2._deleteTasks();\n          }\n        }, React.createElement(\"i\", {\n          className: \"far fa-trash-alt \"\n        }))))), _this2.state.showEditTasksModal && React.createElement(EditTaskModal, {\n          taskId: _this2.props.task.id,\n          transactions: _this2.props.transactions,\n          droppableId: _this2.props.column.id,\n          toggle: _this2._toggleModal,\n          currentUser: _this2.props.currentUser,\n          dataOfColum: _this2.props.column,\n          viewType: _this2.props.viewType,\n          refetchData: _this2.props.refetchData\n        }));\n      });\n    }\n  }]);\n\n  return Task;\n}(React.Component);\n\nexport { Task as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/Tasks/task.js"],"names":["React","Draggable","moment","taskService","toastr","EditTaskModal","Link","Task","props","setState","showEditTasksModal","state","task","viewType","refetchData","column","archiveTask","id","success","error","confirm","deleteTaskWithId","handleChange","arayDeleteTasks","arrayActiveTasks","index","titleItem","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","position","transactionId","fontSize","taskName","transactionName","deadline","format","_showEditTaskModal","_archiveTasks","_deleteTasks","transactions","_toggleModal","currentUser","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\nimport moment from 'moment'\nimport { taskService } from '../../services'\nimport toastr from 'toastr'\nimport EditTaskModal from './EditTaskModal'\nimport { Link } from '../../../common/routes'\nexport default class Task extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      handleChange: false,\n      showEditTasksModal: false,\n      arayDeleteTasks: [],\n      arrayActiveTasks: []\n    }\n  }\n\n  _showEditTaskModal = () => {\n    this.setState({\n      showEditTasksModal: true\n    })\n  }\n\n  render () {\n    const { task, index, viewType } = this.props\n    // let classItem = 'list-group-item'\n    let titleItem = ''\n    if (this.state.handleChange) {\n      // classItem += ' list-group-item-no-drop'\n      titleItem = \"Can't drag and drop the item has been chosen\"\n    }\n\n    return (\n      <Draggable\n        key={task.id}\n        draggableId={task.id}\n        index={index}\n        // isDragDisabled={\n        //   this.state.handleChange\n        // }\n        isDragDisabled={viewType === 'Archived'}\n      >\n        {(provided, snapshot) => (\n          <div\n            data-role='task'\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            isDragging={snapshot.isDragging}\n            title={titleItem}\n          >\n            <div\n              className='card bg--light rounded fix-link'\n              style={{ position: 'relative' }}\n            >\n              <Link route={`/my-transactions/${task.transactionId}`}>\n                <div className='card-body task-card'>\n                  <div>\n                    <h6 className='card-title mb-1' style={{fontSize:'18px'}}>{task.taskName}</h6>\n                    {task.transactionName && (\n                      <div className='address-task'>{task.transactionName}</div>\n                    )}\n                    {task.deadline && (\n                      <small className='text--gray'>\n                        {moment(task.deadline).format('L')}\n                      </small>\n                    )}\n                  </div>\n                </div>\n              </Link>\n              <div className='task-card-fade'>\n                <div className='task-card-action'>\n                  {viewType === 'Active' && (\n                    <>\n                      <button\n                        className='btn btn-sm text-white btn-info mr-1'\n                        onClick={() => this._showEditTaskModal()}\n                      >\n                        <i className='fas fa-pencil-alt' />\n                      </button>\n                      <button\n                        className='btn btn-sm text-white btn-warning mr-1'\n                        onClick={() => this._archiveTasks()}\n                      >\n                        <i className='fas fa-archive ' />\n                      </button>\n                    </>\n                  )}\n                  <button\n                    className='btn btn-sm text-white  btn-danger mr-1'\n                    onClick={() => this._deleteTasks()}\n                  >\n                    <i className='far fa-trash-alt ' />\n                  </button>\n                </div>\n              </div>\n            </div>\n            {this.state.showEditTasksModal && (\n              <EditTaskModal\n                taskId={this.props.task.id}\n                transactions={this.props.transactions}\n                droppableId={this.props.column.id}\n                toggle={this._toggleModal}\n                currentUser={this.props.currentUser}\n                dataOfColum={this.props.column}\n                viewType={this.props.viewType}\n                refetchData={this.props.refetchData}\n              />\n            )}\n          </div>\n        )}\n      </Draggable>\n    )\n  }\n\n  _toggleModal = () => {\n    this.setState({\n      showEditTasksModal: !this.state.showEditTasksModal\n    })\n  }\n\n  _archiveTasks = async () => {\n    const { task, viewType, refetchData, column } = this.props\n    try {\n      await taskService.archiveTask(task.id)\n      refetchData(column.id, viewType)\n      toastr.success('Archived')\n    } catch (error) {\n      toastr.error(error)\n    }\n  }\n\n  _deleteTasks = async () => {\n    const { task, viewType, refetchData } = this.props\n    if (confirm('Are you sure you wish to delete this tasks ?')) {\n      try {\n        await taskService.deleteTaskWithId(task.id)\n        refetchData('toDo', viewType)\n        toastr.success('Deleted')\n      } catch (error) {\n        toastr.error(error)\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}