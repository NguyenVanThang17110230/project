{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport { IUserGateway } from './UserService';\nimport { userService } from './';\nimport BaseService from './BaseService';\nimport { validateAvatarUpload, validateUser } from '../validators/UserValidator';\nimport { Containers } from '../../common/models/Container';\nimport { Rank } from '../../common/models/User';\nimport Role from '../../common/models/Role';\n\nvar AuthService =\n/*#__PURE__*/\nfunction (_BaseService) {\n  _inherits(AuthService, _BaseService);\n\n  function AuthService(options) {\n    var _this;\n\n    _classCallCheck(this, AuthService);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthService).call(this, options));\n    _this.userGateway = options.userGateway;\n    _this.roleGateway = options.roleGateway;\n    _this.authGateway = options.authGateway;\n    _this.storageGateway = options.storageGateway;\n    return _this;\n  }\n\n  _createClass(AuthService, [{\n    key: \"loginWithEmail\",\n    value: function () {\n      var _loginWithEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var email, password, user;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = _ref.email, password = _ref.password;\n                _context.next = 3;\n                return this.authGateway.loginWithEmail({\n                  email: email,\n                  password: password\n                });\n\n              case 3:\n                user = _context.sent;\n                this.emit(AuthService.Event.USER_LOGIN, {\n                  type: 'email',\n                  user: user\n                });\n                return _context.abrupt(\"return\", user);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loginWithEmail(_x) {\n        return _loginWithEmail.apply(this, arguments);\n      }\n\n      return loginWithEmail;\n    }()\n  }, {\n    key: \"getLoginUser\",\n    value: function () {\n      var _getLoginUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.authGateway.getLoginUser());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getLoginUser() {\n        return _getLoginUser.apply(this, arguments);\n      }\n\n      return getLoginUser;\n    }()\n  }, {\n    key: \"signupWithEmail\",\n    value: function () {\n      var _signupWithEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref2) {\n        var firstName, lastName, email, password, role, user;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                firstName = _ref2.firstName, lastName = _ref2.lastName, email = _ref2.email, password = _ref2.password, role = _ref2.role;\n                validateUser({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  password: password\n                });\n\n                if (!(role === Role.AGENT)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 5;\n                return this.userGateway.create({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  password: password,\n                  rank: Rank.AGENT,\n                  cash: 0\n                });\n\n              case 5:\n                user = _context3.sent;\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.next = 10;\n                return this.userGateway.create({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  password: password\n                });\n\n              case 10:\n                user = _context3.sent;\n\n              case 11:\n                _context3.next = 13;\n                return userService._setRoleForSignUpUser(user.id, role);\n\n              case 13:\n                this.emit(AuthService.Event.USER_SIGNUP, {\n                  type: 'email',\n                  user: user\n                });\n                return _context3.abrupt(\"return\", this.loginWithEmail({\n                  email: email,\n                  password: password\n                }));\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signupWithEmail(_x2) {\n        return _signupWithEmail.apply(this, arguments);\n      }\n\n      return signupWithEmail;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.authGateway.logout();\n\n              case 2:\n                this.emit(AuthService.Event.USER_LOGOUT);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"sendResetPasswordEmail\",\n    value: function () {\n      var _sendResetPasswordEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(email) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                validateUser({\n                  email: email\n                });\n                return _context5.abrupt(\"return\", this.authGateway.sendResetPasswordEmail(email));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function sendResetPasswordEmail(_x3) {\n        return _sendResetPasswordEmail.apply(this, arguments);\n      }\n\n      return sendResetPasswordEmail;\n    }()\n  }, {\n    key: \"updateAccountInfo\",\n    value: function () {\n      var _updateAccountInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref3) {\n        var name, email, preferredLanguage;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                name = _ref3.name, email = _ref3.email, preferredLanguage = _ref3.preferredLanguage;\n                validateUser({\n                  name: name,\n                  email: email\n                });\n                _context6.next = 4;\n                return this.authGateway.updateAccountInfo({\n                  name: name,\n                  email: email,\n                  preferredLanguage: preferredLanguage\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateAccountInfo(_x4) {\n        return _updateAccountInfo.apply(this, arguments);\n      }\n\n      return updateAccountInfo;\n    }()\n  }, {\n    key: \"updatePassword\",\n    value: function () {\n      var _updatePassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(_ref4) {\n        var oldPassword, newPassword;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                oldPassword = _ref4.oldPassword, newPassword = _ref4.newPassword;\n                validateUser({\n                  password: newPassword\n                });\n                _context7.next = 4;\n                return this.authGateway.updatePassword({\n                  oldPassword: oldPassword,\n                  newPassword: newPassword\n                });\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function updatePassword(_x5) {\n        return _updatePassword.apply(this, arguments);\n      }\n\n      return updatePassword;\n    }()\n  }, {\n    key: \"setNewPassword\",\n    value: function () {\n      var _setNewPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(_ref5, accessToken) {\n        var userId, newPassword;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                userId = _ref5.userId, newPassword = _ref5.newPassword;\n                validateUser({\n                  password: newPassword\n                });\n                _context8.next = 4;\n                return this.authGateway.setNewPassword({\n                  userId: userId,\n                  newPassword: newPassword\n                }, accessToken);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function setNewPassword(_x6, _x7) {\n        return _setNewPassword.apply(this, arguments);\n      }\n\n      return setNewPassword;\n    }()\n  }, {\n    key: \"uploadAvatar\",\n    value: function () {\n      var _uploadAvatar = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(file) {\n        var avatarUrl;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                validateAvatarUpload(file);\n                _context9.next = 3;\n                return this.storageGateway.upload(Containers.AVATAR, file);\n\n              case 3:\n                avatarUrl = _context9.sent;\n                return _context9.abrupt(\"return\", this.authGateway.updateAvatar(avatarUrl));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function uploadAvatar(_x8) {\n        return _uploadAvatar.apply(this, arguments);\n      }\n\n      return uploadAvatar;\n    }()\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      this.authGateway.setAccessToken(accessToken);\n    }\n  }]);\n\n  return AuthService;\n}(BaseService);\n\n_defineProperty(AuthService, \"Error\", {\n  LOGIN_FAILED: 'LOGIN_FAILED',\n  EMAIL_NOT_FOUND: 'EMAIL_NOT_FOUND',\n  INVALID_CURRENT_PASSWORD: 'INVALID_CURRENT_PASSWORD',\n  INVALID_EMAIL: 'INVALID_EMAIL',\n  ACCOUNT_INACTIVATED: 'ACCOUNT_INACTIVATED'\n});\n\n_defineProperty(AuthService, \"Event\", {\n  USER_LOGIN: 'USER_LOGIN',\n  USER_SIGNUP: 'USER_SIGNUP',\n  USER_LOGOUT: 'USER_LOGOUT'\n});\n\nexport { AuthService as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/services/AuthService.js"],"names":["IUserGateway","userService","BaseService","validateAvatarUpload","validateUser","Containers","Rank","Role","AuthService","options","userGateway","roleGateway","authGateway","storageGateway","email","password","loginWithEmail","user","emit","Event","USER_LOGIN","type","getLoginUser","firstName","lastName","role","AGENT","create","rank","cash","_setRoleForSignUpUser","id","USER_SIGNUP","logout","USER_LOGOUT","sendResetPasswordEmail","name","preferredLanguage","updateAccountInfo","oldPassword","newPassword","updatePassword","accessToken","userId","setNewPassword","file","upload","AVATAR","avatarUrl","updateAvatar","setAccessToken","LOGIN_FAILED","EMAIL_NOT_FOUND","INVALID_CURRENT_PASSWORD","INVALID_EMAIL","ACCOUNT_INACTIVATED"],"mappings":"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","sourcesContent":["import { IUserGateway } from './UserService'\nimport { userService } from './'\nimport BaseService from './BaseService'\nimport { validateAvatarUpload, validateUser } from '../validators/UserValidator'\nimport { Containers } from '../../common/models/Container'\nimport { Rank } from '../../common/models/User'\nimport Role from '../../common/models/Role'\n\nexport interface IAuthGateway {\n  loginWithEmail({ email: string, password: string }): Promise<Object>;\n\n  getLoginUser(): Promise<Object>;\n\n  logout(): Promise<void>;\n\n  sendResetPasswordEmail(email: string): Promise<void>;\n\n  updateAccountInfo({\n    name: string,\n    email: string,\n    preferredLanguage: string\n  }): Promise<void>;\n\n  updatePassword({\n    oldPassword: string,\n    newPassword: string\n  }): Promise<void>;\n\n  setNewPassword(\n    { userId: string, newPassword: string },\n    accessToken: string\n  ): Promise<void>;\n}\n\nexport interface IStorageGateway {\n  getOrCreateContainer(name: string): Promise<Object>;\n\n  upload(containerName: string, file: Object): Promise<Object>;\n}\n\nexport default class AuthService extends BaseService {\n  static Error = {\n    LOGIN_FAILED: 'LOGIN_FAILED',\n    EMAIL_NOT_FOUND: 'EMAIL_NOT_FOUND',\n    INVALID_CURRENT_PASSWORD: 'INVALID_CURRENT_PASSWORD',\n    INVALID_EMAIL: 'INVALID_EMAIL',\n    ACCOUNT_INACTIVATED: 'ACCOUNT_INACTIVATED'\n  }\n\n  static Event = {\n    USER_LOGIN: 'USER_LOGIN',\n    USER_SIGNUP: 'USER_SIGNUP',\n    USER_LOGOUT: 'USER_LOGOUT'\n  }\n\n  constructor (options: {\n    pubsubGateway: Object,\n    userGateway: IUserGateway,\n    roleGateway: Object,\n    authGateway: IAuthGateway,\n    storageGateway: IStorageGateway\n  }) {\n    super(options)\n    this.userGateway = options.userGateway\n    this.roleGateway = options.roleGateway\n    this.authGateway = options.authGateway\n    this.storageGateway = options.storageGateway\n  }\n\n  async loginWithEmail ({ email, password }) {\n    const user = await this.authGateway.loginWithEmail({ email, password })\n    this.emit(AuthService.Event.USER_LOGIN, { type: 'email', user })\n    return user\n  }\n\n  async getLoginUser () {\n    return this.authGateway.getLoginUser()\n  }\n\n  async signupWithEmail ({ firstName, lastName, email, password, role }) {\n    validateUser({ firstName, lastName, email, password })\n\n    let user\n    if (role === Role.AGENT) {\n      user = await this.userGateway.create({\n        firstName,\n        lastName,\n        email,\n        password,\n        rank: Rank.AGENT,\n        cash: 0\n      })\n    } else {\n      user = await this.userGateway.create({\n        firstName,\n        lastName,\n        email,\n        password\n      })\n    }\n\n    await userService._setRoleForSignUpUser(user.id, role)\n\n    this.emit(AuthService.Event.USER_SIGNUP, { type: 'email', user })\n\n    return this.loginWithEmail({ email, password })\n  }\n\n  async logout () {\n    await this.authGateway.logout()\n    this.emit(AuthService.Event.USER_LOGOUT)\n  }\n\n  async sendResetPasswordEmail (email) {\n    validateUser({ email })\n    return this.authGateway.sendResetPasswordEmail(email)\n  }\n\n  async updateAccountInfo ({ name, email, preferredLanguage }) {\n    validateUser({ name, email })\n    await this.authGateway.updateAccountInfo({ name, email, preferredLanguage })\n  }\n\n  async updatePassword ({ oldPassword, newPassword }) {\n    validateUser({ password: newPassword })\n    await this.authGateway.updatePassword({ oldPassword, newPassword })\n  }\n\n  async setNewPassword ({ userId, newPassword }, accessToken) {\n    validateUser({ password: newPassword })\n    await this.authGateway.setNewPassword({ userId, newPassword }, accessToken)\n  }\n\n  async uploadAvatar (file) {\n    validateAvatarUpload(file)\n\n    const avatarUrl = await this.storageGateway.upload(Containers.AVATAR, file)\n    return this.authGateway.updateAvatar(avatarUrl)\n  }\n\n  setAccessToken (accessToken) {\n    this.authGateway.setAccessToken(accessToken)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}