{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport { Modal } from 'reactstrap';\nimport { Formik, Field } from 'formik';\nimport DatePicker from 'react-datepicker';\nimport toastr from 'toastr';\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.css';\nimport Calendar from '../../component/Calendar';\nimport { getRoleLabel } from '../../view-models/User';\nimport { getFullName } from '../../../common/view-models/TransactionParty';\nimport { transactionService, eventService } from '../../services';\n\nvar EditEventModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditEventModal, _Component);\n\n  function EditEventModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditEventModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditEventModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(values, action) {\n        var setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = action.setSubmitting;\n                _context.prev = 1;\n                setSubmitting(true);\n                _context.next = 5;\n                return eventService.updateEvent({\n                  id: _this.props.dataEdit.event.id,\n                  title: values.title,\n                  description: values.description,\n                  transactionId: values.transactionId,\n                  time: values.time,\n                  sharedUserIds: _this.state.listUserId,\n                  creatorUserId: _this.props.currentUser.id\n                });\n\n              case 5:\n                setSubmitting(false);\n\n                _this.props.refetchData();\n\n                _this.props.toggle();\n\n                toastr.success('Success');\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                toastr.error(_context.t0.message);\n                setSubmitting(false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 11]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectTransaction\", function () {\n      var transactions = _this.props.transactions;\n      return transactions.map(function (transaction, index) {\n        return React.createElement(\"option\", {\n          key: index,\n          value: transaction.id\n        }, transaction.address);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getDetailedTransaction\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(transactionId) {\n        var detailedTransaction, checklist, i;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return transactionService.getPartiesForTransaction(transactionId);\n\n              case 2:\n                detailedTransaction = _context2.sent;\n\n                _this.setState({\n                  detailedTransaction: detailedTransaction\n                });\n\n                checklist = document.getElementsByClassName('check-box-list');\n\n                if (checklist) {\n                  for (i = 0; i < checklist.length; i++) {\n                    checklist[i].checked = false;\n                  }\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateListUserId\", function (e) {\n      var newArray = _toConsumableArray(new _Set([].concat(_toConsumableArray(_this.state.listUserId), [e.target.value])));\n\n      if (e.target.checked) {\n        _this.setState({\n          listUserId: newArray\n        });\n      } else {\n        var index = _this.state.listUserId.findIndex(function (item) {\n          return item === e.target.value;\n        });\n\n        _this.state.listUserId.splice(index, 1);\n\n        _this.setState({\n          listUserId: _this.state.listUserId\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_findUserIds\", function (userId) {\n      if (_this.state.listUserId.find(function (element) {\n        return element === userId;\n      })) {\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderPartiesForTransaction\", function () {\n      var detailedTransaction = _this.state.detailedTransaction;\n\n      if (detailedTransaction) {\n        return detailedTransaction.parties.map(function (party, index) {\n          return React.createElement(\"div\", {\n            key: index,\n            className: \"col-12 col-md-6\"\n          }, React.createElement(\"label\", null, React.createElement(\"input\", {\n            id: \"userIdCheck\",\n            name: \"partyId\",\n            type: \"checkbox\",\n            className: \"check-box-list\",\n            value: party.userId,\n            checked: _this._findUserIds(party.userId),\n            onChange: _this.handleChange\n          }), \"\\u2002\", React.createElement(\"small\", null, getRoleLabel(party.role)), \"\\xA0\", React.createElement(\"small\", null, \"(\", getFullName(party), \")\")));\n        });\n      }\n    });\n\n    _this.state = {\n      time: props.defaultDate || new Date(),\n      detailedTransaction: props.dataEdit.detailedTransaction,\n      listUserId: _toConsumableArray(props.dataEdit.event.sharedUserIds)\n    };\n    return _this;\n  }\n\n  _createClass(EditEventModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var toggle = this.props.toggle;\n      var event = this.props.dataEdit.event;\n      return React.createElement(Modal, {\n        isOpen: toggle,\n        toggle: toggle,\n        id: \"new-event-modal\",\n        modalTransition: {\n          timeout: 0\n        }\n      }, React.createElement(\"div\", {\n        className: \"modal-header modal-header--change\"\n      }, React.createElement(\"div\", {\n        className: \"text-center w-100\"\n      }, React.createElement(\"h5\", {\n        className: \"modal-title font-weight-bold\",\n        id: \"exampleModalLabel\"\n      }, \"EDIT EVENT\"), React.createElement(\"small\", null, \"All events added will be shared only with the parties chosen below.\"), React.createElement(\"br\", null), React.createElement(\"small\", null, \"Parties will be notified that a new event is in their calendar.\")), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"close bg-transparent\",\n        \"data-dismiss\": \"modal\",\n        onClick: toggle\n      }, \"\\xD7\")), React.createElement(Formik, {\n        initialValues: {\n          time: new Date(event.time) || new Date(),\n          title: event.title,\n          description: event.description,\n          transactionId: event.transactionId,\n          sharedUserIds: event.sharedUserIds\n        },\n        onSubmit: this._onSubmit,\n        validate: function validate(values) {\n          var error = {};\n\n          if (values.title === '') {\n            error.title = 'Event Title is required';\n          } else if (values.description === '') {\n            error.description = 'Description is required';\n          } else if (values.transactionId === '') {\n            error.transaction = 'Transaction is required';\n          }\n\n          return error;\n        }\n      }, function (_ref3) {\n        var values = _ref3.values,\n            errors = _ref3.errors,\n            handleSubmit = _ref3.handleSubmit,\n            handleChange = _ref3.handleChange;\n        return React.createElement(\"form\", {\n          onSubmit: handleSubmit\n        }, React.createElement(\"div\", {\n          className: \"modal-body px-5 mx-2\"\n        }, React.createElement(\"div\", {\n          id: \"calendar\"\n        }, React.createElement(\"div\", {\n          className: \"row\"\n        }, React.createElement(\"div\", {\n          className: \"col-10\"\n        }, React.createElement(Calendar, {\n          unselectAuto: false,\n          defaultView: \"dayGridMonth\",\n          allDaySlot: false,\n          allDayDefault: true,\n          dateClick: function dateClick(_ref4) {\n            var dateStr = _ref4.dateStr;\n            var updatedTime = values.time;\n            var newDate = new Date(dateStr.replace(/-/g, '/'));\n            updatedTime.setFullYear(newDate.getFullYear());\n            updatedTime.setMonth(newDate.getMonth());\n            updatedTime.setDate(newDate.getDate());\n            handleChange({\n              time: updatedTime\n            });\n          },\n          selectable: true,\n          selectMirror: true,\n          header: {\n            left: 'prev',\n            center: 'title',\n            right: 'next'\n          },\n          myRef: function myRef(calendarRef) {\n            if (!calendarRef) {\n              return;\n            }\n\n            calendarRef.getApi().gotoDate(_this2.state.time);\n            calendarRef.getApi().select(_this2.state.time);\n          },\n          height: \"auto\"\n        })), React.createElement(\"div\", {\n          className: \"col-2 pt-5 mt-4\"\n        }, React.createElement(\"div\", {\n          className: \"text-center\"\n        }, React.createElement(DatePicker, {\n          style: {\n            height: '100%'\n          },\n          selected: values.time,\n          onChange: function onChange(newTime) {\n            var updatedTime = values.time;\n            updatedTime.setHours(newTime.getHours());\n            updatedTime.setMinutes(newTime.getMinutes());\n            handleChange({\n              time: updatedTime\n            });\n          },\n          showTimeSelect: true,\n          showTimeSelectOnly: true,\n          timeIntervals: 30,\n          timeCaption: \"Time\",\n          dateFormat: \"h:mm aa\",\n          inline: true\n        }))))), React.createElement(\"div\", {\n          className: \"mt-4\"\n        }, React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Event Title\"), React.createElement(\"input\", {\n          className: \"form-control\",\n          placeholder: \"Event Title\",\n          name: \"title\",\n          onChange: handleChange,\n          value: values.title\n        }), errors.title && React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, errors.title)), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Description\"), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"input\", {\n          className: \"form-control\",\n          placeholder: \"Description\",\n          name: \"description\",\n          onChange: handleChange,\n          value: values.description\n        })), errors.description && React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, errors.description)), React.createElement(\"div\", {\n          className: \"form-group\"\n        }, React.createElement(\"h5\", {\n          className: \"text-center\"\n        }, \"Share With\"), React.createElement(Field, {\n          component: \"select\",\n          name: \"transactionId\",\n          className: \"form-control\",\n          onChange:\n          /*#__PURE__*/\n          function () {\n            var _ref5 = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee3(e) {\n              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      handleChange(e);\n                      _context3.next = 3;\n                      return _this2._getDetailedTransaction(e.target.value);\n\n                    case 3:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n\n            return function (_x4) {\n              return _ref5.apply(this, arguments);\n            };\n          }()\n        }, React.createElement(\"option\", {\n          selected: true,\n          hidden: true\n        }, _this2.props.transactions.address), _this2._renderSelectTransaction(handleChange)), errors.transaction && React.createElement(\"div\", {\n          className: \"text-danger text-center\"\n        }, errors.transaction), React.createElement(\"div\", {\n          className: \"form-group mt-3\"\n        }, React.createElement(\"div\", {\n          id: \"shared-user-id\",\n          className: \"row container m-auto\",\n          name: \"sharedUserIds\",\n          onChange: function onChange(e) {\n            handleChange(e);\n\n            _this2._updateListUserId(e);\n          }\n        }, _this2._renderPartiesForTransaction(handleChange))))), React.createElement(\"div\", {\n          className: \"text-center my-5\"\n        }, React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"btn text-white py-2 px-5 bg-info\"\n        }, \"SAVE EVENT\"))));\n      }));\n    }\n  }]);\n\n  return EditEventModal;\n}(Component);\n\nexport { EditEventModal as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/Calendar/EditEventModal.js"],"names":["React","Component","Modal","Formik","Field","DatePicker","toastr","Calendar","getRoleLabel","getFullName","transactionService","eventService","EditEventModal","props","values","action","setSubmitting","updateEvent","id","dataEdit","event","title","description","transactionId","time","sharedUserIds","state","listUserId","creatorUserId","currentUser","refetchData","toggle","success","error","message","transactions","map","transaction","index","address","getPartiesForTransaction","detailedTransaction","setState","checklist","document","getElementsByClassName","i","length","checked","e","newArray","target","value","findIndex","item","splice","userId","find","element","parties","party","_findUserIds","handleChange","role","defaultDate","Date","timeout","_onSubmit","errors","handleSubmit","dateStr","updatedTime","newDate","replace","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","left","center","right","calendarRef","getApi","gotoDate","select","height","newTime","setHours","getHours","setMinutes","getMinutes","_getDetailedTransaction","_renderSelectTransaction","_updateListUserId","_renderPartiesForTransaction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Modal } from 'reactstrap'\nimport { Formik, Field } from 'formik'\nimport DatePicker from 'react-datepicker'\nimport toastr from 'toastr'\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.css'\nimport Calendar from '../../component/Calendar'\nimport { getRoleLabel } from '../../view-models/User'\nimport { getFullName } from '../../../common/view-models/TransactionParty'\nimport { transactionService, eventService } from '../../services'\n\nexport default class EditEventModal extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      time: props.defaultDate || new Date(),\n      detailedTransaction: props.dataEdit.detailedTransaction,\n      listUserId: [...props.dataEdit.event.sharedUserIds]\n    }\n  }\n\n  _onSubmit = async (values, action) => {\n    const { setSubmitting } = action\n    try {\n      setSubmitting(true)\n      await eventService.updateEvent({\n        id: this.props.dataEdit.event.id,\n        title: values.title,\n        description: values.description,\n        transactionId: values.transactionId,\n        time: values.time,\n        sharedUserIds: this.state.listUserId,\n        creatorUserId: this.props.currentUser.id\n      })\n      setSubmitting(false)\n      this.props.refetchData()\n      this.props.toggle()\n      toastr.success('Success')\n    } catch (e) {\n      toastr.error(e.message)\n      setSubmitting(false)\n    }\n  }\n\n  render () {\n    const { toggle } = this.props\n    const { event } = this.props.dataEdit\n    return (\n      <Modal\n        isOpen={toggle}\n        toggle={toggle}\n        id='new-event-modal'\n        modalTransition={{ timeout: 0 }}\n      >\n        <div className='modal-header modal-header--change'>\n          <div className='text-center w-100'>\n            <h5 className='modal-title font-weight-bold' id='exampleModalLabel'>\n              EDIT EVENT\n            </h5>\n            <small>\n              All events added will be shared only with the parties chosen\n              below.\n            </small>\n            <br />\n            <small>\n              Parties will be notified that a new event is in their calendar.\n            </small>\n          </div>\n          <button\n            type='button'\n            className='close bg-transparent'\n            data-dismiss='modal'\n            onClick={toggle}\n          >\n            &times;\n          </button>\n        </div>\n        <Formik\n          initialValues={{\n            time: new Date(event.time) || new Date(),\n            title: event.title,\n            description: event.description,\n            transactionId: event.transactionId,\n            sharedUserIds: event.sharedUserIds\n          }}\n          onSubmit={this._onSubmit}\n          validate={values => {\n            let error = {}\n            if (values.title === '') {\n              error.title = 'Event Title is required'\n            } else if (values.description === '') {\n              error.description = 'Description is required'\n            } else if (values.transactionId === '') {\n              error.transaction = 'Transaction is required'\n            }\n            return error\n          }}\n        >\n          {({ values, errors, handleSubmit, handleChange }) => (\n            <form onSubmit={handleSubmit}>\n              <div className='modal-body px-5 mx-2'>\n                <div id='calendar'>\n                  <div className='row'>\n                    <div className='col-10'>\n                      <Calendar\n                        unselectAuto={false}\n                        defaultView='dayGridMonth'\n                        allDaySlot={false}\n                        allDayDefault\n                        dateClick={({ dateStr }) => {\n                          const updatedTime = values.time\n                          const newDate = new Date(dateStr.replace(/-/g, '/'))\n                          updatedTime.setFullYear(newDate.getFullYear())\n                          updatedTime.setMonth(newDate.getMonth())\n                          updatedTime.setDate(newDate.getDate())\n                          handleChange({ time: updatedTime })\n                        }}\n                        selectable\n                        selectMirror\n                        header={{\n                          left: 'prev',\n                          center: 'title',\n                          right: 'next'\n                        }}\n                        myRef={calendarRef => {\n                          if (!calendarRef) {\n                            return\n                          }\n\n                          calendarRef.getApi().gotoDate(this.state.time)\n                          calendarRef.getApi().select(this.state.time)\n                        }}\n                        height='auto'\n                      />\n                    </div>\n                    <div className='col-2 pt-5 mt-4'>\n                      <div className='text-center'>\n                        <DatePicker\n                          style={{ height: '100%' }}\n                          selected={values.time}\n                          onChange={newTime => {\n                            const updatedTime = values.time\n                            updatedTime.setHours(newTime.getHours())\n                            updatedTime.setMinutes(newTime.getMinutes())\n                            handleChange({ time: updatedTime })\n                          }}\n                          showTimeSelect\n                          showTimeSelectOnly\n                          timeIntervals={30}\n                          timeCaption='Time'\n                          dateFormat='h:mm aa'\n                          inline\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className='mt-4'>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Event Title</h5>\n                    <input\n                      className='form-control'\n                      placeholder='Event Title'\n                      name='title'\n                      onChange={handleChange}\n                      value={values.title}\n                    />\n                    {errors.title && (\n                      <div className='text-danger text-center'>\n                        {errors.title}\n                      </div>\n                    )}\n                  </div>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Description</h5>\n                    <div className='form-group'>\n                      <input\n                        className='form-control'\n                        placeholder='Description'\n                        name='description'\n                        onChange={handleChange}\n                        value={values.description}\n                      />\n                    </div>\n                    {errors.description && (\n                      <div className='text-danger text-center'>\n                        {errors.description}\n                      </div>\n                    )}\n                  </div>\n                  <div className='form-group'>\n                    <h5 className='text-center'>Share With</h5>\n                    <Field\n                      component='select'\n                      name='transactionId'\n                      className='form-control'\n                      onChange={async e => {\n                        handleChange(e)\n                        await this._getDetailedTransaction(e.target.value)\n                      }}\n                    >\n                      <option selected hidden>\n                        {this.props.transactions.address}\n                      </option>\n                      {this._renderSelectTransaction(handleChange)}\n                    </Field>\n                    {errors.transaction && (\n                      <div className='text-danger text-center'>\n                        {errors.transaction}\n                      </div>\n                    )}\n\n                    <div className='form-group mt-3'>\n                      <div\n                        id='shared-user-id'\n                        className='row container m-auto'\n                        name='sharedUserIds'\n                        onChange={e => {\n                          handleChange(e)\n                          this._updateListUserId(e)\n                        }}\n                      >\n                        {this._renderPartiesForTransaction(handleChange)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className='text-center my-5'>\n                  <button\n                    type='submit'\n                    className='btn text-white py-2 px-5 bg-info'\n                  >\n                    SAVE EVENT\n                  </button>\n                </div>\n              </div>\n            </form>\n          )}\n        </Formik>\n      </Modal>\n    )\n  }\n\n  _renderSelectTransaction = () => {\n    const { transactions } = this.props\n    return transactions.map((transaction, index) => (\n      <option key={index} value={transaction.id}>\n        {transaction.address}\n      </option>\n    ))\n  }\n\n  _getDetailedTransaction = async transactionId => {\n    const detailedTransaction = await transactionService.getPartiesForTransaction(\n      transactionId\n    )\n    this.setState({ detailedTransaction })\n    const checklist = document.getElementsByClassName('check-box-list')\n    if (checklist) {\n      for (let i = 0; i < checklist.length; i++) {\n        checklist[i].checked = false\n      }\n    }\n  }\n\n  _updateListUserId = e => {\n    let newArray = [...new Set([...this.state.listUserId, e.target.value])]\n    if (e.target.checked) {\n      this.setState({ listUserId: newArray })\n    } else {\n      const index = this.state.listUserId.findIndex(\n        item => item === e.target.value\n      )\n      this.state.listUserId.splice(index, 1)\n      this.setState({ listUserId: this.state.listUserId })\n    }\n  }\n  _findUserIds = userId => {\n    if (\n      this.state.listUserId.find(element => {\n        return element === userId\n      })\n    ) {\n      return true\n    }\n    return false\n  }\n\n  _renderPartiesForTransaction = () => {\n    const { detailedTransaction } = this.state\n    if (detailedTransaction) {\n      return detailedTransaction.parties.map((party, index) => (\n        <div key={index} className='col-12 col-md-6'>\n          <label>\n            <input\n              id='userIdCheck'\n              name='partyId'\n              type='checkbox'\n              className='check-box-list'\n              value={party.userId}\n              checked={this._findUserIds(party.userId)}\n              onChange={this.handleChange}\n            />\n            &ensp;\n            <small>{getRoleLabel(party.role)}</small>\n            &nbsp;\n            <small>({getFullName(party)})</small>\n          </label>\n        </div>\n      ))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}