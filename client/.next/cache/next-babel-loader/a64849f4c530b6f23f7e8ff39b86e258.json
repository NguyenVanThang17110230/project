{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\n\nvar MessageGateway =\n/*#__PURE__*/\nfunction () {\n  function MessageGateway(_ref) {\n    var restConnector = _ref.restConnector,\n        socketConnector = _ref.socketConnector;\n\n    _classCallCheck(this, MessageGateway);\n\n    this.restConnector = restConnector;\n    this.socketConnector = socketConnector;\n  }\n\n  _createClass(MessageGateway, [{\n    key: \"listenToMyNewMessages\",\n    value: function listenToMyNewMessages(userId, callback) {\n      this.socketConnector.on(\"messages:new:\".concat(userId), function (message) {\n        callback(message);\n      });\n    }\n  }, {\n    key: \"sendToNewMessage\",\n    value: function () {\n      var _sendToNewMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var content, senderId, recipientId, type, _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                content = _ref2.content, senderId = _ref2.senderId, recipientId = _ref2.recipientId, type = _ref2.type;\n                _context.next = 3;\n                return this.restConnector.post('/messages', {\n                  content: content,\n                  senderId: senderId,\n                  recipientId: recipientId,\n                  type: type\n                });\n\n              case 3:\n                _ref3 = _context.sent;\n                data = _ref3.data;\n                return _context.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendToNewMessage(_x) {\n        return _sendToNewMessage.apply(this, arguments);\n      }\n\n      return sendToNewMessage;\n    }()\n  }, {\n    key: \"sendToFile\",\n    value: function () {\n      var _sendToFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref4) {\n        var file, senderId, recipientId, type, bodyFormData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                file = _ref4.file, senderId = _ref4.senderId, recipientId = _ref4.recipientId, type = _ref4.type;\n                bodyFormData = new FormData();\n                bodyFormData.set('file', file);\n                bodyFormData.set('senderId', senderId);\n                bodyFormData.set('recipientId', recipientId);\n                bodyFormData.set('type', type);\n                return _context2.abrupt(\"return\", this.restConnector({\n                  url: '/messages/create-new',\n                  method: 'post',\n                  data: bodyFormData,\n                  config: {\n                    headers: {\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }\n                }).then(function (resp) {\n                  return resp.data;\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendToFile(_x2) {\n        return _sendToFile.apply(this, arguments);\n      }\n\n      return sendToFile;\n    }()\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref5) {\n        var where, order, limit, skip, filter, _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                where = _ref5.where, order = _ref5.order, limit = _ref5.limit, skip = _ref5.skip;\n                filter = {\n                  where: where,\n                  order: order,\n                  limit: limit,\n                  skip: skip\n                };\n                _context3.prev = 2;\n                _context3.next = 5;\n                return this.restConnector.get(\"/messages?filter=\".concat(_JSON$stringify(filter)));\n\n              case 5:\n                _ref6 = _context3.sent;\n                data = _ref6.data;\n                return _context3.abrupt(\"return\", data);\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](2);\n                return _context3.abrupt(\"return\", null);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 10]]);\n      }));\n\n      function find(_x3) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var where,\n            _ref7,\n            data,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                where = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n                _context4.next = 3;\n                return this.restConnector.get(\"/messages/count?where=\".concat(_JSON$stringify(where)));\n\n              case 3:\n                _ref7 = _context4.sent;\n                data = _ref7.data;\n                return _context4.abrupt(\"return\", data.count);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function count() {\n        return _count.apply(this, arguments);\n      }\n\n      return count;\n    }()\n  }]);\n\n  return MessageGateway;\n}();\n\nexport { MessageGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/MessageGateway.js"],"names":["MessageGateway","restConnector","socketConnector","userId","callback","on","message","content","senderId","recipientId","type","post","data","file","bodyFormData","FormData","set","url","method","config","headers","then","resp","where","order","limit","skip","filter","get","count"],"mappings":";;;;;;IAAqBA,c;;;AACnB,gCAAiD;AAAA,QAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,QAAnBC,eAAmB,QAAnBA,eAAmB;;AAAA;;AAC/C,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACD;;;;0CAEsBC,M,EAAQC,Q,EAAU;AACvC,WAAKF,eAAL,CAAqBG,EAArB,wBAAwCF,MAAxC,GAAkD,UAAUG,OAAV,EAAmB;AACnEF,QAAAA,QAAQ,CAACE,OAAD,CAAR;AACD,OAFD;AAGD;;;;;;;;;;;;;AAEyBC,gBAAAA,O,SAAAA,O,EAASC,Q,SAAAA,Q,EAAUC,W,SAAAA,W,EAAaC,I,SAAAA,I;;uBACjC,KAAKT,aAAL,CAAmBU,IAAnB,CAAwB,WAAxB,EAAqC;AAC1DJ,kBAAAA,OAAO,EAAPA,OAD0D;AAE1DC,kBAAAA,QAAQ,EAARA,QAF0D;AAG1DC,kBAAAA,WAAW,EAAXA,WAH0D;AAI1DC,kBAAAA,IAAI,EAAJA;AAJ0D,iBAArC,C;;;;AAAfE,gBAAAA,I,SAAAA,I;iDAMDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGWC,gBAAAA,I,SAAAA,I,EAAML,Q,SAAAA,Q,EAAUC,W,SAAAA,W,EAAaC,I,SAAAA,I;AACzCI,gBAAAA,Y,GAAe,IAAIC,QAAJ,E;AACrBD,gBAAAA,YAAY,CAACE,GAAb,CAAiB,MAAjB,EAAyBH,IAAzB;AACAC,gBAAAA,YAAY,CAACE,GAAb,CAAiB,UAAjB,EAA6BR,QAA7B;AACAM,gBAAAA,YAAY,CAACE,GAAb,CAAiB,aAAjB,EAAgCP,WAAhC;AACAK,gBAAAA,YAAY,CAACE,GAAb,CAAiB,MAAjB,EAAyBN,IAAzB;kDAEO,KAAKT,aAAL,CAAmB;AACxBgB,kBAAAA,GAAG,EAAE,sBADmB;AAExBC,kBAAAA,MAAM,EAAE,MAFgB;AAGxBN,kBAAAA,IAAI,EAAEE,YAHkB;AAIxBK,kBAAAA,MAAM,EAAE;AAAEC,oBAAAA,OAAO,EAAE;AAAE,sCAAgB;AAAlB;AAAX;AAJgB,iBAAnB,EAKJC,IALI,CAKC,UAAAC,IAAI;AAAA,yBAAIA,IAAI,CAACV,IAAT;AAAA,iBALL,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQKW,gBAAAA,K,SAAAA,K,EAAOC,K,SAAAA,K,EAAOC,K,SAAAA,K,EAAOC,I,SAAAA,I;AAC3BC,gBAAAA,M,GAAS;AAAEJ,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,KAAK,EAALA,KAAT;AAAgBC,kBAAAA,KAAK,EAALA,KAAhB;AAAuBC,kBAAAA,IAAI,EAAJA;AAAvB,iB;;;uBAEU,KAAKzB,aAAL,CAAmB2B,GAAnB,4BACD,gBAAeD,MAAf,CADC,E;;;;AAAff,gBAAAA,I,SAAAA,I;kDAGDA,I;;;;;kDAEA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIEW,gBAAAA,K,8DAAQ,E;;uBACI,KAAKtB,aAAL,CAAmB2B,GAAnB,iCACI,gBAAeL,KAAf,CADJ,E;;;;AAAfX,gBAAAA,I,SAAAA,I;kDAGDA,IAAI,CAACiB,K;;;;;;;;;;;;;;;;;;;;;SArDK7B,c","sourcesContent":["export default class MessageGateway {\n  constructor ({ restConnector, socketConnector }) {\n    this.restConnector = restConnector\n    this.socketConnector = socketConnector\n  }\n\n  listenToMyNewMessages (userId, callback) {\n    this.socketConnector.on(`messages:new:${userId}`, function (message) {\n      callback(message)\n    })\n  }\n\n  async sendToNewMessage ({ content, senderId, recipientId, type }) {\n    const { data } = await this.restConnector.post('/messages', {\n      content,\n      senderId,\n      recipientId,\n      type\n    })\n    return data\n  }\n\n  async sendToFile ({ file, senderId, recipientId, type }) {\n    const bodyFormData = new FormData()\n    bodyFormData.set('file', file)\n    bodyFormData.set('senderId', senderId)\n    bodyFormData.set('recipientId', recipientId)\n    bodyFormData.set('type', type)\n\n    return this.restConnector({\n      url: '/messages/create-new',\n      method: 'post',\n      data: bodyFormData,\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\n    }).then(resp => resp.data)\n  }\n\n  async find ({ where, order, limit, skip }) {\n    const filter = { where, order, limit, skip }\n    try {\n      const { data } = await this.restConnector.get(\n        `/messages?filter=${JSON.stringify(filter)}`\n      )\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async count (where = {}) {\n    const { data } = await this.restConnector.get(\n      `/messages/count?where=${JSON.stringify(where)}`\n    )\n    return data.count\n  }\n}\n"]},"metadata":{},"sourceType":"module"}