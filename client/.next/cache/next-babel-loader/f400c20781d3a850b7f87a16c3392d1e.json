{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\n\nvar TaskGateway =\n/*#__PURE__*/\nfunction () {\n  function TaskGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, TaskGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(TaskGateway, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(task) {\n        var _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restConnector.post('/tasks', task);\n\n              case 2:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                return _context.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"deleteById\",\n    value: function () {\n      var _deleteById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.restConnector[\"delete\"](\"/tasks/\".concat(id));\n\n              case 2:\n                _ref3 = _context2.sent;\n                data = _ref3.data;\n                return _context2.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteById(_x2) {\n        return _deleteById.apply(this, arguments);\n      }\n\n      return deleteById;\n    }()\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(where) {\n        var filter, _ref4, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filter = {\n                  where: where,\n                  include: 'sharedUsers',\n                  order: 'createdAt DESC'\n                };\n                _context3.next = 3;\n                return this.restConnector.get(\"/tasks?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref4 = _context3.sent;\n                data = _ref4.data;\n                return _context3.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function find(_x3) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }, {\n    key: \"editTaskById\",\n    value: function () {\n      var _editTaskById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id, task) {\n        var _ref5, data;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.restConnector.patch(\"/tasks/\".concat(id), task);\n\n              case 2:\n                _ref5 = _context4.sent;\n                data = _ref5.data;\n                return _context4.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function editTaskById(_x4, _x5) {\n        return _editTaskById.apply(this, arguments);\n      }\n\n      return editTaskById;\n    }()\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.restConnector.get(\"/tasks/\".concat(id));\n\n              case 2:\n                _ref6 = _context5.sent;\n                data = _ref6.data;\n                return _context5.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function findById(_x6) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }()\n  }, {\n    key: \"getTasksByIsActiveForUserId\",\n    value: function () {\n      var _getTasksByIsActiveForUserId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(userId, status, isActive) {\n        var filter, _ref7, data;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                filter = {\n                  where: {\n                    isActive: isActive,\n                    status: status,\n                    or: [{\n                      creatorUserId: userId\n                    }, {\n                      sharedUserIds: userId\n                    }]\n                  },\n                  order: 'createdAt DESC'\n                };\n                _context6.next = 3;\n                return this.restConnector.get(\"/tasks?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref7 = _context6.sent;\n                data = _ref7.data;\n                return _context6.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getTasksByIsActiveForUserId(_x7, _x8, _x9) {\n        return _getTasksByIsActiveForUserId.apply(this, arguments);\n      }\n\n      return getTasksByIsActiveForUserId;\n    }()\n  }, {\n    key: \"patch\",\n    value: function () {\n      var _patch = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(task) {\n        var _ref8, data;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.restConnector.patch('/tasks', task);\n\n              case 2:\n                _ref8 = _context7.sent;\n                data = _ref8.data;\n                return _context7.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function patch(_x10) {\n        return _patch.apply(this, arguments);\n      }\n\n      return patch;\n    }()\n  }]);\n\n  return TaskGateway;\n}();\n\nexport { TaskGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/TaskGateway.js"],"names":["TaskGateway","restConnector","task","post","data","id","where","filter","include","order","get","patch","userId","status","isActive","or","creatorUserId","sharedUserIds"],"mappings":";;;;;;IAAqBA,W;;;AACnB,6BAAgC;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AAAA;;AAC9B,SAAKA,aAAL,GAAqBA,aAArB;AACD;;;;;;;gDAEaC,I;;;;;;;;uBACW,KAAKD,aAAL,CAAmBE,IAAnB,CAAwB,QAAxB,EAAkCD,IAAlC,C;;;;AAAfE,gBAAAA,I,SAAAA,I;iDACDA,I;;;;;;;;;;;;;;;;;;;;;iDAESC,E;;;;;;;;uBACO,KAAKJ,aAAL,4BAAoCI,EAApC,E;;;;AAAfD,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;iDAEGE,K;;;;;;;AACJC,gBAAAA,M,GAAS;AACbD,kBAAAA,KAAK,EAALA,KADa;AAEbE,kBAAAA,OAAO,EAAE,aAFI;AAGbC,kBAAAA,KAAK,EAAE;AAHM,iB;;uBAKQ,KAAKR,aAAL,CAAmBS,GAAnB,yBACJ,gBAAeH,MAAf,CADI,E;;;;AAAfH,gBAAAA,I,SAAAA,I;kDAGDA,I;;;;;;;;;;;;;;;;;;;;;iDAEWC,E,EAAIH,I;;;;;;;;uBACC,KAAKD,aAAL,CAAmBU,KAAnB,kBAAmCN,EAAnC,GAAyCH,IAAzC,C;;;;AAAfE,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;iDAGOC,E;;;;;;;;uBACS,KAAKJ,aAAL,CAAmBS,GAAnB,kBAAiCL,EAAjC,E;;;;AAAfD,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;iDAG0BQ,M,EAAQC,M,EAAQC,Q;;;;;;;AAC3CP,gBAAAA,M,GAAS;AACbD,kBAAAA,KAAK,EAAE;AACLQ,oBAAAA,QAAQ,EAARA,QADK;AAELD,oBAAAA,MAAM,EAANA,MAFK;AAGLE,oBAAAA,EAAE,EAAE,CAAC;AAAEC,sBAAAA,aAAa,EAAEJ;AAAjB,qBAAD,EAA4B;AAAEK,sBAAAA,aAAa,EAAEL;AAAjB,qBAA5B;AAHC,mBADM;AAMbH,kBAAAA,KAAK,EAAE;AANM,iB;;uBAQQ,KAAKR,aAAL,CAAmBS,GAAnB,yBACJ,gBAAeH,MAAf,CADI,E;;;;AAAfH,gBAAAA,I,SAAAA,I;kDAGDA,I;;;;;;;;;;;;;;;;;;;;;iDAGIF,I;;;;;;;;uBACY,KAAKD,aAAL,CAAmBU,KAAnB,CAAyB,QAAzB,EAAmCT,IAAnC,C;;;;AAAfE,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;SAnDUJ,W","sourcesContent":["export default class TaskGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async create (task) {\n    const { data } = await this.restConnector.post('/tasks', task)\n    return data\n  }\n  async deleteById (id) {\n    const { data } = await this.restConnector.delete(`/tasks/${id}`)\n    return data\n  }\n  async find (where) {\n    const filter = {\n      where,\n      include: 'sharedUsers',\n      order: 'createdAt DESC'\n    }\n    const { data } = await this.restConnector.get(\n      `/tasks?filter=${JSON.stringify(filter)}`\n    )\n    return data\n  }\n  async editTaskById (id, task) {\n    const { data } = await this.restConnector.patch(`/tasks/${id}`, task)\n    return data\n  }\n\n  async findById (id) {\n    const { data } = await this.restConnector.get(`/tasks/${id}`)\n    return data\n  }\n\n  async getTasksByIsActiveForUserId (userId, status, isActive) {\n    const filter = {\n      where: {\n        isActive,\n        status,\n        or: [{ creatorUserId: userId }, { sharedUserIds: userId }]\n      },\n      order: 'createdAt DESC'\n    }\n    const { data } = await this.restConnector.get(\n      `/tasks?filter=${JSON.stringify(filter)}`\n    )\n    return data\n  }\n\n  async patch (task) {\n    const { data } = await this.restConnector.patch('/tasks', task)\n    return data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}