{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _ from 'lodash';\nimport ValidationError, { ErrorCode } from '../errors/ValidationError';\nimport AuthService, { IAuthGateway } from '../services/AuthService';\nimport ApplicationError from '../errors/ApplicationError';\n\nvar AuthGateway =\n/*#__PURE__*/\nfunction () {\n  function AuthGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, AuthGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(AuthGateway, [{\n    key: \"loginWithEmail\",\n    value: function () {\n      var _loginWithEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var email, password;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = _ref2.email, password = _ref2.password;\n                _context.prev = 1;\n                _context.next = 4;\n                return this.restConnector.post('/users/login', {\n                  email: email,\n                  password: password\n                });\n\n              case 4:\n                return _context.abrupt(\"return\", this.getLoginUser());\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                _context.t1 = _.get(_context.t0, 'response.data.error.code');\n                _context.next = _context.t1 === 'USERNAME_EMAIL_REQUIRED' ? 12 : _context.t1 === 'LOGIN_FAILED' ? 12 : 13;\n                break;\n\n              case 12:\n                throw new ApplicationError(AuthService.Error.LOGIN_FAILED);\n\n              case 13:\n                if (!(_.get(_context.t0, 'response.data.error.message') === 'ACCOUNT_INACTIVATED')) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new ApplicationError(AuthService.Error.ACCOUNT_INACTIVATED);\n\n              case 15:\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n\n      function loginWithEmail(_x) {\n        return _loginWithEmail.apply(this, arguments);\n      }\n\n      return loginWithEmail;\n    }()\n  }, {\n    key: \"getLoginUser\",\n    value: function () {\n      var _getLoginUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.restConnector.get('/users/me?filter={\"include\":\"roles\"}');\n\n              case 3:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", resp.data);\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      function getLoginUser() {\n        return _getLoginUser.apply(this, arguments);\n      }\n\n      return getLoginUser;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.restConnector.post('/users/logout', {});\n\n              case 3:\n                _context3.next = 8;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.warn('Failed to call logout api, but cookie in browser will be cleared so user is still logged out', _context3.t0);\n\n              case 8:\n                this.restConnector.removeAccessToken();\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"sendResetPasswordEmail\",\n    value: function () {\n      var _sendResetPasswordEmail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(email) {\n        var errResp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.restConnector.post('/users/reset', {\n                  email: email\n                });\n\n              case 3:\n                _context4.next = 14;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n                errResp = _.get(_context4.t0, 'response.data.error', _context4.t0);\n                _context4.t1 = errResp.code;\n                _context4.next = _context4.t1 === 'EMAIL_NOT_FOUND' ? 11 : _context4.t1 === 'EMAIL_REQUIRED' ? 12 : 13;\n                break;\n\n              case 11:\n                throw new ApplicationError(AuthService.Error.EMAIL_NOT_FOUND);\n\n              case 12:\n                throw new ValidationError({\n                  email: [ErrorCode.REQUIRED]\n                });\n\n              case 13:\n                throw _context4.t0;\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 5]]);\n      }));\n\n      function sendResetPasswordEmail(_x2) {\n        return _sendResetPasswordEmail.apply(this, arguments);\n      }\n\n      return sendResetPasswordEmail;\n    }()\n  }, {\n    key: \"updateAccountInfo\",\n    value: function () {\n      var _updateAccountInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(_ref3) {\n        var name, email, preferredLanguage, errResp;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                name = _ref3.name, email = _ref3.email, preferredLanguage = _ref3.preferredLanguage;\n                _context5.prev = 1;\n                _context5.next = 4;\n                return this.restConnector.patch(\"/users/me\", {\n                  name: name,\n                  email: email,\n                  preferredLanguage: preferredLanguage\n                });\n\n              case 4:\n                _context5.next = 15;\n                break;\n\n              case 6:\n                _context5.prev = 6;\n                _context5.t0 = _context5[\"catch\"](1);\n                errResp = _.get(_context5.t0, 'response.data.error', _context5.t0);\n                _context5.t1 = errResp.name;\n                _context5.next = _context5.t1 === 'ValidationError' ? 12 : 14;\n                break;\n\n              case 12:\n                if (!(_.get(errResp, 'details.codes.email[0]') === 'uniqueness')) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                throw new ValidationError({\n                  email: [ErrorCode.EMAIL_EXISTED]\n                });\n\n              case 14:\n                throw _context5.t0;\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 6]]);\n      }));\n\n      function updateAccountInfo(_x3) {\n        return _updateAccountInfo.apply(this, arguments);\n      }\n\n      return updateAccountInfo;\n    }()\n  }, {\n    key: \"updatePassword\",\n    value: function () {\n      var _updatePassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref4) {\n        var oldPassword, newPassword, err;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                oldPassword = _ref4.oldPassword, newPassword = _ref4.newPassword;\n                _context6.prev = 1;\n                _context6.next = 4;\n                return this.restConnector.post('/users/change-password', {\n                  oldPassword: oldPassword,\n                  newPassword: newPassword\n                });\n\n              case 4:\n                _context6.next = 12;\n                break;\n\n              case 6:\n                _context6.prev = 6;\n                _context6.t0 = _context6[\"catch\"](1);\n                err = _.get(_context6.t0, 'response.data.error', _context6.t0);\n\n                if (!(err.code === 'INVALID_PASSWORD' || err.message === 'oldPassword is a required argument')) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                throw new ApplicationError(AuthService.Error.INVALID_CURRENT_PASSWORD);\n\n              case 11:\n                throw err;\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 6]]);\n      }));\n\n      function updatePassword(_x4) {\n        return _updatePassword.apply(this, arguments);\n      }\n\n      return updatePassword;\n    }()\n  }, {\n    key: \"setNewPassword\",\n    value: function () {\n      var _setNewPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(_ref5, accessToken) {\n        var userId, newPassword, err;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                userId = _ref5.userId, newPassword = _ref5.newPassword;\n                _context7.prev = 1;\n                _context7.next = 4;\n                return this.restConnector.post(\"/users/reset-password?access_token=\".concat(accessToken), {\n                  id: userId,\n                  newPassword: newPassword\n                });\n\n              case 4:\n                _context7.next = 14;\n                break;\n\n              case 6:\n                _context7.prev = 6;\n                _context7.t0 = _context7[\"catch\"](1);\n                err = _.get(_context7.t0, 'response.data.error', _context7.t0);\n                _context7.t1 = err.code;\n                _context7.next = _context7.t1 === 'INVALID_PASSWORD' ? 12 : 13;\n                break;\n\n              case 12:\n                throw new ValidationError(AuthService.Error.INVALID_CURRENT_PASSWORD);\n\n              case 13:\n                throw err;\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[1, 6]]);\n      }));\n\n      function setNewPassword(_x5, _x6) {\n        return _setNewPassword.apply(this, arguments);\n      }\n\n      return setNewPassword;\n    }()\n  }, {\n    key: \"updateAvatar\",\n    value: function () {\n      var _updateAvatar = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(avatar) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.restConnector.patch(\"/users/me\", {\n                  avatar: avatar\n                }).then(function (resp) {\n                  return resp.data;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function updateAvatar(_x7) {\n        return _updateAvatar.apply(this, arguments);\n      }\n\n      return updateAvatar;\n    }()\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      this.restConnector.setAccessToken(accessToken);\n    }\n  }]);\n\n  return AuthGateway;\n}();\n\nexport { AuthGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/AuthGateway.js"],"names":["_","ValidationError","ErrorCode","AuthService","IAuthGateway","ApplicationError","AuthGateway","restConnector","email","password","post","getLoginUser","get","Error","LOGIN_FAILED","ACCOUNT_INACTIVATED","resp","data","console","warn","removeAccessToken","errResp","code","EMAIL_NOT_FOUND","REQUIRED","name","preferredLanguage","patch","EMAIL_EXISTED","oldPassword","newPassword","err","message","INVALID_CURRENT_PASSWORD","accessToken","userId","id","avatar","then","setAccessToken"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport ValidationError, { ErrorCode } from '../errors/ValidationError'\nimport AuthService, { IAuthGateway } from '../services/AuthService'\nimport ApplicationError from '../errors/ApplicationError'\n\nexport default class AuthGateway implements IAuthGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async loginWithEmail ({ email, password }) {\n    try {\n      await this.restConnector.post('/users/login', { email, password })\n      return this.getLoginUser()\n    } catch (e) {\n      switch (_.get(e, 'response.data.error.code')) {\n        case 'USERNAME_EMAIL_REQUIRED':\n        case 'LOGIN_FAILED': {\n          throw new ApplicationError(AuthService.Error.LOGIN_FAILED)\n        }\n      }\n      if (_.get(e, 'response.data.error.message') === 'ACCOUNT_INACTIVATED') {\n        throw new ApplicationError(AuthService.Error.ACCOUNT_INACTIVATED)\n      }\n      throw e\n    }\n  }\n\n  async getLoginUser () {\n    try {\n      const resp = await this.restConnector.get(\n        '/users/me?filter={\"include\":\"roles\"}'\n      )\n      return resp.data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async logout () {\n    try {\n      await this.restConnector.post('/users/logout', {})\n    } catch (e) {\n      console.warn(\n        'Failed to call logout api, but cookie in browser will be cleared so user is still logged out',\n        e\n      )\n    }\n    this.restConnector.removeAccessToken()\n  }\n\n  async sendResetPasswordEmail (email) {\n    try {\n      await this.restConnector.post('/users/reset', { email })\n    } catch (e) {\n      const errResp = _.get(e, 'response.data.error', e)\n      switch (errResp.code) {\n        case 'EMAIL_NOT_FOUND':\n          throw new ApplicationError(AuthService.Error.EMAIL_NOT_FOUND)\n        case 'EMAIL_REQUIRED':\n          throw new ValidationError({ email: [ErrorCode.REQUIRED] })\n        default:\n          throw e\n      }\n    }\n  }\n\n  async updateAccountInfo ({ name, email, preferredLanguage }) {\n    try {\n      await this.restConnector.patch(`/users/me`, {\n        name,\n        email,\n        preferredLanguage\n      })\n    } catch (e) {\n      const errResp = _.get(e, 'response.data.error', e)\n      switch (errResp.name) {\n        case 'ValidationError': {\n          if (_.get(errResp, 'details.codes.email[0]') === 'uniqueness') {\n            throw new ValidationError({ email: [ErrorCode.EMAIL_EXISTED] })\n          }\n        }\n      }\n      throw e\n    }\n  }\n\n  async updatePassword ({ oldPassword, newPassword }) {\n    try {\n      await this.restConnector.post('/users/change-password', {\n        oldPassword,\n        newPassword\n      })\n    } catch (e) {\n      const err = _.get(e, 'response.data.error', e)\n      if (\n        err.code === 'INVALID_PASSWORD' ||\n        err.message === 'oldPassword is a required argument'\n      ) {\n        throw new ApplicationError(AuthService.Error.INVALID_CURRENT_PASSWORD)\n      }\n\n      throw err\n    }\n  }\n\n  async setNewPassword ({ userId, newPassword }, accessToken) {\n    try {\n      await this.restConnector.post(\n        `/users/reset-password?access_token=${accessToken}`,\n        { id: userId, newPassword }\n      )\n    } catch (e) {\n      const err = _.get(e, 'response.data.error', e)\n\n      switch (err.code) {\n        case 'INVALID_PASSWORD':\n          throw new ValidationError(AuthService.Error.INVALID_CURRENT_PASSWORD)\n        default:\n          throw err\n      }\n    }\n  }\n\n  async updateAvatar (avatar) {\n    return this.restConnector\n      .patch(`/users/me`, { avatar })\n      .then(resp => resp.data)\n  }\n\n  setAccessToken (accessToken) {\n    this.restConnector.setAccessToken(accessToken)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}