{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport React from 'react';\nimport Head from 'next/head';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport toastr from 'toastr';\nimport querystring from 'qs';\nimport userOnly from '../../hocs/userOnly';\nimport ReactTable from 'react-table';\nimport { Router } from '../../../common/routes';\nimport { userService, transactionService } from '../../services'; // import { getNotificationRole } from '../../../common/view-models/Notification'\n// import { TransactionRole } from '../../../common/models/Transaction'\n\nimport { isCoordinator } from '../../../common/models/User';\nimport Role from '../../../common/models/Role';\nimport Error from 'next/error';\nimport CloseTransactionModal from '../../component/Transaction/CloseTransactionModal';\nimport { TransactionRole } from '../../../common/models/Transaction';\nvar DEFAULT_SEARCH_CRITERIA = {\n  page: 0,\n  pageSize: 10,\n  filtered: [],\n  sorted: [{\n    id: 'createdAt',\n    desc: 'true'\n  }]\n};\n\nvar AgentsTransactions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AgentsTransactions, _React$Component);\n\n  _createClass(AgentsTransactions, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var id, user;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = ctx.query.idAgent;\n                _context.next = 3;\n                return userService.getUserFromId(id);\n\n              case 3:\n                user = _context.sent;\n                user.role = user.roles.length > 0 && user.roles[0].name || Role.USER;\n                return _context.abrupt(\"return\", {\n                  headerText: \"Agent's Transactions\",\n                  toggleTimeline: false,\n                  user: user\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function AgentsTransactions(props) {\n    var _this;\n\n    _classCallCheck(this, AgentsTransactions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AgentsTransactions).call(this, props)); // Parse querystring from browser URL to search criteria compatible with react-table\n\n    _defineProperty(_assertThisInitialized(_this), \"getNotificationRole\", function (data) {\n      switch (data) {\n        case TransactionRole.BUYING_AGENT:\n          return 'Buyer’s Agent';\n\n        case TransactionRole.SELLER_AGENT:\n          return 'Seller’s Agent';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_fetchData\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref) {\n        var _ref$pageSize, pageSize, _ref$page, page, _ref$sorted, sorted, _ref$filtered, filtered, where, order, transactions, countedTransaction, total, pages, newState, pagePath;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref$pageSize = _ref.pageSize, pageSize = _ref$pageSize === void 0 ? DEFAULT_SEARCH_CRITERIA.pageSize : _ref$pageSize, _ref$page = _ref.page, page = _ref$page === void 0 ? DEFAULT_SEARCH_CRITERIA.page : _ref$page, _ref$sorted = _ref.sorted, sorted = _ref$sorted === void 0 ? DEFAULT_SEARCH_CRITERIA.sorted : _ref$sorted, _ref$filtered = _ref.filtered, filtered = _ref$filtered === void 0 ? DEFAULT_SEARCH_CRITERIA.filtered : _ref$filtered;\n\n                _this.setState({\n                  loading: true\n                }); // Convert react-table search criteria into value that service can understand\n\n\n                where = filtered.reduce(function (acc, val) {\n                  switch (val.id) {\n                    case 'id':\n                      {\n                        acc[val.id] = val.value;\n                        break;\n                      }\n\n                    default:\n                      {\n                        acc[val.id] = {\n                          regexp: \"/\".concat(val.value, \"/i\")\n                        };\n                      }\n                  }\n\n                  return acc;\n                }, {});\n                order = _.get(sorted, '[0].id', 'createdAt') + \" \".concat(_.get(sorted, '[0].desc') ? 'desc' : 'asc');\n                _context2.prev = 4;\n                _context2.next = 7;\n                return userService.getTransactionInfo({\n                  userId: _this.state.user.id,\n                  where: where,\n                  skip: pageSize * page,\n                  order: order,\n                  limit: pageSize\n                });\n\n              case 7:\n                transactions = _context2.sent;\n                _context2.next = 10;\n                return userService.getTransactionInfo({\n                  userId: _this.state.user.id,\n                  where: where\n                });\n\n              case 10:\n                countedTransaction = _context2.sent;\n                total = countedTransaction.length;\n                pages = Math.ceil(total / pageSize); // Show the last page if user intentionally hard-code the page value on browser URL to be very large\n\n                newState = {\n                  pages: pages,\n                  transactions: transactions\n                };\n\n                if (page > pages - 1) {\n                  newState.searchCriteria = _objectSpread({}, _this.state.searchCriteria, {\n                    page: Math.max(0, pages - 1) // Avoid edge case when pages = 0 resulting in -1 value, should be at least 0\n\n                  });\n                }\n\n                _this.setState(newState); // Persist search criteria to browser URL\n\n\n                pagePath = \"/manage-agents/\".concat(_this.state.user.id, \"/agent-transactions?\").concat(querystring.stringify({\n                  pageSize: pageSize,\n                  page: page,\n                  sorted: sorted,\n                  filtered: filtered\n                }));\n                Router.replaceRoute(pagePath);\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](4);\n                toastr.error(_context2.t0.message);\n\n              case 23:\n                _context2.prev = 23;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context2.finish(23);\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 20, 23, 26]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateSearchCriteria\", function (key) {\n      return function (value) {\n        _this.setState({\n          searchCriteria: _objectSpread({}, _this.state.searchCriteria, _defineProperty({}, key, value))\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_toggleCashBalance\", function () {\n      _this.setState({\n        toggleCashBalance: !_this.state.toggleCashBalance\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_closeTransaction\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(transactionId) {\n        var _querystring$parse, _querystring$parse$so, sorted, _querystring$parse$pa, pageSize, _querystring$parse$pa2, page, _querystring$parse$fi, filtered;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _querystring$parse = querystring.parse(_this.props.router.query), _querystring$parse$so = _querystring$parse.sorted, sorted = _querystring$parse$so === void 0 ? DEFAULT_SEARCH_CRITERIA.sorted : _querystring$parse$so, _querystring$parse$pa = _querystring$parse.pageSize, pageSize = _querystring$parse$pa === void 0 ? DEFAULT_SEARCH_CRITERIA.pageSize : _querystring$parse$pa, _querystring$parse$pa2 = _querystring$parse.page, page = _querystring$parse$pa2 === void 0 ? DEFAULT_SEARCH_CRITERIA.page : _querystring$parse$pa2, _querystring$parse$fi = _querystring$parse.filtered, filtered = _querystring$parse$fi === void 0 ? DEFAULT_SEARCH_CRITERIA.filtered : _querystring$parse$fi;\n                sorted.forEach(function (sort) {\n                  return sort.desc = sort.desc === 'true';\n                });\n                _context3.next = 4;\n                return transactionService.closeTransaction(transactionId);\n\n              case 4:\n                toastr.success('Saved');\n                _context3.next = 7;\n                return _this._fetchData({\n                  pageSize: pageSize,\n                  page: page,\n                  sorted: sorted,\n                  filtered: filtered\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    var _querystring$parse2 = querystring.parse(props.router.query),\n        _querystring$parse2$s = _querystring$parse2.sorted,\n        _sorted = _querystring$parse2$s === void 0 ? DEFAULT_SEARCH_CRITERIA.sorted : _querystring$parse2$s,\n        _querystring$parse2$p = _querystring$parse2.pageSize,\n        _pageSize = _querystring$parse2$p === void 0 ? DEFAULT_SEARCH_CRITERIA.pageSize : _querystring$parse2$p,\n        _querystring$parse2$p2 = _querystring$parse2.page,\n        _page = _querystring$parse2$p2 === void 0 ? DEFAULT_SEARCH_CRITERIA.page : _querystring$parse2$p2,\n        _querystring$parse2$f = _querystring$parse2.filtered,\n        _filtered = _querystring$parse2$f === void 0 ? DEFAULT_SEARCH_CRITERIA.filtered : _querystring$parse2$f;\n\n    _sorted.forEach(function (sort) {\n      return sort.desc = sort.desc === 'true';\n    });\n\n    _this.state = {\n      toggleCashBalance: false,\n      selectedTransactionId: null,\n      total: 0,\n      pages: 0,\n      user: props.user,\n      transactions: [],\n      searchCriteria: {\n        pageSize: _parseInt(_pageSize),\n        page: _parseInt(_page),\n        sorted: _sorted,\n        filtered: _filtered\n      },\n      loading: false,\n      transactionAgents: []\n    };\n    _this._debouncedFetchData = _.debounce(_this._fetchData, 200);\n    return _this;\n  }\n\n  _createClass(AgentsTransactions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          transactions = _this$state.transactions,\n          user = _this$state.user,\n          pages = _this$state.pages,\n          loading = _this$state.loading,\n          searchCriteria = _this$state.searchCriteria;\n      var page = searchCriteria.page,\n          pageSize = searchCriteria.pageSize,\n          filtered = searchCriteria.filtered,\n          sorted = searchCriteria.sorted;\n      var _this$props = this.props,\n          t = _this$props.t,\n          currentUser = _this$props.currentUser;\n\n      if (currentUser.roles[0].name !== Role.COORDINATOR) {\n        return React.createElement(Error, {\n          statusCode: 404\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"box-main\"\n      }, React.createElement(Head, null, React.createElement(\"title\", null, \"Agents transactions\")), React.createElement(\"section\", {\n        className: \"content\"\n      }, React.createElement(\"div\", {\n        className: \"\"\n      }, React.createElement(\"div\", {\n        className: \"card shadow-sm rounded\"\n      }, React.createElement(\"div\", {\n        className: \"card-header\"\n      }, React.createElement(\"span\", {\n        className: \"card-title\",\n        style: {\n          fontSize: '1.25rem'\n        }\n      }, \"Agents - \".concat(user.firstName.concat(' ', user.lastName))), React.createElement(\"div\", {\n        className: \"card-tools\"\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary mr-2\",\n        onClick: function onClick() {\n          return _this2.setState({\n            searchCriteria: DEFAULT_SEARCH_CRITERIA\n          });\n        }\n      }, t('admin:clearSearch')))), React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(\"section\", {\n        className: \"content\"\n      }, React.createElement(\"div\", {\n        className: \"card\"\n      }, React.createElement(ReactTable, {\n        data: transactions,\n        columns: [{\n          Header: 'Address',\n          accessor: 'address',\n          sortable: false\n        }, {\n          Header: 'Transaction Type',\n          accessor: 'transactionType',\n          sortable: false,\n          Cell: function Cell(props) {\n            return React.createElement(\"div\", null, props.value && props.value.replace(/-/g, ' '));\n          }\n        }, {\n          Header: 'Transaction Status',\n          accessor: 'transactionTypeStatus',\n          sortable: false,\n          Cell: function Cell(props) {\n            return React.createElement(\"div\", null, props.value && props.value.replace(/-/g, ' '));\n          }\n        }, {\n          Header: 'Status',\n          accessor: 'status',\n          sortable: false,\n          filterable: false\n        }, {\n          Header: 'Party',\n          accessor: 'party',\n          sortable: false,\n          filterable: false,\n          Cell: function Cell(row) {\n            switch (row.value) {\n              case TransactionRole.BUYING_AGENT:\n                return React.createElement(\"span\", {\n                  className: \"badge badge-info\"\n                }, _this2.getNotificationRole(TransactionRole.BUYING_AGENT));\n\n              case TransactionRole.SELLER_AGENT:\n                return React.createElement(\"span\", {\n                  className: \"badge badge-danger\"\n                }, _this2.getNotificationRole(TransactionRole.SELLER_AGENT));\n            }\n          }\n        }, {\n          Header: 'Date of Opening',\n          accessor: 'createdAt',\n          filterable: false,\n          sortable: false,\n          Cell: function Cell(props) {\n            return React.createElement(\"div\", null, props.value && moment(props.value).format('MM/DD/YYYY'));\n          }\n        }, {\n          Header: 'Date of Closing',\n          accessor: 'transactionCommission.dateClosing',\n          filterable: false,\n          sortable: false,\n          Cell: function Cell(props) {\n            return React.createElement(\"div\", null, props.value && moment(props.value).format('MM/DD/YYYY'));\n          }\n        }, {\n          columns: [{\n            Header: function Header() {\n              return React.createElement(\"span\", null, \"Actions\");\n            },\n            width: 100,\n            accessor: 'id',\n            sortable: false,\n            filterable: false,\n            Cell: function Cell(props) {\n              return React.createElement(\"div\", {\n                className: \"text-center\"\n              }, React.createElement(\"button\", {\n                className: \"btn btn-sm btn-info \",\n                \"data-toggle\": \"tooltip\",\n                title: \"Close transaction\",\n                onClick:\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee4() {\n                  var transactionAgents;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          if (!isCoordinator(_this2.props.currentUser)) {\n                            _context4.next = 5;\n                            break;\n                          }\n\n                          _context4.next = 3;\n                          return transactionService.getAllAgents(props.value);\n\n                        case 3:\n                          transactionAgents = _context4.sent;\n\n                          if (transactionAgents.length === 0) {\n                            toastr.error('Nead at least 1 Link Agent to close this transaction!');\n                          } else {\n                            _this2.setState({\n                              toggleCashBalance: !_this2.state.toggleCashBalance,\n                              selectedTransactionId: props.value,\n                              transactionAgents: transactionAgents\n                            });\n                          }\n\n                        case 5:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }))\n              }, React.createElement(\"i\", {\n                className: \"fa fa-edit\"\n              })));\n            }\n          }]\n        }],\n        filterable: true,\n        manual: true,\n        onFetchData: this._debouncedFetchData,\n        pageSize: pageSize,\n        sorted: sorted,\n        page: page,\n        filtered: filtered,\n        onPageChange: this._updateSearchCriteria('page'),\n        onPageSizeChange: this._updateSearchCriteria('pageSize'),\n        onSortedChange: this._updateSearchCriteria('sorted'),\n        onFilteredChange: this._updateSearchCriteria('filtered'),\n        loading: loading,\n        pages: pages,\n        className: \"-striped -highlight\"\n      }))), this.state.toggleCashBalance && React.createElement(CloseTransactionModal, {\n        isShow: this.state.toggleCashBalance,\n        toggle: this._toggleCashBalance,\n        transactionId: this.state.selectedTransactionId,\n        currentUserId: this.props.currentUser.id,\n        transactionAgents: this.state.transactionAgents,\n        refetchData: function refetchData() {\n          return _this2._fetchData;\n        }\n      }))))));\n    }\n    /**\n     * Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n     * You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n     * @param state\n     * @return {Promise.<void>}\n     * @private\n     */\n\n  }]);\n\n  return AgentsTransactions;\n}(React.Component);\n\nexport default userOnly(AgentsTransactions);","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/pages/ManageAgents/AgentsTransactions.js"],"names":["React","Head","_","moment","toastr","querystring","userOnly","ReactTable","Router","userService","transactionService","isCoordinator","Role","Error","CloseTransactionModal","TransactionRole","DEFAULT_SEARCH_CRITERIA","page","pageSize","filtered","sorted","id","desc","AgentsTransactions","ctx","query","idAgent","getUserFromId","user","role","roles","length","name","USER","headerText","toggleTimeline","props","data","BUYING_AGENT","SELLER_AGENT","setState","loading","where","reduce","acc","val","value","regexp","order","get","getTransactionInfo","userId","state","skip","limit","transactions","countedTransaction","total","pages","Math","ceil","newState","searchCriteria","max","pagePath","stringify","replaceRoute","error","message","key","toggleCashBalance","transactionId","parse","router","forEach","sort","closeTransaction","success","_fetchData","selectedTransactionId","transactionAgents","_debouncedFetchData","debounce","t","currentUser","COORDINATOR","fontSize","firstName","concat","lastName","Header","accessor","sortable","Cell","replace","filterable","row","getNotificationRole","format","columns","width","getAllAgents","_updateSearchCriteria","_toggleCashBalance","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport toastr from 'toastr'\nimport querystring from 'qs'\nimport userOnly from '../../hocs/userOnly'\nimport ReactTable from 'react-table'\nimport { Router } from '../../../common/routes'\nimport { userService, transactionService } from '../../services'\n// import { getNotificationRole } from '../../../common/view-models/Notification'\n// import { TransactionRole } from '../../../common/models/Transaction'\nimport { isCoordinator } from '../../../common/models/User'\nimport Role from '../../../common/models/Role'\nimport Error from 'next/error'\nimport CloseTransactionModal from '../../component/Transaction/CloseTransactionModal'\nimport { TransactionRole } from '../../../common/models/Transaction'\n\nconst DEFAULT_SEARCH_CRITERIA = {\n  page: 0,\n  pageSize: 10,\n  filtered: [],\n  sorted: [{ id: 'createdAt', desc: 'true' }]\n}\n\nclass AgentsTransactions extends React.Component {\n  static async getInitialProps (ctx) {\n    const id = ctx.query.idAgent\n    const user = await userService.getUserFromId(id)\n    user.role = (user.roles.length > 0 && user.roles[0].name) || Role.USER\n    return {\n      headerText: \"Agent's Transactions\",\n      toggleTimeline: false,\n      user\n    }\n  }\n\n  constructor (props) {\n    super(props)\n    // Parse querystring from browser URL to search criteria compatible with react-table\n    const {\n      sorted = DEFAULT_SEARCH_CRITERIA.sorted,\n      pageSize = DEFAULT_SEARCH_CRITERIA.pageSize,\n      page = DEFAULT_SEARCH_CRITERIA.page,\n      filtered = DEFAULT_SEARCH_CRITERIA.filtered\n    } = querystring.parse(props.router.query)\n    sorted.forEach(sort => (sort.desc = sort.desc === 'true'))\n\n    this.state = {\n      toggleCashBalance: false,\n      selectedTransactionId: null,\n      total: 0,\n      pages: 0,\n      user: props.user,\n      transactions: [],\n      searchCriteria: {\n        pageSize: parseInt(pageSize),\n        page: parseInt(page),\n        sorted,\n        filtered\n      },\n      loading: false,\n      transactionAgents: []\n    }\n    this._debouncedFetchData = _.debounce(this._fetchData, 200)\n  }\n\n  getNotificationRole = data => {\n    switch (data) {\n      case TransactionRole.BUYING_AGENT:\n        return 'Buyer’s Agent'\n      case TransactionRole.SELLER_AGENT:\n        return 'Seller’s Agent'\n      default:\n        break\n    }\n  }\n\n  render () {\n    const { transactions, user, pages, loading, searchCriteria } = this.state\n    const { page, pageSize, filtered, sorted } = searchCriteria\n    const { t, currentUser } = this.props\n    if (currentUser.roles[0].name !== Role.COORDINATOR) {\n      return <Error statusCode={404} />\n    }\n    return (\n      <div className='box-main'>\n        <Head>\n          <title>Agents transactions</title>\n        </Head>\n        <section className='content'>\n          <div className=''>\n            <div className='card shadow-sm rounded'>\n              <div className='card-header'>\n                <span className='card-title' style={{ fontSize: '1.25rem' }}>\n                  {`Agents - ${user.firstName.concat(' ', user.lastName)}`}\n                </span>\n                <div className='card-tools'>\n                  <button\n                    type='button'\n                    className='btn btn-secondary mr-2'\n                    onClick={() =>\n                      this.setState({ searchCriteria: DEFAULT_SEARCH_CRITERIA })\n                    }\n                  >\n                    {t('admin:clearSearch')}\n                  </button>\n                </div>\n              </div>\n              <div className='card-body'>\n                <section className='content'>\n                  <div className='card'>\n                    <ReactTable\n                      data={transactions}\n                      columns={[\n                        {\n                          Header: 'Address',\n                          accessor: 'address',\n                          sortable: false\n                        },\n                        {\n                          Header: 'Transaction Type',\n                          accessor: 'transactionType',\n                          sortable: false,\n                          Cell: props => (\n                            <div>\n                              {props.value && props.value.replace(/-/g, ' ')}\n                            </div>\n                          )\n                        },\n                        {\n                          Header: 'Transaction Status',\n                          accessor: 'transactionTypeStatus',\n                          sortable: false,\n                          Cell: props => (\n                            <div>\n                              {props.value && props.value.replace(/-/g, ' ')}\n                            </div>\n                          )\n                        },\n                        {\n                          Header: 'Status',\n                          accessor: 'status',\n                          sortable: false,\n                          filterable: false\n                        },\n                        {\n                          Header: 'Party',\n                          accessor: 'party',\n                          sortable: false,\n                          filterable: false,\n                          Cell: row => {\n                            switch (row.value) {\n                              case TransactionRole.BUYING_AGENT:\n                                return (\n                                  <span className='badge badge-info'>\n                                    {this.getNotificationRole(\n                                      TransactionRole.BUYING_AGENT\n                                    )}\n                                  </span>\n                                )\n                              case TransactionRole.SELLER_AGENT:\n                                return (\n                                  <span className='badge badge-danger'>\n                                    {this.getNotificationRole(\n                                      TransactionRole.SELLER_AGENT\n                                    )}\n                                  </span>\n                                )\n                            }\n                          }\n                        },\n                        {\n                          Header: 'Date of Opening',\n                          accessor: 'createdAt',\n                          filterable: false,\n                          sortable: false,\n                          Cell: props => (\n                            <div>\n                              {props.value &&\n                                moment(props.value).format('MM/DD/YYYY')}\n                            </div>\n                          )\n                        },\n                        {\n                          Header: 'Date of Closing',\n                          accessor: 'transactionCommission.dateClosing',\n                          filterable: false,\n                          sortable: false,\n                          Cell: props => (\n                            <div>\n                              {props.value &&\n                                moment(props.value).format('MM/DD/YYYY')}\n                            </div>\n                          )\n                        },\n                        {\n                          columns: [\n                            {\n                              Header: () => <span>Actions</span>,\n                              width: 100,\n                              accessor: 'id',\n                              sortable: false,\n                              filterable: false,\n                              Cell: props => (\n                                <div className='text-center'>\n                                  {/* <button className='btn btn-sm btn-success '>\n                                    <i className='fa fa-eye' />\n                                  </button>\n                                  &nbsp; */}\n                                  <button\n                                    className='btn btn-sm btn-info '\n                                    data-toggle='tooltip'\n                                    title='Close transaction'\n                                    onClick={async () => {\n                                      if (\n                                        isCoordinator(this.props.currentUser)\n                                      ) {\n                                        const transactionAgents = await transactionService.getAllAgents(\n                                          props.value\n                                        )\n                                        if (transactionAgents.length === 0) {\n                                          toastr.error(\n                                            'Nead at least 1 Link Agent to close this transaction!'\n                                          )\n                                        } else {\n                                          this.setState({\n                                            toggleCashBalance: !this.state\n                                              .toggleCashBalance,\n                                            selectedTransactionId: props.value,\n                                            transactionAgents\n                                          })\n                                        }\n                                      }\n                                    }}\n                                  >\n                                    <i className='fa fa-edit' />\n                                  </button>\n                                </div>\n                              )\n                            }\n                          ]\n                        }\n                      ]}\n                      filterable\n                      manual\n                      onFetchData={this._debouncedFetchData}\n                      pageSize={pageSize}\n                      sorted={sorted}\n                      page={page}\n                      filtered={filtered}\n                      onPageChange={this._updateSearchCriteria('page')}\n                      onPageSizeChange={this._updateSearchCriteria('pageSize')}\n                      onSortedChange={this._updateSearchCriteria('sorted')}\n                      onFilteredChange={this._updateSearchCriteria('filtered')}\n                      loading={loading}\n                      pages={pages}\n                      className='-striped -highlight'\n                    />\n                  </div>\n                </section>\n                {this.state.toggleCashBalance && (\n                  <CloseTransactionModal\n                    isShow={this.state.toggleCashBalance}\n                    toggle={this._toggleCashBalance}\n                    transactionId={this.state.selectedTransactionId}\n                    currentUserId={this.props.currentUser.id}\n                    transactionAgents={this.state.transactionAgents}\n                    refetchData={() => this._fetchData}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    )\n  }\n\n  /**\n   * Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n   * You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n   * @param state\n   * @return {Promise.<void>}\n   * @private\n   */\n  _fetchData = async ({\n    pageSize = DEFAULT_SEARCH_CRITERIA.pageSize,\n    page = DEFAULT_SEARCH_CRITERIA.page,\n    sorted = DEFAULT_SEARCH_CRITERIA.sorted,\n    filtered = DEFAULT_SEARCH_CRITERIA.filtered\n  }) => {\n    this.setState({ loading: true })\n\n    // Convert react-table search criteria into value that service can understand\n    const where = filtered.reduce((acc, val) => {\n      switch (val.id) {\n        case 'id': {\n          acc[val.id] = val.value\n          break\n        }\n        default: {\n          acc[val.id] = { regexp: `/${val.value}/i` }\n        }\n      }\n      return acc\n    }, {})\n\n    const order =\n      _.get(sorted, '[0].id', 'createdAt') +\n      ` ${_.get(sorted, '[0].desc') ? 'desc' : 'asc'}`\n\n    try {\n      const transactions = await userService.getTransactionInfo({\n        userId: this.state.user.id,\n        where,\n        skip: pageSize * page,\n        order,\n        limit: pageSize\n      })\n      const countedTransaction = await userService.getTransactionInfo({\n        userId: this.state.user.id,\n        where\n      })\n      const total = countedTransaction.length\n      const pages = Math.ceil(total / pageSize)\n      // Show the last page if user intentionally hard-code the page value on browser URL to be very large\n      const newState = { pages, transactions }\n      if (page > pages - 1) {\n        newState.searchCriteria = {\n          ...this.state.searchCriteria,\n          page: Math.max(0, pages - 1) // Avoid edge case when pages = 0 resulting in -1 value, should be at least 0\n        }\n      }\n      this.setState(newState)\n      // Persist search criteria to browser URL\n      const pagePath = `/manage-agents/${\n        this.state.user.id\n      }/agent-transactions?${querystring.stringify({\n        pageSize,\n        page,\n        sorted,\n        filtered\n      })}`\n      Router.replaceRoute(pagePath)\n    } catch (e) {\n      toastr.error(e.message)\n    } finally {\n      this.setState({ loading: false })\n    }\n  }\n  _updateSearchCriteria = key => value => {\n    this.setState({\n      searchCriteria: {\n        ...this.state.searchCriteria,\n        [key]: value\n      }\n    })\n  }\n\n  _toggleCashBalance = () => {\n    this.setState({\n      toggleCashBalance: !this.state.toggleCashBalance\n    })\n  }\n\n  _closeTransaction = async transactionId => {\n    const {\n      sorted = DEFAULT_SEARCH_CRITERIA.sorted,\n      pageSize = DEFAULT_SEARCH_CRITERIA.pageSize,\n      page = DEFAULT_SEARCH_CRITERIA.page,\n      filtered = DEFAULT_SEARCH_CRITERIA.filtered\n    } = querystring.parse(this.props.router.query)\n    sorted.forEach(sort => (sort.desc = sort.desc === 'true'))\n    await transactionService.closeTransaction(transactionId)\n    toastr.success('Saved')\n    await this._fetchData({ pageSize, page, sorted, filtered })\n  }\n}\n\nexport default userOnly(AgentsTransactions)\n"]},"metadata":{},"sourceType":"module"}