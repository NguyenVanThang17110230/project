{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _filter from 'lodash/filter';\nimport { DocumentActionStatus } from '../../common/models/Transaction';\n\nvar DocumentActionGateway =\n/*#__PURE__*/\nfunction () {\n  function DocumentActionGateway(_ref) {\n    var restConnector = _ref.restConnector,\n        socketConnector = _ref.socketConnector;\n\n    _classCallCheck(this, DocumentActionGateway);\n\n    this.restConnector = restConnector;\n    this.socketConnector = socketConnector;\n  }\n\n  _createClass(DocumentActionGateway, [{\n    key: \"listenToMyDocumentAction\",\n    value: function listenToMyDocumentAction(userId, callback) {\n      this.socketConnector.on(\"documentAction:count:\".concat(userId), function (documentAction) {\n        callback(documentAction);\n      });\n    }\n  }, {\n    key: \"listenToMyDocumentActionAdd\",\n    value: function listenToMyDocumentActionAdd(userId, callback) {\n      this.socketConnector.on(\"documentActionAdd:count:\".concat(userId), function (documentAction) {\n        callback(documentAction);\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restConnector.post(\"/documentActions\", data);\n\n              case 2:\n                resp = _context.sent;\n                return _context.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"bulkCreate\",\n    value: function () {\n      var _bulkCreate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(actions) {\n        var _this = this;\n\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                promises = actions.map(function (action) {\n                  return _this.restConnector.post(\"/documentActions\", action).then(function (resp) {\n                    return resp.data;\n                  });\n                });\n                return _context2.abrupt(\"return\", _Promise.all(promises));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function bulkCreate(_x2) {\n        return _bulkCreate.apply(this, arguments);\n      }\n\n      return bulkCreate;\n    }()\n  }, {\n    key: \"getByDocumentId\",\n    value: function () {\n      var _getByDocumentId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(documentId) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.restConnector.get(\"/documentActions?filter={\\\"where\\\":{\\\"documentId\\\":\\\"\".concat(documentId, \"\\\"}}\"));\n\n              case 2:\n                resp = _context3.sent;\n                return _context3.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getByDocumentId(_x3) {\n        return _getByDocumentId.apply(this, arguments);\n      }\n\n      return getByDocumentId;\n    }()\n  }, {\n    key: \"updateById\",\n    value: function () {\n      var _updateById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id, data) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.restConnector.patch(\"/documentActions/\".concat(id), data);\n\n              case 2:\n                resp = _context4.sent;\n                return _context4.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateById(_x4, _x5) {\n        return _updateById.apply(this, arguments);\n      }\n\n      return updateById;\n    }()\n  }, {\n    key: \"makeDone\",\n    value: function () {\n      var _makeDone = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var body, _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                body = {\n                  status: DocumentActionStatus.DONE\n                };\n                _context5.next = 3;\n                return this.restConnector.patch(\"/documentActions/\".concat(id), body);\n\n              case 3:\n                _ref2 = _context5.sent;\n                data = _ref2.data;\n                return _context5.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function makeDone(_x6) {\n        return _makeDone.apply(this, arguments);\n      }\n\n      return makeDone;\n    }()\n  }, {\n    key: \"getByPartyId\",\n    value: function () {\n      var _getByPartyId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(partyId) {\n        var _ref3, data;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.restConnector.get(\"/documentActions?filter={\\\"where\\\":{\\\"assignedPartyId\\\":\\\"\".concat(partyId, \"\\\"},\\\"order\\\":\\\"updatedAt DESC\\\"}\"));\n\n              case 2:\n                _ref3 = _context6.sent;\n                data = _ref3.data;\n                return _context6.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getByPartyId(_x7) {\n        return _getByPartyId.apply(this, arguments);\n      }\n\n      return getByPartyId;\n    }()\n  }, {\n    key: \"countDocumentActionsByPartyId\",\n    value: function () {\n      var _countDocumentActionsByPartyId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(partyId) {\n        var _ref4, data;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.restConnector.get(\"/documentActions?filter={\\\"where\\\":{\\\"assignedPartyId\\\":\\\"\".concat(partyId, \"\\\",\\\"status\\\":\\\"todo\\\"},\\\"order\\\":\\\"updatedAt DESC\\\"}\"));\n\n              case 2:\n                _ref4 = _context7.sent;\n                data = _ref4.data;\n                return _context7.abrupt(\"return\", data.length);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function countDocumentActionsByPartyId(_x8) {\n        return _countDocumentActionsByPartyId.apply(this, arguments);\n      }\n\n      return countDocumentActionsByPartyId;\n    }()\n  }, {\n    key: \"findByPartyId\",\n    value: function () {\n      var _findByPartyId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(partyId, where) {\n        var filter, _ref5, data;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                filter = {\n                  where: where,\n                  include: 'document',\n                  order: 'updatedAt DESC'\n                };\n                _context8.next = 3;\n                return this.restConnector.get(\"/transactionParties/\".concat(partyId, \"/assignedActions?filter=\").concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref5 = _context8.sent;\n                data = _ref5.data;\n                return _context8.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function findByPartyId(_x9, _x10) {\n        return _findByPartyId.apply(this, arguments);\n      }\n\n      return findByPartyId;\n    }()\n  }, {\n    key: \"updateSignDocumentById\",\n    value: function () {\n      var _updateSignDocumentById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(id, _ref6) {\n        var file, bodyFormData;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                file = _ref6.file;\n                bodyFormData = new FormData();\n                bodyFormData.set('file', file);\n                return _context9.abrupt(\"return\", this.restConnector({\n                  url: \"/documentActions/\".concat(id, \"/sign-document\"),\n                  method: 'patch',\n                  data: bodyFormData,\n                  config: {\n                    headers: {\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }\n                }).then(function (resp) {\n                  return resp.data;\n                }));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function updateSignDocumentById(_x11, _x12) {\n        return _updateSignDocumentById.apply(this, arguments);\n      }\n\n      return updateSignDocumentById;\n    }()\n  }, {\n    key: \"checkDocumentExistEnvelope\",\n    value: function () {\n      var _checkDocumentExistEnvelope = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(documentId) {\n        var filter, _ref7, data;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                filter = {\n                  where: {\n                    documentId: documentId\n                  },\n                  fields: {\n                    envelopeId: true\n                  }\n                };\n                _context10.next = 3;\n                return this.restConnector.get(\"/documentActions?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref7 = _context10.sent;\n                data = _ref7.data;\n                return _context10.abrupt(\"return\", _filter(data, function (o) {\n                  return o.envelopeId;\n                }).length > 0);\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function checkDocumentExistEnvelope(_x13) {\n        return _checkDocumentExistEnvelope.apply(this, arguments);\n      }\n\n      return checkDocumentExistEnvelope;\n    }()\n  }]);\n\n  return DocumentActionGateway;\n}();\n\nexport { DocumentActionGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/DocumentActionGateway.js"],"names":["_filter","DocumentActionStatus","DocumentActionGateway","restConnector","socketConnector","userId","callback","on","documentAction","data","post","resp","actions","promises","map","action","then","all","documentId","get","id","patch","body","status","DONE","partyId","length","where","filter","include","order","file","bodyFormData","FormData","set","url","method","config","headers","fields","envelopeId","o"],"mappings":"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","sourcesContent":["import _filter from 'lodash/filter'\nimport { DocumentActionStatus } from '../../common/models/Transaction'\n\nexport default class DocumentActionGateway {\n  constructor ({ restConnector, socketConnector }) {\n    this.restConnector = restConnector\n    this.socketConnector = socketConnector\n  }\n\n  listenToMyDocumentAction (userId, callback) {\n    this.socketConnector.on(`documentAction:count:${userId}`, function (\n      documentAction\n    ) {\n      callback(documentAction)\n    })\n  }\n\n  listenToMyDocumentActionAdd (userId, callback) {\n    this.socketConnector.on(`documentActionAdd:count:${userId}`, function (\n      documentAction\n    ) {\n      callback(documentAction)\n    })\n  }\n\n  async create (data: {\n    action: string,\n    documentId: string,\n    assignedPartyId: string,\n    creatorId: string\n  }) {\n    const resp = await this.restConnector.post(`/documentActions`, data)\n    return resp.data\n  }\n\n  async bulkCreate (actions) {\n    const promises = actions.map(action => {\n      return this.restConnector\n        .post(`/documentActions`, action)\n        .then(resp => resp.data)\n    })\n    return Promise.all(promises)\n  }\n\n  async getByDocumentId (documentId) {\n    const resp = await this.restConnector.get(\n      `/documentActions?filter={\"where\":{\"documentId\":\"${documentId}\"}}`\n    )\n    return resp.data\n  }\n\n  async updateById (id, data) {\n    const resp = await this.restConnector.patch(`/documentActions/${id}`, data)\n    return resp.data\n  }\n\n  async makeDone (id) {\n    const body = {\n      status: DocumentActionStatus.DONE\n    }\n    const { data } = await this.restConnector.patch(\n      `/documentActions/${id}`,\n      body\n    )\n    return data\n  }\n\n  async getByPartyId (partyId) {\n    const { data } = await this.restConnector.get(\n      `/documentActions?filter={\"where\":{\"assignedPartyId\":\"${partyId}\"},\"order\":\"updatedAt DESC\"}`\n    )\n    return data\n  }\n\n  async countDocumentActionsByPartyId (partyId) {\n    const { data } = await this.restConnector.get(\n      `/documentActions?filter={\"where\":{\"assignedPartyId\":\"${partyId}\",\"status\":\"todo\"},\"order\":\"updatedAt DESC\"}`\n    )\n    return data.length\n  }\n\n  async findByPartyId (partyId, where) {\n    const filter = {\n      where,\n      include: 'document',\n      order: 'updatedAt DESC'\n    }\n\n    const { data } = await this.restConnector.get(\n      `/transactionParties/${partyId}/assignedActions?filter=${JSON.stringify(\n        filter\n      )}`\n    )\n    return data\n  }\n\n  async updateSignDocumentById (id, { file }) {\n    const bodyFormData = new FormData()\n    bodyFormData.set('file', file)\n\n    return this.restConnector({\n      url: `/documentActions/${id}/sign-document`,\n      method: 'patch',\n      data: bodyFormData,\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\n    }).then(resp => resp.data)\n  }\n\n  async checkDocumentExistEnvelope (documentId) {\n    const filter = {\n      where: { documentId },\n      fields: { envelopeId: true }\n    }\n\n    const { data } = await this.restConnector.get(\n      `/documentActions?filter=${JSON.stringify(filter)}`\n    )\n\n    return _filter(data, o => o.envelopeId).length > 0\n  }\n}\n"]},"metadata":{},"sourceType":"module"}