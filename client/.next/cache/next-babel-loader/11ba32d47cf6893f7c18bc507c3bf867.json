{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport { NotificationType } from '../../common/models/Notification';\n\nvar NotificationGateway =\n/*#__PURE__*/\nfunction () {\n  function NotificationGateway(_ref) {\n    var restConnector = _ref.restConnector,\n        socketConnector = _ref.socketConnector;\n\n    _classCallCheck(this, NotificationGateway);\n\n    this.restConnector = restConnector;\n    this.socketConnector = socketConnector;\n  }\n\n  _createClass(NotificationGateway, [{\n    key: \"listenToMyNewNotification\",\n    value: function listenToMyNewNotification(userId, callback) {\n      this.socketConnector.on(\"notifications:new:\".concat(userId), function (notification) {\n        callback(notification);\n      });\n    }\n  }, {\n    key: \"deleteById\",\n    value: function () {\n      var _deleteById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        var _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restConnector[\"delete\"](\"/notifications/\".concat(id));\n\n              case 2:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                return _context.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function deleteById(_x) {\n        return _deleteById.apply(this, arguments);\n      }\n\n      return deleteById;\n    }()\n  }, {\n    key: \"findNotificationWithData\",\n    value: function () {\n      var _findNotificationWithData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(userId) {\n        var types,\n            type,\n            filter,\n            _ref3,\n            data,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                types = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];\n                type = types.map(function (item) {\n                  return {\n                    type: item\n                  };\n                });\n                filter = {\n                  where: {\n                    userId: userId,\n                    or: type\n                  }\n                };\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.restConnector.get(\"/notifications?filter=\".concat(_JSON$stringify(filter)));\n\n              case 6:\n                _ref3 = _context2.sent;\n                data = _ref3.data;\n                return _context2.abrupt(\"return\", data);\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](3);\n                return _context2.abrupt(\"return\", null);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 11]]);\n      }));\n\n      function findNotificationWithData(_x2) {\n        return _findNotificationWithData.apply(this, arguments);\n      }\n\n      return findNotificationWithData;\n    }()\n  }, {\n    key: \"limitFindNotification\",\n    value: function () {\n      var _limitFindNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(userId) {\n        var types,\n            type,\n            filter,\n            _ref4,\n            data,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                types = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : [];\n                type = types.map(function (item) {\n                  return {\n                    type: item\n                  };\n                });\n                filter = {\n                  where: {\n                    userId: userId,\n                    or: type\n                  },\n                  order: 'createdAt DESC',\n                  limit: 50\n                };\n                _context3.prev = 3;\n                _context3.next = 6;\n                return this.restConnector.get(\"/notifications?filter=\".concat(_JSON$stringify(filter)));\n\n              case 6:\n                _ref4 = _context3.sent;\n                data = _ref4.data;\n                return _context3.abrupt(\"return\", data);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](3);\n                return _context3.abrupt(\"return\", null);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 11]]);\n      }));\n\n      function limitFindNotification(_x3) {\n        return _limitFindNotification.apply(this, arguments);\n      }\n\n      return limitFindNotification;\n    }()\n  }, {\n    key: \"countWithData\",\n    value: function () {\n      var _countWithData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(userId) {\n        var types,\n            type,\n            where,\n            _ref5,\n            data,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                types = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : [];\n                type = types.map(function (item) {\n                  return {\n                    type: item\n                  };\n                });\n                where = {\n                  userId: userId,\n                  isRead: false,\n                  or: type\n                };\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.restConnector.get(\"/notifications/count?where=\".concat(_JSON$stringify(where)));\n\n              case 6:\n                _ref5 = _context4.sent;\n                data = _ref5.data;\n                return _context4.abrupt(\"return\", data.count);\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](3);\n                return _context4.abrupt(\"return\", null);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 11]]);\n      }));\n\n      function countWithData(_x4) {\n        return _countWithData.apply(this, arguments);\n      }\n\n      return countWithData;\n    }()\n  }, {\n    key: \"getAllNotificationMessage\",\n    value: function () {\n      var _getAllNotificationMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(userId) {\n        var filter, _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                filter = {\n                  where: {\n                    userId: userId,\n                    isRead: false,\n                    type: NotificationType.NEW_MESSAGE\n                  },\n                  order: 'createdAt DESC'\n                };\n                _context5.next = 3;\n                return this.restConnector.get(\"/notifications?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref6 = _context5.sent;\n                data = _ref6.data;\n                return _context5.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAllNotificationMessage(_x5) {\n        return _getAllNotificationMessage.apply(this, arguments);\n      }\n\n      return getAllNotificationMessage;\n    }()\n  }, {\n    key: \"getAllNotificationNews\",\n    value: function () {\n      var _getAllNotificationNews = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(userId) {\n        var filter, _ref7, data;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                filter = {\n                  where: {\n                    userId: userId,\n                    type: NotificationType.NEW_NEWS\n                  },\n                  order: 'createdAt DESC'\n                };\n                _context6.next = 3;\n                return this.restConnector.get(\"/notifications?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref7 = _context6.sent;\n                data = _ref7.data;\n                return _context6.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAllNotificationNews(_x6) {\n        return _getAllNotificationNews.apply(this, arguments);\n      }\n\n      return getAllNotificationNews;\n    }()\n  }, {\n    key: \"getAllNotificationAssign\",\n    value: function () {\n      var _getAllNotificationAssign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(userId) {\n        var filter, _ref8, data;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                filter = {\n                  where: {\n                    userId: userId,\n                    type: NotificationType.ACTION_ADD_TO_USER\n                  },\n                  order: 'createdAt DESC'\n                };\n                _context7.next = 3;\n                return this.restConnector.get(\"/notifications?filter=\".concat(_JSON$stringify(filter)));\n\n              case 3:\n                _ref8 = _context7.sent;\n                data = _ref8.data;\n                return _context7.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getAllNotificationAssign(_x7) {\n        return _getAllNotificationAssign.apply(this, arguments);\n      }\n\n      return getAllNotificationAssign;\n    }()\n  }, {\n    key: \"setWatchedNotification\",\n    value: function () {\n      var _setWatchedNotification = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(id) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.restConnector.patch(\"/notifications/\".concat(id), {\n                  isRead: true\n                });\n\n              case 2:\n                resp = _context8.sent;\n                return _context8.abrupt(\"return\", resp.data);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function setWatchedNotification(_x8) {\n        return _setWatchedNotification.apply(this, arguments);\n      }\n\n      return setWatchedNotification;\n    }()\n  }]);\n\n  return NotificationGateway;\n}();\n\nexport { NotificationGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/NotificationGateway.js"],"names":["NotificationType","NotificationGateway","restConnector","socketConnector","userId","callback","on","notification","id","data","types","type","map","item","filter","where","or","get","order","limit","isRead","count","NEW_MESSAGE","NEW_NEWS","ACTION_ADD_TO_USER","patch","resp"],"mappings":"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","sourcesContent":["import { NotificationType } from '../../common/models/Notification'\n\nexport default class NotificationGateway {\n  constructor ({ restConnector, socketConnector }) {\n    this.restConnector = restConnector\n    this.socketConnector = socketConnector\n  }\n\n  listenToMyNewNotification (userId, callback) {\n    this.socketConnector.on(`notifications:new:${userId}`, function (\n      notification\n    ) {\n      callback(notification)\n    })\n  }\n\n  async deleteById (id) {\n    const { data } = await this.restConnector.delete(`/notifications/${id}`)\n    return data\n  }\n\n  async findNotificationWithData (userId, types = []) {\n    const type = types.map(item => ({ type: item }))\n    const filter = {\n      where: { userId, or: type }\n    }\n    try {\n      const { data } = await this.restConnector.get(\n        `/notifications?filter=${JSON.stringify(filter)}`\n      )\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async limitFindNotification (userId, types = []) {\n    const type = types.map(item => ({ type: item }))\n    const filter = {\n      where: {\n        userId,\n        or: type\n      },\n      order: 'createdAt DESC',\n      limit: 50\n    }\n    try {\n      const { data } = await this.restConnector.get(\n        `/notifications?filter=${JSON.stringify(filter)}`\n      )\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async countWithData (userId, types = []) {\n    const type = types.map(item => ({ type: item }))\n\n    const where = {\n      userId,\n      isRead: false,\n      or: type\n    }\n    try {\n      const { data } = await this.restConnector.get(\n        `/notifications/count?where=${JSON.stringify(where)}`\n      )\n\n      return data.count\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getAllNotificationMessage (userId) {\n    const filter = {\n      where: {\n        userId,\n        isRead: false,\n        type: NotificationType.NEW_MESSAGE\n      },\n      order: 'createdAt DESC'\n    }\n    const { data } = await this.restConnector.get(\n      `/notifications?filter=${JSON.stringify(filter)}`\n    )\n    return data\n  }\n\n  async getAllNotificationNews (userId) {\n    const filter = {\n      where: {\n        userId,\n        type: NotificationType.NEW_NEWS\n      },\n      order: 'createdAt DESC'\n    }\n    const { data } = await this.restConnector.get(\n      `/notifications?filter=${JSON.stringify(filter)}`\n    )\n    return data\n  }\n\n  async getAllNotificationAssign (userId) {\n    const filter = {\n      where: {\n        userId,\n        type: NotificationType.ACTION_ADD_TO_USER\n      },\n      order: 'createdAt DESC'\n    }\n    const { data } = await this.restConnector.get(\n      `/notifications?filter=${JSON.stringify(filter)}`\n    )\n    return data\n  }\n\n  async setWatchedNotification (id) {\n    const resp = await this.restConnector.patch(`/notifications/${id}`, {\n      isRead: true\n    })\n    return resp.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}