{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _ from 'lodash';\nimport { IStorageGateway } from '../services/AuthService';\n\nvar StorageGateway =\n/*#__PURE__*/\nfunction () {\n  function StorageGateway(_ref) {\n    var restConnector = _ref.restConnector;\n\n    _classCallCheck(this, StorageGateway);\n\n    this.restConnector = restConnector;\n  }\n\n  _createClass(StorageGateway, [{\n    key: \"upload\",\n    value: function () {\n      var _upload = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(containerName, file) {\n        var formData, _ref2, data, uploadedFileData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formData = new FormData();\n                formData.append('file', file);\n                _context.next = 4;\n                return this.restConnector.post(\"/containers/\".concat(containerName, \"/upload\"), formData, {\n                  headers: {\n                    'Content-Type': 'multipart/form-data'\n                  }\n                });\n\n              case 4:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                uploadedFileData = _.get(data, 'result.files.file[0]') || data;\n                return _context.abrupt(\"return\", this._getPublicFileLink(uploadedFileData));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function upload(_x, _x2) {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }()\n    /**\n     * The response data format returned from S3, Google Cloud, Mongo GridFS, and file system\n     * are very different.\n     * This method is about getting correct file URL based on those different response format.\n     * @param fileData\n     * @return {string} file URL\n     * @private\n     */\n\n  }, {\n    key: \"_getPublicFileLink\",\n    value: function _getPublicFileLink(fileData) {\n      if (fileData.providerResponse) {\n        // AWS S3\n        if (fileData.providerResponse.location) {\n          return fileData.providerResponse.location;\n        } // Google Cloud Storage\n\n\n        if (fileData.providerResponse.mediaLink) {\n          return fileData.providerResponse.mediaLink;\n        }\n      } // Mongo GridFs\n\n\n      if (fileData._id) {\n        return \"/api/containers/\".concat(fileData.metadata.container, \"/download/\").concat(fileData._id);\n      } // File system\n\n\n      return \"/api/containers/\".concat(fileData.container, \"/download/\").concat(fileData.name);\n    }\n  }]);\n\n  return StorageGateway;\n}();\n\nexport { StorageGateway as default };","map":{"version":3,"sources":["/home/thang/Documents/GitHub/link-webapi/client/gateways/StorageGateway.js"],"names":["_","IStorageGateway","StorageGateway","restConnector","containerName","file","formData","FormData","append","post","headers","data","uploadedFileData","get","_getPublicFileLink","fileData","providerResponse","location","mediaLink","_id","metadata","container","name"],"mappings":";;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,eAAT,QAAgC,yBAAhC;;IAEqBC,c;;;AACnB,gCAAgC;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AAAA;;AAC9B,SAAKA,aAAL,GAAqBA,aAArB;AACD;;;;;;;gDAEaC,a,EAAeC,I;;;;;;;AACvBC,gBAAAA,Q,GAAW,IAAIC,QAAJ,E;AACfD,gBAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;;uBACuB,KAAKF,aAAL,CAAmBM,IAAnB,uBACNL,aADM,cAErBE,QAFqB,EAGrB;AACEI,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT;AADX,iBAHqB,C;;;;AAAfC,gBAAAA,I,SAAAA,I;AASFC,gBAAAA,gB,GAAmBZ,CAAC,CAACa,GAAF,CAAMF,IAAN,EAAY,sBAAZ,KAAuCA,I;iDACzD,KAAKG,kBAAL,CAAwBF,gBAAxB,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;uCAQoBG,Q,EAAU;AAC5B,UAAIA,QAAQ,CAACC,gBAAb,EAA+B;AAC7B;AACA,YAAID,QAAQ,CAACC,gBAAT,CAA0BC,QAA9B,EAAwC;AACtC,iBAAOF,QAAQ,CAACC,gBAAT,CAA0BC,QAAjC;AACD,SAJ4B,CAM7B;;;AACA,YAAIF,QAAQ,CAACC,gBAAT,CAA0BE,SAA9B,EAAyC;AACvC,iBAAOH,QAAQ,CAACC,gBAAT,CAA0BE,SAAjC;AACD;AACF,OAX2B,CAa5B;;;AACA,UAAIH,QAAQ,CAACI,GAAb,EAAkB;AAChB,yCAA0BJ,QAAQ,CAACK,QAAT,CAAkBC,SAA5C,uBACEN,QAAQ,CAACI,GADX;AAGD,OAlB2B,CAoB5B;;;AACA,uCAA0BJ,QAAQ,CAACM,SAAnC,uBAAyDN,QAAQ,CAACO,IAAlE;AACD;;;;;;SAnDkBpB,c","sourcesContent":["import _ from 'lodash'\nimport { IStorageGateway } from '../services/AuthService'\n\nexport default class StorageGateway implements IStorageGateway {\n  constructor ({ restConnector }) {\n    this.restConnector = restConnector\n  }\n\n  async upload (containerName, file) {\n    let formData = new FormData()\n    formData.append('file', file)\n    const { data } = await this.restConnector.post(\n      `/containers/${containerName}/upload`,\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    )\n    const uploadedFileData = _.get(data, 'result.files.file[0]') || data\n    return this._getPublicFileLink(uploadedFileData)\n  }\n\n  /**\n   * The response data format returned from S3, Google Cloud, Mongo GridFS, and file system\n   * are very different.\n   * This method is about getting correct file URL based on those different response format.\n   * @param fileData\n   * @return {string} file URL\n   * @private\n   */\n  _getPublicFileLink (fileData) {\n    if (fileData.providerResponse) {\n      // AWS S3\n      if (fileData.providerResponse.location) {\n        return fileData.providerResponse.location\n      }\n\n      // Google Cloud Storage\n      if (fileData.providerResponse.mediaLink) {\n        return fileData.providerResponse.mediaLink\n      }\n    }\n\n    // Mongo GridFs\n    if (fileData._id) {\n      return `/api/containers/${fileData.metadata.container}/download/${\n        fileData._id\n      }`\n    }\n\n    // File system\n    return `/api/containers/${fileData.container}/download/${fileData.name}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}